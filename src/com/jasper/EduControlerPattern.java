/*
 * @(#)EduControlerPattern.java
 *
 * Copyright (c) 2013 JASPER DISPLAY, Inc.
 * An Unpublished Work.  All Rights Reserved.
 *
 * JASPER DISPLAY PROPRIETARY:  Distribution of this source code
 * without permission from the copyright holder is strictly forbidden.
 */
package com.jasper;

import static com.jasper.EduPatternTest.patternFrame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author sonnv
 */
public class EduControlerPattern extends OpticsPane {

    PatternImage image1 = new PatternImage();
    private Point startPoint = new Point(0, 0);
    private Point rectLocale = new Point();
    private Dimension rectSize = new Dimension();
    private int zoom_layOut = 80;
    private BufferedImage capture = null;
    private BufferedImage raw;
    private String strLog = "";

    /**
     * Creates new form CylincalLens
     */
    public EduControlerPattern() {
        initComponents();
        image1 = ((EduPatternJPanel) panelPattern).pimage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        MouseBehavior behavior = new MouseBehavior();
        tabbedDesLog = new javax.swing.JTabbedPane();
        tabbedDiagram = new javax.swing.JTabbedPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jTextAreaDesc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        //diagramLens = new LensDiagram();
        diagramLens = new javax.swing.JPanel();
        lblDiagram = new javax.swing.JLabel();

        panelPattern = new EduPatternJPanel();
        jTabbedPaneOptics = new javax.swing.JTabbedPane();
        textFocal = new javax.swing.JTextField();
        textYpos = new javax.swing.JTextField();
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        textFocal = new javax.swing.JTextField();
        sliderFocal = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        textXpos = new javax.swing.JTextField();
        sliderXpos = new javax.swing.JSlider();
        textYpos = new javax.swing.JTextField();
        sliderYPos = new javax.swing.JSlider();
        ok = new javax.swing.JButton();
        btnLensON = new javax.swing.JButton();
        btnSecond = new javax.swing.JButton();

//        jLabel1.setText("Focal length");
//
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderFocal, org.jdesktop.beansbinding.ELProperty.create("${value}"), textFocal, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        layoutControl = new javax.swing.JLayeredPane();
        tabbedControl = new javax.swing.JTabbedPane();
        panelGeneral = new javax.swing.JPanel();
        jLabelSelectExperiment = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTabbedControler = new javax.swing.JTabbedPane();
        jPanelLens = new javax.swing.JPanel();
        jPanelCyllindrical1 = new javax.swing.JPanel();
        jPanelMicroscope = new javax.swing.JPanel();
        // Lens
        jLabel3 = new javax.swing.JLabel();
        jSliderFocalLens = new javax.swing.JSlider();
        txtFocalLens = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtXPositionLens = new javax.swing.JTextField();
        jSliderXPositionLens = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        txtYPositionLens = new javax.swing.JTextField();
        jSliderYPositionLens = new javax.swing.JSlider();
        jButtonLens = new javax.swing.JButton();
        jButton11LensOn = new javax.swing.JButton();
        jButtonDisplaySecondOn = new javax.swing.JButton();
        // Lens Michelson
        lblFocalLensMichelson = new javax.swing.JLabel();
        jSliderFocalLensMichelson = new javax.swing.JSlider();
        txtFocalLensMichelson = new javax.swing.JTextField();
        lblXLensMichelson = new javax.swing.JLabel();
        txtXPositionLensMichelson = new javax.swing.JTextField();
        jSliderXPositionLensMichelson = new javax.swing.JSlider();
        lblYLensMichelson = new javax.swing.JLabel();
        txtYPositionLensMichelson = new javax.swing.JTextField();
        jSliderYPositionLensMichelson = new javax.swing.JSlider();
        jButtonLensMichelson = new javax.swing.JButton();
        jButton11LensOnMichelson = new javax.swing.JButton();
        jButtonDisplaySecondOnMichelson = new javax.swing.JButton();
        rangeSlider = new RangeSlider();
        // END Lens Michelson

        jPanelCyllindrical = new javax.swing.JPanel();
        jPanelLensMichelson = new javax.swing.JPanel();
        jPanelMirror = new javax.swing.JPanel();
        panelCalebration = new javax.swing.JPanel();
        panelSlit = new javax.swing.JPanel();
        panelDoubleSlit = new javax.swing.JPanel();
        panelSignal = new javax.swing.JPanel();
        panelSignalPhoto = new javax.swing.JPanel();
        panelPhase = new javax.swing.JPanel();
        jPanelPattern = new javax.swing.JPanel();

        // Microscope
        lblFocalMicroscope = new javax.swing.JLabel();
        lblXPosMicroscope = new javax.swing.JLabel();
        lblYPosMicroscope = new javax.swing.JLabel();
        jSliderFocalMicroscope = new javax.swing.JSlider();
        jSliderXPositionMicroscope = new javax.swing.JSlider();
        jSliderYPositionMicroscope = new javax.swing.JSlider();
        txtFocalMicroscope = new javax.swing.JTextField();
        txtXPositionMicroscope = new javax.swing.JTextField();
        txtYPositionMicroscope = new javax.swing.JTextField();
        buttonMicroscopeLensOn = new javax.swing.JButton();
        buttonMicroscopeDisplaySecondOn = new javax.swing.JButton();
        buttonMicroscopeGeneral = new javax.swing.JButton();

        // Cyllin
        lblFocalCyllin = new javax.swing.JLabel();
        lblXPosCyllin = new javax.swing.JLabel();
        lblYPosCyllin = new javax.swing.JLabel();
        jSliderFocalCyllin = new javax.swing.JSlider();
        jSliderXPositionCyllin = new javax.swing.JSlider();
        jSliderYPositionCyllin = new javax.swing.JSlider();
        txtFocalCyllin = new javax.swing.JTextField();
        txtXPositionCyllin = new javax.swing.JTextField();
        txtYPositionCyllin = new javax.swing.JTextField();
        buttonCyllinLensOn = new javax.swing.JButton();
        buttonCyllinDisplaySecondOn = new javax.swing.JButton();
        buttonCyllinGeneral = new javax.swing.JButton();

        // Mirror
        lblPhy = new javax.swing.JLabel();
        lblThetaMirror = new javax.swing.JLabel();
        jSliderPhyMirror = new javax.swing.JSlider();
        jSliderThetaMirror = new javax.swing.JSlider();
        txtPhyMirror = new javax.swing.JTextField();
        txtThetaMirror = new javax.swing.JTextField();
        buttonMirrorLensOn = new javax.swing.JButton();
        buttonMirrorDisplaySecondOn = new javax.swing.JButton();
        buttonMirrorGeneral = new javax.swing.JButton();

        layoutControl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tabbedControl.setAlignmentX(100);

        jLabelSelectExperiment.setText("Select Experiment");
        jLabelSelectExperiment.setForeground(Color.red);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"      ------ Select experiment ------", "1. Telephoto lens", "2. Microscope", "3. Aberration (Foucault test)",
            "4. Michelson Interferometer", "5. Diffraction and Interference", "6. Spectrometer",
            "7. Signal Processing (4-f system)", "8. Phase Shifting Digital Holography", "9. Talbot Images", "10. Wavefront Modulation", "11. Wavelength Selective Switch"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboBox comboBox = (JComboBox) evt.getSource();

                Object selected = comboBox.getSelectedItem();
                if (selected.equals("      ------ Select experiment ------")) {
                    //jMenuItemDefaultExperimentPerformed(evt);
                } else if (selected.equals("1. Telephoto lens")) {
                    jMenuItemTelephotoActionPerformed(evt);
                } else if (selected.equals("2. Microscope")) {
                    jMenuItemMicroscopeActionPerformed(evt);
                } else if (selected.equals("3. Aberration (Foucault test)")) {
                    jMenuItemAberrationActionPerformed(evt);
                } else if (selected.equals("4. Michelson Interferometer")) {
                    jMenuItemMichelsonActionPerformed(evt);
                } else if (selected.equals("5. Diffraction and Interference")) {
                    jMenuItemDiffractionActionPerformed(evt);
                } else if (selected.equals("6. Spectrometer")) {
                    jMenuItemSpectrometerActionPerformed(evt);
                } else if (selected.equals("7. Signal Processing (4-f system)")) {
                    jMenuItemSignalProcessingActionPerformed(evt);
                } else if (selected.equals("8. Phase Shifting Digital Holography")) {
                    jMenuItemPhaseShiftingActionPerformed(evt);
                } else if (selected.equals("9. Talbot Images")) {
                    jMenuItemTalbotImagesActionPerformed(evt);
                } else if (selected.equals("10. Wavefront Modulation")) {
                    jMenuItemWavefrontActionPerformed(evt);
                } else if (selected.equals("11. Wavelength Selective Switch")) {
                    jMenuItemWavelengthActionPerformed(evt);
                }
            }
        });

        jLabel3.setText("Focal length");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderFocalLens, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalLens, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel4.setText("X Position");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderXPositionLens, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtXPositionLens, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel2.setText("Y Position");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderYPositionLens, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtYPositionLens, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jButtonLens.setText("General");
        jButtonLens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformed(evt);
            }
        });

        jButton11LensOn.setText("1:1 lens ON");
        jButton11LensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformed(evt);
            }
        });

        jButtonDisplaySecondOn.setText("Second display ON");
        jButtonDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformed(evt);
            }
        });

        jSliderFocalLens.setMaximum(100000);
        jSliderFocalLens.setMinimum(-1000);
        jSliderFocalLens.setValue(522);
        jSliderFocalLens.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformed(evt);
            }
        });

        jSliderXPositionLens.setMaximum(100);
        jSliderXPositionLens.setMinimum(-100);
        jSliderXPositionLens.setValue(0);
        jSliderXPositionLens.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformed(evt);
            }
        });

        jSliderYPositionLens.setMaximum(100);
        jSliderYPositionLens.setMinimum(-100);
        jSliderYPositionLens.setValue(0);
        jSliderYPositionLens.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCyllindrical1Layout = new javax.swing.GroupLayout(jPanelCyllindrical1);
        jPanelCyllindrical1.setLayout(jPanelCyllindrical1Layout);
        jPanelCyllindrical1Layout.setHorizontalGroup(
                jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionLens)
                .addComponent(txtFocalLens, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionLens))))
                .addGap(5, 5, 5)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalLens, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderXPositionLens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionLens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jButtonLens, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton11LensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelCyllindrical1Layout.setVerticalGroup(
                jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalLens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(txtXPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(txtYPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(jButtonDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton11LensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonLens, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));

//        javax.swing.GroupLayout jPanelLensLayout = new javax.swing.GroupLayout(jPanelLens);
//        jPanelLens.setLayout(jPanelLensLayout);
//        jPanelLensLayout.setHorizontalGroup(
//            jPanelLensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(jPanelLensLayout.createSequentialGroup()
//                .addGap(5, 5, 5)
//                .addComponent(jPanelCyllindrical1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                .addContainerGap())
//        );
//        jPanelLensLayout.setVerticalGroup(
//            jPanelLensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(jPanelLensLayout.createSequentialGroup()
//                .addComponent(jPanelCyllindrical1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(0, 0, Short.MAX_VALUE))
//        );

        jTabbedControler.addTab("Lens", jPanelLens);
        // END Telephone lens

        // Microscope
        lblFocalMicroscope.setText("Focal length");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderFocalMicroscope, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalMicroscope, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblXPosMicroscope.setText("X Position");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderXPositionMicroscope, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtXPositionMicroscope, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblYPosMicroscope.setText("Y Position");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderYPositionMicroscope, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtYPositionMicroscope, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonMicroscopeGeneral.setText("General");
        buttonMicroscopeGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMicroscope(evt);
            }
        });

        buttonMicroscopeLensOn.setText("1:1 lens ON");
        buttonMicroscopeLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMicroscope(evt);
            }
        });

        buttonMicroscopeDisplaySecondOn.setText("Second display ON");
        buttonMicroscopeDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMicroscope(evt);
            }
        });

        jSliderFocalMicroscope.setMaximum(100);
        jSliderFocalMicroscope.setMinimum(-100);
        jSliderFocalMicroscope.setValue(10);
        jSliderFocalMicroscope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        jSliderXPositionMicroscope.setMaximum(100);
        jSliderXPositionMicroscope.setMinimum(-100);
        jSliderXPositionMicroscope.setValue(0);
        jSliderXPositionMicroscope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        jSliderYPositionMicroscope.setMaximum(100);
        jSliderYPositionMicroscope.setMinimum(-100);
        jSliderYPositionMicroscope.setValue(0);
        jSliderYPositionMicroscope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        javax.swing.GroupLayout jPanelMicroscopeLayout = new javax.swing.GroupLayout(jPanelMicroscope);
        jPanelMicroscope.setLayout(jPanelMicroscopeLayout);
        jPanelMicroscopeLayout.setHorizontalGroup(
                jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblFocalMicroscope)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(lblXPosMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblYPosMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionMicroscope)
                .addComponent(txtFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionMicroscope))))
                .addGap(5, 5, 5)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderXPositionMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(buttonMicroscopeGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMicroscopeLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMicroscopeDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelMicroscopeLayout.setVerticalGroup(
                jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblXPosMicroscope)
                .addComponent(txtXPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblYPosMicroscope)
                .addComponent(txtYPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonMicroscopeGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMicroscopeLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMicroscopeDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));

        jTabbedControler.addTab("Lens", jPanelMicroscope);
        // END Microscope

        // BEGIN Panel Cyllindrical

        lblFocalCyllin.setText("Focal length");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderFocalCyllin, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalCyllin, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblXPosCyllin.setText("X Position");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderXPositionCyllin, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtXPositionCyllin, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblYPosCyllin.setText("Y Position");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderYPositionCyllin, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtYPositionCyllin, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonCyllinGeneral.setText("General");
        buttonCyllinGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedCyllin(evt);
            }
        });

        buttonCyllinLensOn.setText("1:1 lens ON");
        buttonCyllinLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedCyllin(evt);
            }
        });

        buttonCyllinDisplaySecondOn.setText("Second display ON");
        buttonCyllinDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedCyllin(evt);
            }
        });

        jSliderFocalCyllin.setMaximum(10000);
        jSliderFocalCyllin.setMinimum(-1000);
        jSliderFocalCyllin.setValue(522);
        jSliderFocalCyllin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedCyllin(evt);
            }
        });

        jSliderXPositionCyllin.setMaximum(1000);
        jSliderXPositionCyllin.setMinimum(-100);
        jSliderXPositionCyllin.setValue(150);
        jSliderXPositionCyllin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedCyllin(evt);
            }
        });

        jSliderYPositionCyllin.setMaximum(1000);
        jSliderYPositionCyllin.setMinimum(-100);
        jSliderYPositionCyllin.setValue(200);
        jSliderYPositionCyllin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedCyllin(evt);
            }
        });

        javax.swing.GroupLayout jPanelCyllindricalLayout = new javax.swing.GroupLayout(jPanelCyllindrical);
        jPanelCyllindrical.setLayout(jPanelCyllindricalLayout);
        jPanelCyllindricalLayout.setHorizontalGroup(
                jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblFocalCyllin)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(lblXPosCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblYPosCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionCyllin)
                .addComponent(txtFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionCyllin))))
                .addGap(5, 5, 5)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderXPositionCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(buttonCyllinGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonCyllinLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonCyllinDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelCyllindricalLayout.setVerticalGroup(
                jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblXPosCyllin)
                .addComponent(txtXPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblYPosCyllin)
                .addComponent(txtYPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonCyllinGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonCyllinLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonCyllinDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));

        jTabbedControler.addTab("Cyllindrical", jPanelCyllindrical);
        // END Panel Cyllindrical

        // BEGIN Mirror
        lblPhy.setText("Phy");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderPhyMirror, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtPhyMirror, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblThetaMirror.setText("Theta");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderThetaMirror, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtThetaMirror, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonMirrorGeneral.setText("General");
        buttonMirrorGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMirror(evt);
            }
        });

        buttonMirrorLensOn.setText("1:1 lens ON");
        buttonMirrorLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMirror(evt);
            }
        });

        buttonMirrorDisplaySecondOn.setText("Second display ON");
        buttonMirrorDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMirror(evt);
            }
        });

        jSliderPhyMirror.setMaximum(10000);
        jSliderPhyMirror.setMinimum(-1000);
        jSliderPhyMirror.setValue(522);
        jSliderPhyMirror.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMirror(evt);
            }
        });

        jSliderThetaMirror.setMaximum(10000);
        jSliderThetaMirror.setMinimum(-1000);
        jSliderThetaMirror.setValue(522);
        jSliderThetaMirror.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMirror(evt);
            }
        });

        javax.swing.GroupLayout jPanelMirrorlLayout = new javax.swing.GroupLayout(jPanelMirror);
        jPanelMirror.setLayout(jPanelMirrorlLayout);
        jPanelMirrorlLayout.setHorizontalGroup(
                jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblThetaMirror)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addComponent(lblPhy, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtThetaMirror, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtPhyMirror))))
                .addGap(5, 5, 5)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderPhyMirror, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderThetaMirror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(buttonMirrorGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelMirrorlLayout.setVerticalGroup(
                jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblPhy)
                .addComponent(txtPhyMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderPhyMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblThetaMirror)
                .addComponent(txtThetaMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderThetaMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonMirrorGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));

        jTabbedControler.addTab("Mirror", jPanelMirror);

        javax.swing.GroupLayout panelGeneralLayout = new javax.swing.GroupLayout(panelGeneral);
        panelGeneral.setLayout(panelGeneralLayout);
        panelGeneralLayout.setHorizontalGroup(
                panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGeneralLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabelSelectExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(5, 5, 5)
                .addComponent(jTabbedPaneOptics)
                .addGap(5, 5, 5)));
        panelGeneralLayout.setVerticalGroup(
                panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelSelectExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jTabbedPaneOptics)
                .addGap(5, 5, 5)
                .addContainerGap()));

        tabbedControl.addTab("General", panelGeneral);

        javax.swing.GroupLayout panelCalebrationLayout = new javax.swing.GroupLayout(panelCalebration);
        panelCalebration.setLayout(panelCalebrationLayout);
        panelCalebrationLayout.setHorizontalGroup(
                panelCalebrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 665, Short.MAX_VALUE));
        panelCalebrationLayout.setVerticalGroup(
                panelCalebrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 272, Short.MAX_VALUE));

        tabbedControl.addTab("Calibration", panelCalebration);
        /*
         * Slit
         */
        comboBoxSlit = new javax.swing.JComboBox();
        lblWidthSlit = new javax.swing.JLabel();
        lblHeightSlit = new javax.swing.JLabel();
        lblRotationSlit = new javax.swing.JLabel();
        lblPosSlit = new javax.swing.JLabel();
        lblGraySlit = new javax.swing.JLabel();
        text_single_width = new javax.swing.JTextField();
        text_single_height = new javax.swing.JTextField();
        text_single_rotation = new javax.swing.JTextField();
        text_single_position = new javax.swing.JTextField();
        text_single_gray = new javax.swing.JTextField();
        s_single_width = new javax.swing.JSlider();
        s_single_height = new javax.swing.JSlider();
        s_single_rotation = new javax.swing.JSlider();
        s_single_position = new javax.swing.JSlider();
        s_single_gray = new javax.swing.JSlider();
        jLabelSpacingSlit = new javax.swing.JLabel();
        text_single_spacing = new javax.swing.JTextField();
        s_single_spacing = new javax.swing.JSlider();
        buttonGennerateSlit = new javax.swing.JButton();
        buttong11LensOnSlit = new javax.swing.JButton();
        buttonSecondDisplaySlit = new javax.swing.JButton();

        // double slit
        lblWidthDoubleSlit = new javax.swing.JLabel();
        lblHeightDoubleSlit = new javax.swing.JLabel();
        lblRotationDoubleSlit = new javax.swing.JLabel();
        lblPosDoubleSlit = new javax.swing.JLabel();
        lblGrayDoubleSlit = new javax.swing.JLabel();
        text_single_widthDoubleSlit = new javax.swing.JTextField();
        text_single_heightDoubleSlit = new javax.swing.JTextField();
        text_single_rotationDoubleSlit = new javax.swing.JTextField();
        text_single_positionDoubleSlit = new javax.swing.JTextField();
        text_single_grayDoubleSlit = new javax.swing.JTextField();
        s_single_widthDoubleSlit = new javax.swing.JSlider();
        s_single_heightDoubleSlit = new javax.swing.JSlider();
        s_single_rotationDoubleSlit = new javax.swing.JSlider();
        s_single_positionDoubleSlit = new javax.swing.JSlider();
        s_single_grayDoubleSlit = new javax.swing.JSlider();
        jLabelSpacingDoubleSlit = new javax.swing.JLabel();
        text_single_spacingDoubleSlit = new javax.swing.JTextField();
        s_single_spacingDoubleSlit = new javax.swing.JSlider();
        buttonGennerateDoubleSlit = new javax.swing.JButton();
        buttong11LensOnDoubleSlit = new javax.swing.JButton();
        buttonSecondDisplayDoubleSlit = new javax.swing.JButton();


        lblWidthSlit.setText("Width");

        lblHeightSlit.setText("Width");

        lblRotationSlit.setText("Rotation");

        lblPosSlit.setText("Positions");

        lblGraySlit.setText("GrayLevel ");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_width, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_width, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_height, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_height, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_rotation, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_rotation, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_position, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_position, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_gray, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_gray, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabelSpacingSlit.setText("Spacing");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_spacing, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_spacing, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        // disable when slit = 1
        jLabelSpacingSlit.hide();
        text_single_spacing.hide();
        s_single_spacing.hide();
        // s_single_width.setMaximum(image1.getBounds().width);
        // s_single_width.setValue(image1.getBounds().width);
        s_single_width.setMaximum(3866);
        s_single_width.setValue(3866);
        s_single_width.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_height.setMaximum(image1.getBounds().height);
        s_single_height.setValue(100);
        s_single_height.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_rotation.setMaximum(180);
        s_single_rotation.setMinimum(-180);
        s_single_rotation.setValue(0);
        s_single_rotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_position.setMaximum(image1.getBounds().height / 2);
        s_single_position.setMinimum(-(image1.getBounds().height / 2));
        s_single_position.setValue(0);
        s_single_position.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_gray.setMaximum(255);
        s_single_gray.setValue(255);
        s_single_gray.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_spacing.setMaximum(image1.getBounds().height);
        s_single_spacing.setValue(400);
        s_single_spacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_spacing.setMaximum(image1.getBounds().height);
        s_single_spacing.setValue(400);
        s_single_spacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });

        buttonGennerateSlit.setText("Generate");
        buttonGennerateSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedSlit(evt);
            }
        });
        buttong11LensOnSlit.setText("1:1 lens ON");
        buttong11LensOnSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedSlit(evt);
            }
        });
        buttonSecondDisplaySlit.setText("Second display ON");
        buttonSecondDisplaySlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedSlit(evt);
            }
        });
        comboBoxSlit.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Single Slit", "Double Slit"}));
        comboBoxSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Object selected = comboBoxSlit.getSelectedItem();
                if (selected.equals("Single Slit")) {
                    slit = 1;
                    jLabelSpacingSlit.hide();
                    text_single_spacing.hide();
                    s_single_spacing.hide();

                }
                if (selected.equals("Double Slit")) {
                    slit = 2;
                    jLabelSpacingSlit.show();
                    text_single_spacing.show();
                    s_single_spacing.show();
                }
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
                image.slit(slit);
                EduPatternTest.updateLensPatternPattern(image, genLogSlit());
                imageGenerated = true;
            }
        });
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(panelSlit);
        panelSlit.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblHeightSlit)
                .addGap(29, 29, 29)
                .addComponent(text_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(s_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblGraySlit)
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(text_single_gray, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addComponent(text_single_spacing)))
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblRotationSlit)
                .addGap(18, 18, 18)
                .addComponent(text_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabelSpacingSlit)
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblPosSlit)
                .addGap(11, 11, 11)
                .addComponent(text_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(s_single_rotation, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addComponent(s_single_position, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(s_single_gray, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(s_single_spacing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)))
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(buttonGennerateSlit)
                .addGap(18, 18, 18)
                .addComponent(buttong11LensOnSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSecondDisplaySlit, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)) //.addComponent(comboBoxSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                )
                .addContainerGap(28, Short.MAX_VALUE)));
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                //.addComponent(comboBoxSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblHeightSlit)
                .addComponent(text_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
                .addComponent(s_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblRotationSlit)
                .addComponent(text_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblPosSlit)
                .addComponent(text_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblGraySlit)
                .addComponent(text_single_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(s_single_gray, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelSpacingSlit)
                .addComponent(text_single_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_single_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGennerateSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttong11LensOnSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondDisplaySlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))) //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                )));

        //tabbedControl.addTab("  Slit  ", panelSlit);

        lblWidthDoubleSlit.setText("Width");

        lblHeightDoubleSlit.setText("Width");

        lblRotationDoubleSlit.setText("Rotation");

        lblPosDoubleSlit.setText("Positions");

        lblGrayDoubleSlit.setText("GrayLevel ");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_widthDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_widthDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_heightDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_heightDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_rotationDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_rotationDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_positionDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_positionDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_grayDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_grayDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabelSpacingDoubleSlit.setText("Spacing");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_spacingDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_spacingDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);


        // s_single_width.setMaximum(image1.getBounds().width);
        // s_single_width.setValue(image1.getBounds().width);
        s_single_widthDoubleSlit.setMaximum(3866);
        s_single_widthDoubleSlit.setValue(3866);
        s_single_widthDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_heightDoubleSlit.setMaximum(image1.getBounds().height);
        s_single_heightDoubleSlit.setValue(100);
        s_single_heightDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_rotationDoubleSlit.setMaximum(180);
        s_single_rotationDoubleSlit.setMinimum(-180);
        s_single_rotationDoubleSlit.setValue(0);
        s_single_rotationDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_positionDoubleSlit.setMaximum(image1.getBounds().height / 2);
        s_single_positionDoubleSlit.setMinimum(-(image1.getBounds().height / 2));
        s_single_positionDoubleSlit.setValue(0);
        s_single_positionDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_grayDoubleSlit.setMaximum(255);
        s_single_grayDoubleSlit.setValue(255);
        s_single_grayDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_spacingDoubleSlit.setMaximum(image1.getBounds().height);
        s_single_spacingDoubleSlit.setValue(400);
        s_single_spacingDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_spacingDoubleSlit.setMaximum(image1.getBounds().height);
        s_single_spacingDoubleSlit.setValue(400);
        s_single_spacingDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });

        buttonGennerateDoubleSlit.setText("Generate");
        buttonGennerateDoubleSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedDoubleSlit(evt);
            }
        });
        buttong11LensOnDoubleSlit.setText("1:1 lens ON");
        buttong11LensOnDoubleSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedDoubleSlit(evt);
            }
        });
        buttonSecondDisplayDoubleSlit.setText("Second display ON");
        buttonSecondDisplayDoubleSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedDoubleSlit(evt);
            }
        });

        // double slit
        javax.swing.GroupLayout panelDoubleSlitLayout = new javax.swing.GroupLayout(panelDoubleSlit);
        panelDoubleSlit.setLayout(panelDoubleSlitLayout);
        panelDoubleSlitLayout.setHorizontalGroup(
                panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(5, 5, 5)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addComponent(lblHeightDoubleSlit)
                .addGap(29, 29, 29)
                .addComponent(text_single_heightDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(s_single_heightDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addComponent(lblGrayDoubleSlit)
                .addGap(5, 5, 5)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(text_single_grayDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addComponent(text_single_spacingDoubleSlit)))
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addComponent(lblRotationDoubleSlit)
                .addGap(18, 18, 18)
                .addComponent(text_single_rotationDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabelSpacingDoubleSlit)
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addComponent(lblPosDoubleSlit)
                .addGap(11, 11, 11)
                .addComponent(text_single_positionDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(s_single_rotationDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addComponent(s_single_positionDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(s_single_grayDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(s_single_spacingDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)))
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(buttonGennerateDoubleSlit)
                .addGap(18, 18, 18)
                .addComponent(buttong11LensOnDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSecondDisplayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE)));
        panelDoubleSlitLayout.setVerticalGroup(
                panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDoubleSlitLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblHeightDoubleSlit)
                .addComponent(text_single_heightDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
                .addComponent(s_single_heightDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblRotationDoubleSlit)
                .addComponent(text_single_rotationDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_single_rotationDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDoubleSlitLayout.createSequentialGroup()
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblPosDoubleSlit)
                .addComponent(text_single_positionDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_single_positionDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblGrayDoubleSlit)
                .addComponent(text_single_grayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(s_single_grayDoubleSlit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelSpacingDoubleSlit)
                .addComponent(text_single_spacingDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_single_spacingDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGennerateDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttong11LensOnDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondDisplayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))) //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                )));

        /*
         * Signal
         */
        lblWidthY = new javax.swing.JLabel();
        lblHeightY = new javax.swing.JLabel();
        lblRotationProcessing = new javax.swing.JLabel();
        lblPosX = new javax.swing.JLabel();
        lblPosY = new javax.swing.JLabel();
        text_width_processing_y = new javax.swing.JTextField();
        text_height_processing_y = new javax.swing.JTextField();
        text_rotation_processing = new javax.swing.JTextField();
        text_position_processing_x = new javax.swing.JTextField();
        text_position_processing_y = new javax.swing.JTextField();
        s_processing_width_y = new javax.swing.JSlider();
        s_processing_height_y = new javax.swing.JSlider();
        s_processing_rotation = new javax.swing.JSlider();
        s_processing_positionx = new javax.swing.JSlider();
        s_processing_pos_y = new javax.swing.JSlider();
        jLabelGrayProcessing = new javax.swing.JLabel();
        text_processing_gray = new javax.swing.JTextField();
        s_processing_gray = new javax.swing.JSlider();
        buttonGennerateProcessing = new javax.swing.JButton();
        button11LensOnProcessing = new javax.swing.JButton();
        buttonSecondDisplayProcessing = new javax.swing.JButton();
        lblWidthX = new javax.swing.JLabel();
        text_width_processing_x = new javax.swing.JTextField();
        s_processing_width_x = new javax.swing.JSlider();
        lblHeightX = new javax.swing.JLabel();
        text_height_processing_x = new javax.swing.JTextField();
        s_processing_height_x = new javax.swing.JSlider();
        // lblWidthY.setText("Width Y");
        lblHeightY.setText("Width Y");

        lblRotationProcessing.setText("Rotation");

        lblPosX.setText("Position X");

        lblPosY.setText("Position Y");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_width_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_width_processing_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_width_y.setMaximum(image1.getBounds().width);
        s_processing_width_y.setValue(100);
        s_processing_width_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_height_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_height_processing_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_height_y.setMaximum(9999);
        s_processing_height_y.setValue(9999);
        s_processing_height_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_rotation, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_rotation_processing, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_rotation.setMaximum(180);
        s_processing_rotation.setMinimum(-180);
        s_processing_rotation.setValue(0);
        s_processing_rotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_positionx, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_position_processing_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_positionx.setMaximum(image1.getBounds().height / 2);
        s_processing_positionx.setMinimum(-(image1.getBounds().height / 2));
        s_processing_positionx.setValue(0);
        s_processing_positionx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_pos_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_position_processing_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_pos_y.setMaximum(image1.getBounds().width / 2);
        s_processing_pos_y.setMinimum(-(image1.getBounds().width / 2));
        s_processing_pos_y.setValue(0);
        s_processing_pos_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        jLabelGrayProcessing.setText("GrayLevel");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_gray, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_processing_gray, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_gray.setMaximum(255);
        s_processing_gray.setValue(255);
        s_processing_gray.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);



        buttonGennerateProcessing.setText("Generate");
        buttonGennerateProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedProcessing(evt);
            }
        });

        button11LensOnProcessing.setText("1:1 lens ON");
        button11LensOnProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedProcessing(evt);
            }
        });

        buttonSecondDisplayProcessing.setText("Second display ON");
        buttonSecondDisplayProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedProcessing(evt);
            }
        });

        // lblWidthX.setText("Width X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_width_x, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_width_processing_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_width_x.setMaximum(3866);
        s_processing_width_x.setValue(3866);
        s_processing_width_x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        lblHeightX.setText("Width X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_height_x, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_height_processing_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_height_x.setMaximum(image1.getBounds().height);
        s_processing_height_x.setValue(100);
        s_processing_height_x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanelProcessingLayout = new javax.swing.GroupLayout(panelSignal);
        panelSignal.setLayout(jPanelProcessingLayout);
        jPanelProcessingLayout.setHorizontalGroup(
                jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addContainerGap()
                //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblPosX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(text_position_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblPosY)
                .addComponent(jLabelGrayProcessing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_position_processing_y))))
                .addGap(17, 17, 17)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_processing_pos_y, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_positionx, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblHeightY)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblHeightX)
                .addGap(31, 31, 31)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_width_processing_y, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_height_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(s_processing_height_x, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addComponent(s_processing_width_y, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblRotationProcessing)
                .addGap(27, 27, 27)
                .addComponent(text_rotation_processing, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(s_processing_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(buttonGennerateProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(button11LensOnProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(buttonSecondDisplayProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE)));
        jPanelProcessingLayout.setVerticalGroup(
                jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProcessingLayout.createSequentialGroup()
                //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(s_processing_height_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_height_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblHeightX))
                .addGap(6, 6, 6)))
                .addGap(2, 2, 2)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_width_processing_y, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblHeightY))
                .addComponent(s_processing_width_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_rotation_processing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblRotationProcessing))
                .addComponent(s_processing_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_processing_positionx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_position_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPosX)))
                .addGap(10, 10, 10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_position_processing_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPosY)
                .addComponent(s_processing_pos_y, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelGrayProcessing))
                .addGap(8, 8, 8)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGennerateProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondDisplayProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)));
        /*
         * Phase retarder
         */
        openFile = new javax.swing.JFileChooser();
        s_phase_zoom = new javax.swing.JSlider();
        buttonOpenFile = new javax.swing.JButton();
        lblPleaseSelect = new javax.swing.JLabel();
        lblZoom = new javax.swing.JLabel();
        buttonSecondPhase = new javax.swing.JButton();
        button11LensOnPhase = new javax.swing.JButton();
        buttonGeneralPhase = new javax.swing.JButton();
        txtZoom = new javax.swing.JTextField();
//
//        buttonOpenFile.setText("Open file");
//        buttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                b_openFileActionPerformed(evt);
//            }
//        });
        buttonOpenFile.hide();
        //lblPleaseSelect.setText("Please open file");

        //lblZoom.setText("Zoom");
        lblZoom.setText("Gray level");

        buttonSecondPhase.setText("Second display ON");
        buttonSecondPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedPhase(evt);
            }
        });

        button11LensOnPhase.setText("1:1 leans ON");
        button11LensOnPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedPhase(evt);
            }
        });

        buttonGeneralPhase.setText("General");
        buttonGeneralPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedPhase(evt);
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_phase_zoom, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtZoom, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_phase_zoom.setMaximum(255);
        s_phase_zoom.setValue(0);
        s_phase_zoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedPhase(evt);
            }
        });
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(panelPhase);
        panelPhase.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                //.addComponent(jLayeredPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(buttonOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblZoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblPleaseSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(s_phase_zoom, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(buttonGeneralPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button11LensOnPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonSecondPhase)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))));
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 73, Short.MAX_VALUE) //.addComponent(jLayeredPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                )
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonOpenFile)
                .addComponent(lblPleaseSelect))
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_phase_zoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblZoom)))
                .addGap(50, 50, 50)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonSecondPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonGeneralPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));


        /*
         * Signal Photo
         */
        openFile = new javax.swing.JFileChooser();
        buttonOpenFile = new javax.swing.JButton();
        lblPleaseSelectPhoto = new javax.swing.JLabel();
        buttonSecondPhoto = new javax.swing.JButton();
        button11LensOnPhoto = new javax.swing.JButton();
        buttonGeneralPhoto = new javax.swing.JButton();
        buttonOpenFile.setText("Open file");
        buttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_openFileActionPerformed(evt);
            }
        });
        lblPleaseSelectPhoto.setText("Please open file");

        buttonSecondPhoto.setText("Second display ON");
        buttonSecondPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    buttonSecondGenerateActionPerformedProcessingPhoto(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        button11LensOnPhoto.setText("1:1 leans ON");
        button11LensOnPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    buttonGenerateActionPerformedProcessingPhoto(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        buttonGeneralPhoto.setText("General");
        buttonGeneralPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    buttonGenerateActionPerformedProcessingPhoto(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        javax.swing.GroupLayout signalPhotoLayout = new javax.swing.GroupLayout(panelSignalPhoto);
        panelSignalPhoto.setLayout(signalPhotoLayout);
        signalPhotoLayout.setHorizontalGroup(
                signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(signalPhotoLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(74, 74, 74)
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(signalPhotoLayout.createSequentialGroup()
                .addComponent(buttonGeneralPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button11LensOnPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonSecondPhoto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(signalPhotoLayout.createSequentialGroup()
                .addComponent(buttonOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(lblPleaseSelectPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(167, 167, 167)))));
        signalPhotoLayout.setVerticalGroup(
                signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signalPhotoLayout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addGroup(signalPhotoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonOpenFile)
                .addComponent(lblPleaseSelectPhoto))
                .addGap(41, 41, 41)
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGeneralPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))));
        /*
         * Lens Michelson
         */
        lblFocalLensMichelson.setText("Focal length");
        //binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, rangeSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalLensMichelson, org.jdesktop.beansbinding.BeanProperty.create("text"));
        //bindingGroup.addBinding(binding);

        lblXLensMichelson.setText("X Position");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderXPositionLensMichelson, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtXPositionLensMichelson, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblYLensMichelson.setText("Y Position");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderYPositionLensMichelson, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtYPositionLensMichelson, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jButtonLensMichelson.setText("General");
        jButtonLensMichelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMichelSon(evt);
            }
        });

        jButton11LensOnMichelson.setText("1:1 lens ON");
        jButton11LensOnMichelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMichelSon(evt);
            }
        });

        jButtonDisplaySecondOnMichelson.setText("Second display ON");
        jButtonDisplaySecondOnMichelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMichelSon(evt);
            }
        });

        jSliderFocalLensMichelson.setMaximum(100000);
        jSliderFocalLensMichelson.setMinimum(-1000);
        jSliderFocalLensMichelson.setValue(522);
        jSliderFocalLensMichelson.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        jSliderXPositionLensMichelson.setMaximum(1000);
        jSliderXPositionLensMichelson.setMinimum(-1000);
        jSliderXPositionLensMichelson.setValue(0);
        jSliderXPositionLensMichelson.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedLensMichelSon(evt);
            }
        });

        jSliderYPositionLensMichelson.setMaximum(1000);
        jSliderYPositionLensMichelson.setMinimum(-1000);
        jSliderYPositionLensMichelson.setValue(0);
        jSliderYPositionLensMichelson.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedLensMichelSon(evt);
            }
        });

        //rangeSlider.setPreferredSize(new Dimension(240, rangeSlider.getPreferredSize().height));
        rangeSlider.setMinimum(-20000);
        rangeSlider.setMaximum(20000);
        rangeSlider.setValue(10000);
        rangeSlider.setUpperValue(1522);
        int tmp = Integer.valueOf(rangeSlider.getValue());
        int tmp2 = Integer.valueOf(rangeSlider.getUpperValue());
        int valueSlider = tmp2 - tmp;
        //System.out.println("tmp2: " + tmp2 + " tmp: " + tmp + "  valueSlider: " + valueSlider);
        txtFocalLensMichelson.setText(String.valueOf(valueSlider));
        rangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                int tmp = Integer.valueOf(rangeSlider.getValue());
                int tmp2 = Integer.valueOf(rangeSlider.getUpperValue());
                int valueSlider = tmp2 - tmp;
                txtFocalLensMichelson.setText(String.valueOf(valueSlider));
                //System.out.println("tmp2: " + tmp2 + " tmp: " + tmp + "  valueSlider: " + valueSlider);
                sliderGenerateActionPerformedLensMichelSon(evt);
            }
        });

        javax.swing.GroupLayout jPanelLensMichelsonLayout = new javax.swing.GroupLayout(jPanelLensMichelson);
        jPanelLensMichelson.setLayout(jPanelLensMichelsonLayout);
        jPanelLensMichelsonLayout.setHorizontalGroup(
                jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblYLensMichelson)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(lblXLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionLensMichelson)
                .addComponent(txtFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionLensMichelson))))
                .addGap(5, 5, 5)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(rangeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderXPositionLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jButtonLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton11LensOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDisplaySecondOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelLensMichelsonLayout.setVerticalGroup(
                jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(rangeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblXLensMichelson)
                .addComponent(txtXPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblYLensMichelson)
                .addComponent(txtYPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(jButtonDisplaySecondOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton11LensOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));
        // END Michelson

        // BEGIN Spectremeter
        jPanelMirrorSpectometer = new javax.swing.JPanel();
        lblPhySpectometer = new javax.swing.JLabel();
        lblThetaMirrorSpectometer = new javax.swing.JLabel();
        jSliderPhyMirrorSpectometer = new javax.swing.JSlider();
        jSliderThetaMirrorSpectometer = new javax.swing.JSlider();
        txtPhyMirrorSpectometer = new javax.swing.JTextField();
        txtThetaMirrorSpectometer = new javax.swing.JTextField();
        buttonMirrorSpectometerLensOn = new javax.swing.JButton();
        buttonMirrorSpectometerDisplaySecondOn = new javax.swing.JButton();
        buttonMirrorSpectometerGeneral = new javax.swing.JButton();

        lblPhySpectometer.setText("Phy/100px");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderPhyMirrorSpectometer, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtPhyMirrorSpectometer, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblThetaMirrorSpectometer.setText("Theta/100px");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderThetaMirrorSpectometer, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtThetaMirrorSpectometer, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonMirrorSpectometerGeneral.setText("General");
        buttonMirrorSpectometerGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMirrorSpectometer(evt);
            }
        });

        buttonMirrorSpectometerLensOn.setText("1:1 lens ON");
        buttonMirrorSpectometerLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMirrorSpectometer(evt);
            }
        });

        buttonMirrorSpectometerDisplaySecondOn.setText("Second display ON");
        buttonMirrorSpectometerDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMirrorSpectometer(evt);
            }
        });

        jSliderPhyMirrorSpectometer.setMaximum(314);
        jSliderPhyMirrorSpectometer.setMinimum(-314);
        jSliderPhyMirrorSpectometer.setValue(314);
        jSliderPhyMirrorSpectometer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMirrorSpectometer(evt);
            }
        });

        jSliderThetaMirrorSpectometer.setMaximum(314);
        jSliderThetaMirrorSpectometer.setMinimum(-314);
        jSliderThetaMirrorSpectometer.setValue(314);
        jSliderThetaMirrorSpectometer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMirrorSpectometer(evt);
            }
        });

        javax.swing.GroupLayout jPanelMirrorSpectometerlLayout = new javax.swing.GroupLayout(jPanelMirrorSpectometer);
        jPanelMirrorSpectometer.setLayout(jPanelMirrorSpectometerlLayout);
        jPanelMirrorSpectometerlLayout.setHorizontalGroup(
                jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(5, 5, 5)
                .addComponent(lblThetaMirrorSpectometer)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblPhySpectometer)
                .addGap(18, 18, 18)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtThetaMirrorSpectometer, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtPhyMirrorSpectometer))))
                .addGap(5, 5, 5)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderPhyMirrorSpectometer, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderThetaMirrorSpectometer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(buttonMirrorSpectometerGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorSpectometerLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorSpectometerDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelMirrorSpectometerlLayout.setVerticalGroup(
                jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblPhySpectometer)
                .addComponent(txtPhyMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderPhyMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblThetaMirrorSpectometer)
                .addComponent(txtThetaMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderThetaMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonMirrorSpectometerGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorSpectometerLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorSpectometerDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));
        // END Spectremeter

        // BEGIN Fresnel
        jPanelFresnel = new javax.swing.JPanel();
        // END Fresnel


        tabbedControl.setBounds(580, 0, 665, 335);
        layoutControl.add(tabbedControl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanelPatternLayout = new javax.swing.GroupLayout(jPanelPattern);
        jPanelPattern.setLayout(jPanelPatternLayout);
        jPanelPatternLayout.setHorizontalGroup(
                jPanelPatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 560, Short.MAX_VALUE));
        jPanelPatternLayout.setVerticalGroup(
                jPanelPatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 290, Short.MAX_VALUE));
        panelPattern.setBounds(0, 0, 568, 335);
        //  BEGIN show full screen
        layoutControl.add(panelPattern, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layoutControl.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                patternFrame.show();
            }
        });
        //TODO
        layoutControl.addMouseMotionListener(behavior);
        layoutControl.addMouseListener(behavior);
        layoutControl.addMouseWheelListener(behavior);
        //  END show full screen

//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this());
//        this.setLayout(layout);
//        layout.setHorizontalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                .addContainerGap()
//                .addComponent(layoutControl, javax.swing.GroupLayout.DEFAULT_SIZE, 1271, Short.MAX_VALUE)
//                .addGap(5, 5, 5))
//        );
//        layout.setVerticalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                .addGap(5, 5, 5)
//                .addComponent(layoutControl, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(5, 5, 5))
//        );

//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
//        this.setLayout(layout);
//        layout.setHorizontalGroup(
//                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                .addContainerGap()
//                .addComponent(layoutControl, javax.swing.GroupLayout.DEFAULT_SIZE, 1265, Short.MAX_VALUE)
//                .addGap(5, 5, 5))
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                .addComponent(jTabbedPaneOptics)
//                //.addGroup(layout.createSequentialGroup()
//                //.addComponent(tabbedDesLog, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
//                //.addGap(11, 11, 11)
//                //.addComponent(tabbedDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
//                //)
//                )
//                );
//        layout.setVerticalGroup(
//                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
//                .addGap(5, 5, 5)
//                .addComponent(layoutControl, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(5, 5, 5))
//                //.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                //.addComponent(tabbedDesLog, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
//                //.addComponent(tabbedDiagram)
//                //)
//                );
        //jTextAreaDesc.setColumns(20);
        //jTextAreaDesc.setRows(5);
        //jTextAreaDesc.setFont(new Font("Courier New", Font.PLAIN, 12));
        tabbedDesLog.addTab("Description", null);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        tabbedDiagram.addTab("Diagram", null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(layoutControl, javax.swing.GroupLayout.DEFAULT_SIZE, 1265, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tabbedDesLog, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(tabbedDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(layoutControl, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(tabbedDesLog, javax.swing.GroupLayout.DEFAULT_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(tabbedDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)));

//        jTabbedPaneOptics.addChangeListener(new ChangeListener() {
//            public void stateChanged(ChangeEvent e) {
////                System.out.println("stateChanged " + jTabbedPaneOptics.getSelectedComponent());
//                OpticsPane comp = (OpticsPane)(jTabbedPaneOptics.getSelectedComponent());
//                if (comp != null) 
//                	comp.updatePatternScreen();
//            }
//        });

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    public void jMenuItemTelephotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTelephotoActionPerformed
//        changeLabTitle(labTitleTele);
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", jPanelCyllindrical1);

        tabbedDesLog.addTab("Description", desTelephotoLens);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/lens.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
        //setTabPanelEnable(jTabbedPaneOptics, true);

    }//GEN-LAST:event_jMenuItemTelephotoActionPerformed

    public void jMenuItemMicroscopeActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", jPanelMicroscope);

        tabbedDesLog.addTab("Description", desMicroscope);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Microscope");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemAberrationActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", null);

        tabbedDesLog.addTab("Description", desAberration);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Aberration");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemMichelsonActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", jPanelLensMichelson);
        jTabbedPaneOptics.addTab("Cylindrical", jPanelCyllindrical);
        jTabbedPaneOptics.addTab("Mirror", jPanelMirror);

        tabbedDesLog.addTab("Description", desMichelson);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Michelson");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemDiffractionActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Single Slit", panelSlit);
        jTabbedPaneOptics.addTab("Double Slit", panelDoubleSlit);
        tabbedDesLog.addTab("Description", desDiffaction);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Diffraction");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemSpectrometerActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Mirror", jPanelMirrorSpectometer);

        tabbedDesLog.addTab("Description", desSpectrometer);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Spectrometer");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemSignalProcessingActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Signal processing", panelSignal);
        jTabbedPaneOptics.addTab("Photo", panelSignalPhoto);

        tabbedDesLog.addTab("Description", desSignalProcessing);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of SignalProcessing");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemPhaseShiftingActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Phase retarder", panelPhase);

        tabbedDesLog.addTab("Description", desPhaseRetarder);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of haseShifting");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemTalbotImagesActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", null);

        tabbedDesLog.addTab("Description", desTalbotImage);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Talbot");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemWavefrontActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", jPanelCyllindrical1);
        jTabbedPaneOptics.addTab("Cylindrical", jPanelCyllindrical);
        jTabbedPaneOptics.addTab("Mirror", jPanelMirror);
        jTabbedPaneOptics.addTab("Fresnel Transform", jPanelFresnel);

        tabbedDesLog.addTab("Description", desWavefront);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Wavefront");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }

    public void jMenuItemWavelengthActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        tabbedDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Lens", null);

        tabbedDesLog.addTab("Description", desWavelength);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("Diagram of Wavelength");
        diagramLens.add(lblDiagram);
        tabbedDiagram.addTab("Diagram", diagramLens);
    }
    // Optical arguments, which will be parsed before reassigning the values
    private double xoffMicroscope = 0.0, yoffMicroscope = 0.0, focalMicroscope = 1.0;
    private double xoff = 0.0, yoff = 0.0, focal = 522;
    private double xoffMichelson = 0.0, yoffMichelson = 0.0, focalMichelson = 522;
    private double xoffCyllin = 150.0, yoffCyllin = 200.0, focalCyllin = 522;
    // Mirror
    private double phy = 522, theta = 522;
    // Spectrometer
    private double phySpectrometer = 522, thetaSpectrometer = 522;
    private double d_widthX = Double.valueOf(image1.getBounds().width), d_heightX = 100, d_rotation = 0, d_postionX = 0, d_grayLevel = 255, d_spacing = 400;
    // double slit
    private double d_widthX_double = Double.valueOf(image1.getBounds().width), d_heightX_double = 100, d_rotation_double = 0, d_postionX_double = 0, d_grayLevel_double = 255, d_spacing_double = 400;
    //Processing
    private double processing_widthX = Double.valueOf(image1.getBounds().width), processing_widthY = 100, processing_heightX = 100, processing_heightY = Double.valueOf(image1.getBounds().height), processing_rotation = 0, processing_positionX = 0, processing_positionY = 0, processing_grayLevel = 255;
    private double zoom = 100.0, grayLevel = 255;

    private boolean parseArguments() {
        boolean ret = false;
        try {
//	    	double xoff = Double.valueOf(textXpos.getText());
//	    	double yoff = Double.valueOf(textYpos.getText());
//	    	double focal = Double.valueOf(sliderFocal.getValue());

            //lens
            double xoff = Double.valueOf(txtXPositionLens.getText());
            double yoff = Double.valueOf(txtYPositionLens.getText());
            double focal = Double.valueOf(txtFocalLens.getText());
            // Michelson
            double xoffMi = Double.valueOf(txtXPositionLensMichelson.getText());
            double yoffMi = Double.valueOf(txtYPositionLensMichelson.getText());
            double focalMi = Double.valueOf(txtFocalLensMichelson.getText());
            //Cyllin
            double xoffCyllin = Double.valueOf(txtXPositionCyllin.getText());
            double yoffCyllin = Double.valueOf(txtYPositionCyllin.getText());
            double focalCyllin = Double.valueOf(txtFocalCyllin.getText());
            //mirro
            double phyoff = Double.valueOf(txtPhyMirror.getText());
            double thetaoff = Double.valueOf(txtThetaMirror.getText());
            //microsope
            double xoffMicroscope = Double.valueOf(txtXPositionMicroscope.getText());
            double yoffMicroscope = Double.valueOf(txtYPositionMicroscope.getText());
            double focalMicroscope = Double.valueOf(txtFocalMicroscope.getText());
            //slit
            double widthSlit = Double.valueOf(s_single_width.getValue());
            double heightSlit = Double.valueOf(s_single_height.getValue());
            double postionSlit = Double.valueOf(s_single_position.getValue());
            double rotationSlit = Double.valueOf(s_single_rotation.getValue());
            double grayLevelSlit = Double.valueOf(s_single_gray.getValue());
            double spacingSlit = Double.valueOf(s_single_spacing.getValue());
            // double
            double widthDoubleSlit = Double.valueOf(s_single_widthDoubleSlit.getValue());
            double heightDoubleSlit = Double.valueOf(s_single_heightDoubleSlit.getValue());
            double postionDoubleSlit = Double.valueOf(s_single_positionDoubleSlit.getValue());
            double rotationDoubleSlit = Double.valueOf(s_single_rotationDoubleSlit.getValue());
            double grayLevelDoubleSlit = Double.valueOf(s_single_grayDoubleSlit.getValue());
            double spacingDoubleSlit = Double.valueOf(s_single_spacingDoubleSlit.getValue());
            // Spectrometer
            double phySpec = Double.valueOf(txtPhyMirrorSpectometer.getText());
            double thetaSpec = Double.valueOf(txtThetaMirrorSpectometer.getText());

            //Processing
            processing_widthX = Double.valueOf(s_processing_width_x.getValue());
            processing_widthY = Double.valueOf(s_processing_width_y.getValue());
            processing_heightX = Double.valueOf(s_processing_height_x.getValue());
            processing_heightY = Double.valueOf(s_processing_height_y.getValue());
            processing_rotation = Double.valueOf(s_processing_rotation.getValue());
            processing_positionX = Double.valueOf(s_processing_positionx.getValue());
            processing_positionY = Double.valueOf(s_processing_pos_y.getValue());
            processing_grayLevel = Double.valueOf(s_processing_gray.getValue());
            //phase
            zoom = Double.valueOf(s_phase_zoom.getValue());
            ret = true;
            this.xoff = xoff;
            this.yoff = yoff;
            this.focal = focal;

            this.xoffMichelson = xoffMi;
            this.yoffMichelson = yoffMi;
            this.focalMichelson = focalMi;

            this.xoffMicroscope = xoffMicroscope;
            this.yoffMicroscope = yoffMicroscope;
            this.focalMicroscope = focalMicroscope;

            this.xoffCyllin = xoffCyllin;
            this.yoffCyllin = yoffCyllin;
            this.focalCyllin = focalCyllin;

            this.d_widthX = widthSlit;
            this.d_heightX = heightSlit;
            this.d_postionX = postionSlit;
            this.d_rotation = rotationSlit;
            this.d_grayLevel = grayLevelSlit;
            this.d_spacing = spacingSlit;

            this.d_widthX_double = widthDoubleSlit;
            this.d_heightX_double = heightDoubleSlit;
            this.d_postionX_double = postionDoubleSlit;
            this.d_rotation_double = rotationDoubleSlit;
            this.d_grayLevel_double = grayLevelDoubleSlit;
            this.d_spacing_double = spacingDoubleSlit;

            this.phy = phyoff;
            this.theta = thetaoff;

            this.thetaSpectrometer = thetaSpec / 100;
            this.phySpectrometer = phySpec / 100;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, warnings);
            textXpos.setText(String.valueOf(this.yoff));
            textYpos.setText(String.valueOf(this.yoff));
            textFocal.setText(String.valueOf(this.focal));
        }
        return ret;
    }
    private static BufferedImage buffImages = null;

    private void b_openFileActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnVal = openFile.showOpenDialog(this);
        if (returnVal == openFile.APPROVE_OPTION) {
            File file = openFile.getSelectedFile();
            String ext = "";
            String extension = file.getName();
            extension = extension.toLowerCase();
            System.out.println("Extenten : " + extension);
            if (extension.contains("jpg")) {
                ext = ".jpg";
            }
            if (extension.contains("png")) {
                ext = ".png";
            }
            if (extension.contains("gif")) {
                ext = ".gif";
            }
            if (extension.contains("wbmp")) {
                ext = ".wbmp";
            }
            if (extension.contains("jpeg")) {
                ext = ".jpeg";
            }
            if (extension.contains("bmp")) {
                ext = ".bmp";
            }
            if (ext.equals("")) {
                JOptionPane.showMessageDialog(null, "Formats incorrect!", "Failure", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    buffImages = ImageIO.read(new File(file.getAbsolutePath()));
                    //String ext = File.probeContentType(file.getAbsolutePath());
                    PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                    //  image.updatePhaseRetarderParameter(zoom, grayLevel);
                    image.signalPhoto(buffImages);
                    EduPatternTest.updateLensPatternPattern(image, genLogPhase());
                    imageGenerated = true;
                } catch (IOException ex) {
                    System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            }
        } else {
            System.out.println("File access cancelled by user.");
        }

    }

//    public void logString(String msg) {
//        jTextAreaLog.append(msg + System.getProperty("line.separator"));
//        jTextAreaLog.setCaretPosition(jTextAreaLog.getText().length() - 1);
//
//        // start logging if user chose to
//        if (EduPatternTest.logging == 1) {
//            try {
//                BufferedWriter logFileOut = new BufferedWriter(new FileWriter("JDCedukit_ui.log"));
//                jTextAreaLog.write(logFileOut);
//                logFileOut.flush();
//            } catch (Exception e) {
//            }
//        }
//    }
    public void setLog(String msg) {
        jTextAreaLog.append(msg + System.getProperty("line.separator"));
    }

    private String genLogLen() {
        return String.format(logmessageLen, Double.toString(xoff), Double.toString(yoff), Double.toString(focal));
    }

    private String genLogLensMichelson() {
        return String.format(logmessageLensMichelson, Double.toString(xoffMichelson), Double.toString(yoffMichelson), Double.toString(focalMichelson));
    }

    private String genLogMicroscope() {
        return String.format(logmessageMicroscope, Double.toString(focalMicroscope), Double.toString(xoffMicroscope), Double.toString(yoffMicroscope));
    }

    private String genLogCyllin() {
        return String.format(logmessageCyllin, Double.toString(focalCyllin), Double.toString(xoffCyllin), Double.toString(yoffCyllin));
    }

    private String genLogMirror() {
        return String.format(logmessageMirror, Double.toString(phy), Double.toString(theta));
    }

    private String genLogSlit() {
        return String.format(logmessageSlit, Double.toString(d_heightX), Double.toString(d_rotation), Double.toString(d_postionX), Double.toString(d_grayLevel));
    }

    private String genLogDoubleSlit() {
        return String.format(logmessageDoubleSlit, Double.toString(d_heightX_double), Double.toString(d_rotation_double), Double.toString(d_postionX_double), Double.toString(d_grayLevel_double), Double.toString(d_spacing_double));
    }

    private String genLogProcessing() {
        return String.format(logmessageProcessing, Double.toString(processing_heightX), Double.toString(processing_widthY), Double.toString(processing_rotation), Double.toString(processing_positionX), Double.toString(processing_positionY), Double.toString(processing_grayLevel));
    }

    private String genLogPhase() {
        return String.format(logmessagePhase, Double.toString(zoom));
    }

    private String genLogMirrorSpectrometer() {
        return String.format(logmessageMirrorSpectrometer, Double.toString(phySpectrometer), Double.toString(thetaSpectrometer));
    }

    // Lens
    private void buttonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            EduPatternTest.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformed

    private void buttonSecondGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            EduPatternTest.updateLensPattern(image, genLogLen());
            setLog(genLogLen());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformed

    private void sliderGenerateActionPerformed(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            EduPatternTest.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformed
    // END Lens

    // Lens Michelson
    private void buttonGenerateActionPerformedMichelSon(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMichelSon
        actionTag = "LensMichelson";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
            image.paintLensMichelson();
            EduPatternTest.updateLensPatternPattern(image, genLogLensMichelson());
            setLog(genLogLensMichelson());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMichelSon

    private void buttonSecondGenerateActionPerformedMichelSon(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedMichelSon
        actionTag = "LensMichelson";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
            image.paintLensMichelson();
            EduPatternTest.updateLensPattern(image, genLogLensMichelson());
            setLog(genLogLensMichelson());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedMichelSon

    private void sliderGenerateActionPerformedLensMichelSon(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedLensMichelSon
        actionTag = "LensMichelson";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
            image.paintLensMichelson();
            EduPatternTest.updateLensPatternPattern(image, genLogLensMichelson());
            setLog(genLogLensMichelson());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedLensMichelSon

    // Microscope
    private void buttonGenerateActionPerformedMicroscope(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMicroscope
        actionTag = "Microscope";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
            image.paintMicroscope();
            EduPatternTest.updateLensPatternPattern(image, genLogMicroscope());
            setLog(genLogMicroscope());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMicroscope

    private void buttonSecondGenerateActionPerformedMicroscope(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedMicroscope
        actionTag = "Microscope";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
            image.paintMicroscope();
            EduPatternTest.updateLensPattern(image, genLogMicroscope());
            setLog(genLogMicroscope());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedMicroscope

    private void sliderGenerateActionPerformedMicroscope(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedMicroscope
        actionTag = "Microscope";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
            image.paintMicroscope();
            EduPatternTest.updateLensPatternPattern(image, genLogMicroscope());
            setLog(genLogMicroscope());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedMicroscope

    // Cyllin
    private void buttonGenerateActionPerformedCyllin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Cyllin";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
            image.paintCylindircal();
            EduPatternTest.updateLensPatternPattern(image, genLogCyllin());
            setLog(genLogCyllin());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void buttonSecondGenerateActionPerformedCyllin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Cyllin";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
            image.paintCylindircal();
            EduPatternTest.updateLensPattern(image, genLogCyllin());
            setLog(genLogCyllin());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedCyllin(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Cyllin";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
            image.paintCylindircal();
            EduPatternTest.updateLensPatternPattern(image, genLogCyllin());
            setLog(genLogCyllin());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin

    // Mirror
    private void buttonGenerateActionPerformedMirror(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Mirror";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternTest.updateLensPatternPattern(image, genLogMirror());
            setLog(genLogMirror());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void buttonSecondGenerateActionPerformedMirror(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Mirror";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternTest.updateLensPattern(image, genLogMirror());
            setLog(genLogMirror());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedMirror(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Mirror";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternTest.updateLensPatternPattern(image, genLogMirror());
            setLog(genLogMirror());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin

    // Slit
    private void buttonGenerateActionPerformedSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Slit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(1, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
            image.slit(slit);
            EduPatternTest.updateLensPatternPattern(image, genLogSlit());
            setLog(genLogSlit());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void buttonSecondGenerateActionPerformedSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Slit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
            image.slit(slit);
            EduPatternTest.updateLensPattern(image, genLogSlit());
            setLog(genLogSlit());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedSlit(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Slit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
            image.slit(slit);
            EduPatternTest.updateLensPatternPattern(image, genLogSlit());
            setLog(genLogSlit());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin

    // doubel slit 
    private void buttonGenerateActionPerformedDoubleSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedDoubleSlit
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
            image.slit(2);
            EduPatternTest.updateLensPatternPattern(image, genLogDoubleSlit());
            setLog(genLogDoubleSlit());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedDoubleSlit

    private void buttonSecondGenerateActionPerformedDoubleSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedDoubleSlit
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
            image.slit(2);
            EduPatternTest.updateLensPattern(image, genLogDoubleSlit());
            setLog(genLogDoubleSlit());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedDoubleSlit

    private void sliderGenerateActionPerformedDoubleSlit(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedDoubleSlit
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
            image.slit(2);
            EduPatternTest.updateLensPatternPattern(image, genLogDoubleSlit());
            setLog(genLogDoubleSlit());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedDoubleSlit

//Processing
    private void buttonGenerateActionPerformedProcessing(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Processing";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
            image.signalProcessing();
            EduPatternTest.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void buttonSecondGenerateActionPerformedProcessing(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Processing";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
            image.signalProcessing();
            EduPatternTest.updateLensPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedProcessing(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Processing";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
            image.signalProcessing();
            EduPatternTest.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }
    }
    /*
     * Signal Photo
     */

    private void buttonGenerateActionPerformedProcessingPhoto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            //   image.updateParameterDrawSignalPhoto(buffImages.get);
            image.signalPhoto(buffImages);
            EduPatternTest.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }

    }

    private void buttonSecondGenerateActionPerformedProcessingPhoto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            // image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
            image.signalPhoto(buffImages);
            EduPatternTest.updateLensPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }

    private void sliderGenerateActionPerformedProcessingPhoto(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            //  image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
            image.signalPhoto(buffImages);
            EduPatternTest.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }
    }
    /*
     * Phase
     */

    private void buttonGenerateActionPerformedPhase(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Phase";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updatePhaseRetarderParameter(zoom, grayLevel);
            image.phaseRetarder();
            EduPatternTest.updateLensPatternPattern(image, genLogPhase());
            setLog(genLogPhase());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void buttonSecondGenerateActionPerformedPhase(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Phase";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updatePhaseRetarderParameter(zoom, grayLevel);
            image.phaseRetarder();
            EduPatternTest.updateLensPattern(image, genLogPhase());
            setLog(genLogPhase());
            //EduPatternTest.updateLensPatternPattern(image, genLog());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedPhase(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Phase";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updatePhaseRetarderParameter(zoom, grayLevel);
            image.phaseRetarder();
            EduPatternTest.updateLensPatternPattern(image, genLogPhase());
            setLog(genLogPhase());
            imageGenerated = true;
        }
    }

    // Mirror
    private void buttonGenerateActionPerformedMirrorSpectometer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternTest.updateLensPatternPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMirrorSpectometer

    private void buttonSecondGenerateActionPerformedMirrorSpectometer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternTest.updateLensPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedMirrorSpectometer

    private void sliderGenerateActionPerformedMirrorSpectometer(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternTest.updateLensPatternPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedMirrorSpectometer
    //End

    private void textFocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFocalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFocalActionPerformed

    private void textYposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textYposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textYposActionPerformed

    private void textXposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textXposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textXposActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel panelPattern;
    // Lens
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSlider jSliderFocalLens;
    private javax.swing.JSlider jSliderXPositionLens;
    private javax.swing.JSlider jSliderYPositionLens;
    private javax.swing.JTextField txtFocalLens;
    private javax.swing.JTextField txtXPositionLens;
    private javax.swing.JTextField txtYPositionLens;
    private javax.swing.JButton jButton11LensOn;
    private javax.swing.JButton jButtonDisplaySecondOn;
    private javax.swing.JButton jButtonLens;
    // Lens Michelson
    private javax.swing.JLabel lblFocalLensMichelson;
    private javax.swing.JLabel lblXLensMichelson;
    private javax.swing.JLabel lblYLensMichelson;
    private javax.swing.JSlider jSliderFocalLensMichelson;
    private javax.swing.JSlider jSliderXPositionLensMichelson;
    private javax.swing.JSlider jSliderYPositionLensMichelson;
    private javax.swing.JTextField txtFocalLensMichelson;
    private javax.swing.JTextField txtXPositionLensMichelson;
    private javax.swing.JTextField txtYPositionLensMichelson;
    private javax.swing.JButton jButton11LensOnMichelson;
    private javax.swing.JButton jButtonDisplaySecondOnMichelson;
    private javax.swing.JButton jButtonLensMichelson;
    private RangeSlider rangeSlider;
    public javax.swing.JSlider sliderXpos;
    private javax.swing.JSlider sliderYPos;
    private javax.swing.JSlider sliderFocal;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JButton ok;
    private javax.swing.JButton btnLensON;
    private javax.swing.JButton btnSecond;
    private javax.swing.JTextField textXpos;
    private javax.swing.JTextField textYpos;
    private javax.swing.JTextField textFocal;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // Microscope
    public javax.swing.JLabel lblFocalMicroscope;
    private javax.swing.JLabel lblXPosMicroscope;
    private javax.swing.JLabel lblYPosMicroscope;
    private javax.swing.JSlider jSliderFocalMicroscope;
    private javax.swing.JSlider jSliderXPositionMicroscope;
    private javax.swing.JSlider jSliderYPositionMicroscope;
    private javax.swing.JTextField txtFocalMicroscope;
    private javax.swing.JTextField txtXPositionMicroscope;
    private javax.swing.JTextField txtYPositionMicroscope;
    private javax.swing.JButton buttonMicroscopeLensOn;
    private javax.swing.JButton buttonMicroscopeDisplaySecondOn;
    private javax.swing.JButton buttonMicroscopeGeneral;
    // Cyllin
    public javax.swing.JLabel lblFocalCyllin;
    private javax.swing.JLabel lblXPosCyllin;
    private javax.swing.JLabel lblYPosCyllin;
    private javax.swing.JSlider jSliderFocalCyllin;
    private javax.swing.JSlider jSliderXPositionCyllin;
    private javax.swing.JSlider jSliderYPositionCyllin;
    private javax.swing.JTextField txtFocalCyllin;
    private javax.swing.JTextField txtXPositionCyllin;
    private javax.swing.JTextField txtYPositionCyllin;
    private javax.swing.JButton buttonCyllinLensOn;
    private javax.swing.JButton buttonCyllinDisplaySecondOn;
    private javax.swing.JButton buttonCyllinGeneral;
    // Mirror
    private javax.swing.JLabel lblPhy;
    private javax.swing.JLabel lblThetaMirror;
    private javax.swing.JSlider jSliderPhyMirror;
    private javax.swing.JSlider jSliderThetaMirror;
    private javax.swing.JTextField txtPhyMirror;
    private javax.swing.JTextField txtThetaMirror;
    private javax.swing.JButton buttonMirrorLensOn;
    private javax.swing.JButton buttonMirrorDisplaySecondOn;
    private javax.swing.JButton buttonMirrorGeneral;
    private javax.swing.JPanel jPanelMirror;
    // END Mirror
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanelCyllindrical;
    private javax.swing.JPanel jPanelCyllindrical1;
    private javax.swing.JPanel jPanelMicroscope;
    private javax.swing.JPanel jPanelLensMichelson;
    private javax.swing.JPanel jPanelLens;
    private javax.swing.JTabbedPane jTabbedControler;
    private javax.swing.JLayeredPane layoutControl;
    private javax.swing.JPanel panelCalebration;
    private javax.swing.JPanel panelGeneral;
    private javax.swing.JPanel panelPhase;
    private javax.swing.JPanel panelSignal;
    private javax.swing.JPanel panelSignalPhoto;
    private javax.swing.JPanel panelSlit;
    private javax.swing.JPanel panelDoubleSlit;
    private javax.swing.JTabbedPane tabbedControl;
    private javax.swing.JPanel jPanelPattern;
    private javax.swing.JLabel jLabelSelectExperiment;
    private javax.swing.JTabbedPane jTabbedPaneOptics;
    // Spectometer
    private javax.swing.JLabel lblPhySpectometer;
    private javax.swing.JLabel lblThetaMirrorSpectometer;
    private javax.swing.JSlider jSliderPhyMirrorSpectometer;
    private javax.swing.JSlider jSliderThetaMirrorSpectometer;
    private javax.swing.JTextField txtPhyMirrorSpectometer;
    private javax.swing.JTextField txtThetaMirrorSpectometer;
    private javax.swing.JButton buttonMirrorSpectometerLensOn;
    private javax.swing.JButton buttonMirrorSpectometerDisplaySecondOn;
    private javax.swing.JButton buttonMirrorSpectometerGeneral;
    private javax.swing.JPanel jPanelMirrorSpectometer;
    // Fresnel
    private javax.swing.JPanel jPanelFresnel;
    /*
     *@Param Slit
     */
    private javax.swing.JButton buttonGennerateSlit;
    private javax.swing.JButton buttonSecondDisplaySlit;
    private javax.swing.JButton buttong11LensOnSlit;
    private javax.swing.JComboBox comboBoxSlit;
    private javax.swing.JLabel jLabelSpacingSlit;
    private javax.swing.JLabel lblGraySlit;
    private javax.swing.JLabel lblHeightSlit;
    private javax.swing.JLabel lblPosSlit;
    private javax.swing.JLabel lblRotationSlit;
    private javax.swing.JLabel lblWidthSlit;
    private javax.swing.JSlider s_single_gray;
    private javax.swing.JSlider s_single_height;
    private javax.swing.JSlider s_single_position;
    private javax.swing.JSlider s_single_rotation;
    private javax.swing.JSlider s_single_spacing;
    private javax.swing.JSlider s_single_width;
    private javax.swing.JTextField text_single_gray;
    private javax.swing.JTextField text_single_height;
    private javax.swing.JTextField text_single_position;
    private javax.swing.JTextField text_single_rotation;
    private javax.swing.JTextField text_single_spacing;
    private javax.swing.JTextField text_single_width;
    private int slit = 1;
    // double slit
    private javax.swing.JButton buttonGennerateDoubleSlit;
    private javax.swing.JButton buttonSecondDisplayDoubleSlit;
    private javax.swing.JButton buttong11LensOnDoubleSlit;
    private javax.swing.JLabel jLabelSpacingDoubleSlit;
    private javax.swing.JLabel lblGrayDoubleSlit;
    private javax.swing.JLabel lblHeightDoubleSlit;
    private javax.swing.JLabel lblPosDoubleSlit;
    private javax.swing.JLabel lblRotationDoubleSlit;
    private javax.swing.JLabel lblWidthDoubleSlit;
    private javax.swing.JSlider s_single_grayDoubleSlit;
    private javax.swing.JSlider s_single_heightDoubleSlit;
    private javax.swing.JSlider s_single_positionDoubleSlit;
    private javax.swing.JSlider s_single_rotationDoubleSlit;
    private javax.swing.JSlider s_single_spacingDoubleSlit;
    private javax.swing.JSlider s_single_widthDoubleSlit;
    private javax.swing.JTextField text_single_grayDoubleSlit;
    private javax.swing.JTextField text_single_heightDoubleSlit;
    private javax.swing.JTextField text_single_positionDoubleSlit;
    private javax.swing.JTextField text_single_rotationDoubleSlit;
    private javax.swing.JTextField text_single_spacingDoubleSlit;
    private javax.swing.JTextField text_single_widthDoubleSlit;
    /*
     *@Param SignalProcessing 
     */
    private javax.swing.JButton button11LensOnProcessing;
    private javax.swing.JButton buttonGennerateProcessing;
    private javax.swing.JButton buttonSecondDisplayProcessing;
    private javax.swing.JLabel jLabelGrayProcessing;
    private javax.swing.JLabel lblHeightY;
    private javax.swing.JLabel lblHeightX;
    private javax.swing.JLabel lblPosX;
    private javax.swing.JLabel lblPosY;
    private javax.swing.JLabel lblRotationProcessing;
    private javax.swing.JLabel lblWidthY;
    private javax.swing.JLabel lblWidthX;
    private javax.swing.JSlider s_processing_gray;
    private javax.swing.JSlider s_processing_height_x;
    private javax.swing.JSlider s_processing_height_y;
    private javax.swing.JSlider s_processing_pos_y;
    private javax.swing.JSlider s_processing_positionx;
    private javax.swing.JSlider s_processing_rotation;
    private javax.swing.JSlider s_processing_width_x;
    private javax.swing.JSlider s_processing_width_y;
    private javax.swing.JTextField text_height_processing_x;
    private javax.swing.JTextField text_height_processing_y;
    private javax.swing.JTextField text_position_processing_x;
    private javax.swing.JTextField text_position_processing_y;
    private javax.swing.JTextField text_processing_gray;
    private javax.swing.JTextField text_rotation_processing;
    private javax.swing.JTextField text_width_processing_x;
    private javax.swing.JTextField text_width_processing_y;
    /*
     * Photo
     */
    private javax.swing.JButton button11LensOnPhoto;
    private javax.swing.JButton buttonGeneralPhoto;
    private javax.swing.JButton buttonSecondPhoto;
    private javax.swing.JLabel lblPleaseSelectPhoto;
    /*
     *@Param Phase retarder
     */
    private javax.swing.JButton button11LensOnPhase;
    private javax.swing.JButton buttonGeneralPhase;
    private javax.swing.JButton buttonOpenFile;
    private javax.swing.JButton buttonSecondPhase;
    private javax.swing.JLabel lblPleaseSelect;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JSlider s_phase_zoom;
    private javax.swing.JTextField txtZoom;
    private javax.swing.JFileChooser openFile;
    //
    private javax.swing.JTabbedPane tabbedDesLog;
    private javax.swing.JTabbedPane tabbedDiagram;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextArea jTextAreaDesc;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel diagramLens;
    private javax.swing.JLabel lblDiagram;
    private String actionTag = "Len";
    // Description
    private javax.swing.JLabel desTelephotoLens =
            new JLabel("<html><b>Description of Telephoto lens</b><br></html>");
    private javax.swing.JLabel desMicroscope =
            new JLabel("<html><b>Description of Microscope</b><br></html>");
    private javax.swing.JLabel desAberration =
            new JLabel("<html><b>Description of Aberration</b><br></html>");
    private javax.swing.JLabel desMichelson =
            new JLabel("<html><b>Description of Michelson</b><br></html>");
    private javax.swing.JLabel desDiffaction =
            new JLabel("<html><b>Description of Diffaction</b><br></html>");
    private javax.swing.JLabel desSpectrometer =
            new JLabel("<html><b>Description of Spectrometer</b><br></html>");
    private javax.swing.JLabel desSignalProcessing =
            new JLabel("<html><b>Description of Signal processing</b><br></html>");
    private javax.swing.JLabel desPhaseRetarder =
            new JLabel("<html><b>Description of Phase retarder</b><br></html>");
    private javax.swing.JLabel desTalbotImage =
            new JLabel("<html><b>Description of Talbot image</b><br></html>");
    private javax.swing.JLabel desWavefront =
            new JLabel("<html><b>Description of Wavefront</b><br></html>");
    private javax.swing.JLabel desWavelength =
            new JLabel("<html><b>Description of Wavelength</b><br></html>");

    //End 
    @Override
    void updatePatternScreen() {
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        if (!imageGenerated) {
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            imageGenerated = true;
        }
        EduPatternTest.updatePatternScreen(image, "");
    }
    // paint boot screen, lens only

    void bootScreen() {
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        double xoff = 0.0;
        double yoff = 0.0;
        double focal = 522;
        image.updateLensParameter(xoff, yoff, focal);
        image.paintLens();
    }

    void updateRegenerate() {
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        if (imageGenerated) {
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
        }
    }
    static String logmessageLen = "Len : focal=%s posX=%s posY=%s";
    static String logmessageLensMichelson = "Lens Michelson : focal=%s posX=%s posY=%s";
    static String logmessageMicroscope = "Microscope : focal=%s posX=%s posY=%s";
    static String logmessageCyllin = "Cyllin : focal=%s posX=%s posY=%s";
    static String logmessageMirror = "Mirror : Phy=%s Theta=%s";
    static String logmessageSlit = "Slit: w=%s r=%s p=%s g=%s";
    static String logmessageDoubleSlit = "Double Slit: w=%s r=%s p=%s g=%s s=%s";
    static String logmessageProcessing = "Signal processing: w_x=%s w_y=%s r=%s p_x=%s p_y=%s g=%s";
    static String logmessagePhase = "Phase retarder: gray=%s";
    static String logmessageMirrorSpectrometer = "Mirror Spectrometer : Phy=%s Theta=%s";
    /*
     * Auto Zoom LayOut 
     */

    private class MouseBehavior extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            startPoint = e.getPoint();
            rectLocale = new Point();
            rectSize = new Dimension();
            capture = null;
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            Point currentPoint = e.getPoint();
            rectSize.width = Math.abs(currentPoint.x - startPoint.x);
            rectSize.height = Math.abs(currentPoint.y - startPoint.y);
            if (e.isShiftDown()) {
                rectSize.width = rectSize.height = Math.min(
                        rectSize.width, rectSize.height);
                int dx = startPoint.x - rectSize.width;
                int dy = startPoint.y - rectSize.height;
                rectLocale.x = startPoint.x < currentPoint.x ? startPoint.x
                        : Math.max(dx, dy);
                rectLocale.y = startPoint.y < currentPoint.y ? startPoint.y
                        : Math.min(dx, dy);
            } else {
                rectLocale.x = Math.min(currentPoint.x, startPoint.x);
                rectLocale.y = Math.min(currentPoint.y, startPoint.y);
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            raw = image.canvas;
            if (rectSize.width <= 0 || rectSize.height <= 0) {
                capture = null;
            } else {
                capture = raw.getSubimage(Math.max(0, rectLocale.x),
                        Math.max(0, rectLocale.y), rectSize.width, rectSize.height);
            }
            if (capture != null) {
                image.updateZoomparten(startPoint, rectLocale, rectSize, 1);
            } else {
                image.updateZoomparten(startPoint, rectLocale, rectSize, 0);
            }
            if (actionTag.equalsIgnoreCase("Len")) {
                image.updateLensParameter(xoff, yoff, focal);
                image.paintLens();
                EduPatternTest.updateLensPatternPattern(image, genLogLen());
                imageGenerated = true;
            } else if (actionTag.equalsIgnoreCase("Microscope")) {
                image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
                image.paintMicroscope();
                EduPatternTest.updateLensPatternPattern(image, genLogMicroscope());
                imageGenerated = true;
            } else if (actionTag.equalsIgnoreCase("Cyllin")) {
                image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
                image.paintCylindircal();
                EduPatternTest.updateLensPatternPattern(image, genLogCyllin());
                imageGenerated = true;
            } else if (actionTag.equalsIgnoreCase("Mirror")) {
                image.updateMirrorParameter(phy, theta);
                image.paintMirror();
                EduPatternTest.updateLensPatternPattern(image, genLogMirror());
                imageGenerated = true;
            } else if (actionTag.equalsIgnoreCase("Slit")) {
                image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
                image.slit(slit);
                EduPatternTest.updateLensPatternPattern(image, genLogSlit());
                imageGenerated = true;
            } else if (actionTag.equalsIgnoreCase("DoubleSlit")) {
                image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
                image.slit(2);
                EduPatternTest.updateLensPatternPattern(image, genLogDoubleSlit());
                imageGenerated = true;
            } else if (actionTag.equalsIgnoreCase("Processing")) {
                image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
                image.signalProcessing();
                EduPatternTest.updateLensPattern(image, genLogProcessing());
            } else if (actionTag.equalsIgnoreCase("ProcessingPhoto")) {
                //image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
                image.signalPhoto(buffImages);
                EduPatternTest.updateLensPattern(image, genLogProcessing());
            } else if (actionTag.equalsIgnoreCase("Phase")) {
                image.updatePhaseRetarderParameter(zoom, grayLevel);
                image.phaseRetarder();
                EduPatternTest.updateLensPattern(image, genLogPhase());
            }
        }

        @Override
        public void mouseWheelMoved(MouseWheelEvent e) {
            zoom_layOut = Math.min(2000, Math.max(0, zoom_layOut + e.getUnitsToScroll() * 10));
        }
    }
}
