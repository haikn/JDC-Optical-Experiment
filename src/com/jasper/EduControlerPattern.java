/*
 * @(#)EduControlerPattern.java
 *
 * Copyright (c) 2013 JASPER DISPLAY, Inc.
 * An Unpublished Work.  All Rights Reserved.
 *
 * JASPER DISPLAY PROPRIETARY:  Distribution of this source code
 * without permission from the copyright holder is strictly forbidden.
 */
package com.jasper;

import static com.jasper.EduPatternShowOn.patternFrame;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.DecimalFormat;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author sonnv
 */
public class EduControlerPattern extends OpticsPane {

    PatternImage image1 = new PatternImage();

    public EduControlerPattern() {
        initComponents();
        image1 = ((EduPatternJPanel) panelPattern).pimage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        tabbedDesLog = new javax.swing.JTabbedPane();
        tabbedDiagram = new javax.swing.JPanel();
        jTextAreaLog = new javax.swing.JTextArea();
        jTextAreaDesc = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollDes = new javax.swing.JScrollPane();
        diagramLensFull = new javax.swing.JPanel();
        diagramLens = new javax.swing.JPanel();
        lblDiagram = new javax.swing.JLabel();
        lblDiagramFull = new javax.swing.JLabel();

        panelPattern = new EduPatternJPanel();
        jTabbedPaneOptics = new javax.swing.JTabbedPane();
        textFocal = new javax.swing.JTextField();
        textYpos = new javax.swing.JTextField();
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        textFocal = new javax.swing.JTextField();
        sliderFocal = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        textXpos = new javax.swing.JTextField();
        sliderXpos = new javax.swing.JSlider();
        textYpos = new javax.swing.JTextField();
        sliderYPos = new javax.swing.JSlider();
        ok = new javax.swing.JButton();
        btnLensON = new javax.swing.JButton();
        btnSecond = new javax.swing.JButton();

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderFocal, org.jdesktop.beansbinding.ELProperty.create("${value}"), textFocal, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        layoutControl = new javax.swing.JLayeredPane();
        layoutDiagram = new javax.swing.JPanel();
        layoutDiagramFull = new javax.swing.JPanel();
        tabbedControl = new javax.swing.JTabbedPane();
        panelGeneral = new javax.swing.JPanel();
        jLabelSelectExperiment = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTabbedControler = new javax.swing.JTabbedPane();
        jPanelLens = new javax.swing.JPanel();
        jPanelCyllindrical1 = new javax.swing.JPanel();
        jPanelMicroscope = new javax.swing.JPanel();
        jPanelNoSelect = new javax.swing.JPanel();
        // Lens
        jLabel3 = new javax.swing.JLabel();
        //jSliderFocalLens = new javax.swing.JSlider();
        txtFocalLens = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtXPositionLens = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtYPositionLens = new javax.swing.JTextField();
        jButtonLens = new javax.swing.JButton();
        jButton11LensOn = new javax.swing.JButton();
        jButtonDisplaySecondOn = new javax.swing.JButton();
        // Lens Michelson
        lblFocalLensMichelson = new javax.swing.JLabel();
        jSliderFocalLensMichelson = new javax.swing.JSlider();
        txtFocalLensMichelson = new javax.swing.JTextField();
        lblXLensMichelson = new javax.swing.JLabel();
        txtXPositionLensMichelson = new javax.swing.JTextField();
        //jSliderXPositionLensMichelson = new javax.swing.JSlider();
        lblYLensMichelson = new javax.swing.JLabel();
        txtYPositionLensMichelson = new javax.swing.JTextField();
        //jSliderYPositionLensMichelson = new javax.swing.JSlider();
        jButtonLensMichelson = new javax.swing.JButton();
        jButton11LensOnMichelson = new javax.swing.JButton();
        jButtonDisplaySecondOnMichelson = new javax.swing.JButton();
        rangeSlider = new RangeSlider();
        // END Lens Michelson

        jPanelCyllindrical = new javax.swing.JPanel();
        jPanelLensMichelson = new javax.swing.JPanel();
        jPanelMirror = new javax.swing.JPanel();
        panelCalebration = new javax.swing.JPanel();
        panelSlit = new javax.swing.JPanel();
        panelDoubleSlit = new javax.swing.JPanel();
        panelSignal = new javax.swing.JPanel();
        panelSignalPhoto = new javax.swing.JPanel();
        panelPhase = new javax.swing.JPanel();
        jPanelPattern = new javax.swing.JPanel();

        // Microscope
        lblFocalMicroscope = new javax.swing.JLabel();
        lblXPosMicroscope = new javax.swing.JLabel();
        lblYPosMicroscope = new javax.swing.JLabel();
        jSliderFocalMicroscope = new javax.swing.JSlider();
        jSliderXPositionMicroscope = new javax.swing.JSlider();
        jSliderYPositionMicroscope = new javax.swing.JSlider();
        txtFocalMicroscope = new javax.swing.JTextField();
        txtXPositionMicroscope = new javax.swing.JTextField();
        txtYPositionMicroscope = new javax.swing.JTextField();
        buttonMicroscopeLensOn = new javax.swing.JButton();
        buttonMicroscopeDisplaySecondOn = new javax.swing.JButton();
        buttonMicroscopeGeneral = new javax.swing.JButton();

        // Cyllin
        lblFocalCyllin = new javax.swing.JLabel();
        lblXPosCyllin = new javax.swing.JLabel();
        lblYPosCyllin = new javax.swing.JLabel();
        jSliderFocalCyllin = new javax.swing.JSlider();
        jSliderXPositionCyllin = new javax.swing.JSlider();
        jSliderYPositionCyllin = new javax.swing.JSlider();
        txtFocalCyllin = new javax.swing.JTextField();
        txtXPositionCyllin = new javax.swing.JTextField();
        txtYPositionCyllin = new javax.swing.JTextField();
        buttonCyllinLensOn = new javax.swing.JButton();
        buttonCyllinDisplaySecondOn = new javax.swing.JButton();
        buttonCyllinGeneral = new javax.swing.JButton();

        // Mirror
        lblPhy = new javax.swing.JLabel();
        lblThetaMirror = new javax.swing.JLabel();
        txtPhyMirror = new javax.swing.JTextField();
        txtThetaMirror = new javax.swing.JTextField();
        buttonMirrorLensOn = new javax.swing.JButton();
        buttonMirrorDisplaySecondOn = new javax.swing.JButton();
        buttonMirrorGeneral = new javax.swing.JButton();

        tabbedControl.setAlignmentX(100);

        jLabelSelectExperiment.setText("Select Experiment");
        jLabelSelectExperiment.setForeground(Color.red);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"      ------ Select experiment ---...", "1. SLM Basic Property Test", "2. Amplitude Modulation (Projection System)", "3. Phase Modulation",
                        "4. Michelson Interferometer", "5. Diffraction and Interference", "6. Spectrometer",
                        "7. Signal Processing (4-f system)", "8. Phase Shifting Digital Holography", "9. Talbot Images", "10. Wavefront Modulation"}));
                    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            JComboBox comboBox = (JComboBox) evt.getSource();

                            Object selected = comboBox.getSelectedItem();
                            if (selected.equals("      ------ Select experiment ---...")) {
                                jMenuItemNoSelectActionPerformed(evt);
                                tmpSelected = 0;
                            } else if (selected.equals("1. SLM Basic Property Test")) {
                                jMenuItemTelephotoActionPerformed(evt);
                                tmpSelected = 1;
                            } else if (selected.equals("2. Amplitude Modulation (Projection System)")) {
                                jMenuItemMicroscopeActionPerformed(evt);
                                tmpSelected = 2;
                            } else if (selected.equals("3. Phase Modulation")) {
                                jMenuItemAberrationActionPerformed(evt);
                                tmpSelected = 3;
                            } else if (selected.equals("4. Michelson Interferometer")) {
                                jMenuItemMichelsonActionPerformed(evt);
                                tmpSelected = 4;
                            } else if (selected.equals("5. Diffraction and Interference")) {
                                jMenuItemDiffractionActionPerformed(evt);
                                tmpSelected = 5;
                            } else if (selected.equals("6. Spectrometer")) {
                                jMenuItemSpectrometerActionPerformed(evt);
                                tmpSelected = 6;
                            } else if (selected.equals("7. Signal Processing (4-f system)")) {
                                jMenuItemSignalProcessingActionPerformed(evt);
                                tmpSelected = 7;
                            } else if (selected.equals("8. Phase Shifting Digital Holography")) {
                                jMenuItemPhaseShiftingActionPerformed(evt);
                                tmpSelected = 8;
                            } else if (selected.equals("9. Talbot Images")) {
                                jMenuItemTalbotImagesActionPerformed(evt);
                                tmpSelected = 9;
                            } else if (selected.equals("10. Wavefront Modulation")) {
                                jMenuItemWavefrontActionPerformed(evt);
                                tmpSelected = 10;
                            } else if (selected.equals("11. Wavelength Selective Switch")) {
                                jMenuItemWavelengthActionPerformed(evt);
                                tmpSelected = 11;
                            }
                        }
        });

        jLabel3.setText("Focal length (cm)");
        jLabel4.setText("X Position (mm)");
        jLabel2.setText("Y Position (mm)");

        jButtonLens.setText("Generate");
        jButtonLens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformed(evt);
            }
        });
        jButton11LensOn.setEnabled(false);
        jButton11LensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnActionPerformed(evt);
                countLenOnTelephoto++;
                if (countLenOnTelephoto % 2 == 0) {
                    jButton11LensOn.setText("1:1 lens OFF");
                } else {
                    jButton11LensOn.setText("1:1 lens ON");
                }
            }
        });
        jButton11LensOn.setText("1:1 lens ON");

        jButtonDisplaySecondOn.setEnabled(false);
        jButtonDisplaySecondOn.setText("Second display ON");
        jButtonDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformed(evt);
                countSecondDisplayTelephoto++;
                if (countSecondDisplayTelephoto % 2 == 0) {
                    jButtonDisplaySecondOn.setText("Second display OFF");
                } else {
                    jButtonDisplaySecondOn.setText("Second display ON");
                }
            }
        });

        jSliderXPositionLens = new DoubleJSlider(-60, 60, 1, 10);
        jSliderXPositionLens.setValue(0);
        txtXPositionLens.setText(String.valueOf(jSliderXPositionLens.getValue()));

        jSliderXPositionLens.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtXPositionLens.setText(df.format(jSliderXPositionLens.getScaledValue()));
                sliderGenerateActionPerformed(evt);
            }
        });
        jSliderYPositionLens = new DoubleJSlider(-30, 30, 1, 10);
        jSliderYPositionLens.setValue(0);
        txtYPositionLens.setText(String.valueOf(jSliderYPositionLens.getValue()));

        jSliderYPositionLens.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtYPositionLens.setText(df.format(jSliderYPositionLens.getScaledValue()));
                sliderGenerateActionPerformed(evt);
            }
        });

        jSliderFocalLens = new DoubleJSlider(-1000, 1000, 1000, 1);
        jSliderFocalLens.setValue(522);
        txtFocalLens.setText(String.valueOf(jSliderFocalLens.getValue()));

        jSliderFocalLens.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtFocalLens.setText(df.format(jSliderFocalLens.getScaledValue()));
                String tmp = txtFocalLens.getText();
                int value = Integer.parseInt(tmp);
                if (value >= -30 && value <= 30) {
                    jLabel3.setForeground(Color.red);
                } else {
                    jLabel3.setForeground(Color.BLACK);
                }
                sliderGenerateActionPerformed(evt);
            }
        });
   
        javax.swing.GroupLayout jPanelCyllindrical1Layout = new javax.swing.GroupLayout(jPanelCyllindrical1);
        jPanelCyllindrical1.setLayout(jPanelCyllindrical1Layout);
        jPanelCyllindrical1Layout.setHorizontalGroup(
                jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionLens)
                .addComponent(txtFocalLens, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionLens))))
                .addGap(5, 5, 5)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalLens, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addComponent(jSliderXPositionLens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionLens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButtonLens, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton11LensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                //.addContainerGap(23, Short.MAX_VALUE)
                ));
        jPanelCyllindrical1Layout.setVerticalGroup(
                jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalLens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(txtXPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(txtYPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionLens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addGroup(jPanelCyllindrical1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(jButtonDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton11LensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonLens, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                ));

        jTabbedControler.addTab("Lens", jPanelLens);
        // END Telephone lens

        // Microscope
        lblFocalMicroscope.setText("Focal length (cm)");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderFocalMicroscope, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalMicroscope, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblXPosMicroscope.setText("X Position (mm)");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderXPositionMicroscope, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtXPositionMicroscope, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblYPosMicroscope.setText("Y Position (mm)");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderYPositionMicroscope, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtYPositionMicroscope, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonMicroscopeGeneral.setText("Generate");
        buttonMicroscopeGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMicroscope(evt);
            }
        });

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeLensOn.setText("1:1 lens ON");
        buttonMicroscopeLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnMicroscopeActionPerformed(evt);
                countLenOnMicroscope++;
                if (countLenOnMicroscope % 2 == 0) {
                    buttonMicroscopeLensOn.setText("1:1 lens OFF");
                } else {
                    buttonMicroscopeLensOn.setText("1:1 lens ON");
                }
            }
        });

        buttonMicroscopeDisplaySecondOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setText("Second display ON");
        buttonMicroscopeDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMicroscope(evt);
                countSecondDisplayMicroscope++;
                if (countSecondDisplayMicroscope % 2 == 0) {
                    buttonMicroscopeDisplaySecondOn.setText("Second display OFF");
                } else {
                    buttonMicroscopeDisplaySecondOn.setText("Second display ON");
                }
            }
        });

        jSliderFocalMicroscope.setMaximum(100);
        jSliderFocalMicroscope.setMinimum(-100);
        jSliderFocalMicroscope.setValue(10);
        jSliderFocalMicroscope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        jSliderXPositionMicroscope.setMaximum(100);
        jSliderXPositionMicroscope.setMinimum(-100);
        jSliderXPositionMicroscope.setValue(0);
        jSliderXPositionMicroscope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        jSliderYPositionMicroscope.setMaximum(100);
        jSliderYPositionMicroscope.setMinimum(-100);
        jSliderYPositionMicroscope.setValue(0);
        jSliderYPositionMicroscope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedMicroscope(evt);
            }
        });

        javax.swing.GroupLayout jPanelMicroscopeLayout = new javax.swing.GroupLayout(jPanelMicroscope);
        jPanelMicroscope.setLayout(jPanelMicroscopeLayout);
        jPanelMicroscopeLayout.setHorizontalGroup(
                jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblFocalMicroscope)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(lblXPosMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblYPosMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionMicroscope)
                .addComponent(txtFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionMicroscope))))
                .addGap(5, 5, 5)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addComponent(jSliderXPositionMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(buttonMicroscopeGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMicroscopeLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMicroscopeDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelMicroscopeLayout.setVerticalGroup(
                jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFocalMicroscope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblXPosMicroscope)
                .addComponent(txtXPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblYPosMicroscope)
                .addComponent(txtYPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionMicroscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanelMicroscopeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonMicroscopeGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMicroscopeLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMicroscopeDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE)));

        jTabbedControler.addTab("Lens", jPanelMicroscope);
        // END Microscope

        // BEGIN Panel Cyllindrical

        lblFocalCyllin.setText("Focal length (cm)");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderFocalCyllin, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalCyllin, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblXPosCyllin.setText("Position");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderXPositionCyllin, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtXPositionCyllin, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblYPosCyllin.setText("Rotation (cm)");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderYPositionCyllin, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtYPositionCyllin, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        buttonCyllinGeneral.setText("Generate");
        buttonCyllinGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedCyllin(evt);
            }
        });

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinLensOn.setText("1:1 lens ON");
        buttonCyllinLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnCyllinActionPerformed(evt);
                countLenOnCyllin++;
                if (countLenOnCyllin % 2 == 0) {
                    buttonCyllinLensOn.setText("1:1 lens OFF");
                } else {
                    buttonCyllinLensOn.setText("1:1 lens ON");
                }
            }
        });

        buttonCyllinDisplaySecondOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setText("Second display ON");
        buttonCyllinDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedCyllin(evt);
                countSecondDisplayCyllin++;
                if (countSecondDisplayCyllin % 2 == 0) {
                    buttonCyllinDisplaySecondOn.setText("Second display OFF");
                } else {
                    buttonCyllinDisplaySecondOn.setText("Second display ON");
                }
            }
        });

        jSliderFocalCyllin.setMaximum(100);
        jSliderFocalCyllin.setMinimum(-100);
        jSliderFocalCyllin.setValue(1);
        jSliderFocalCyllin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedCyllin(evt);
            }
        });

        jSliderXPositionCyllin.setMaximum(1000);
        jSliderXPositionCyllin.setMinimum(-1000);
        jSliderXPositionCyllin.setValue(0);
        jSliderXPositionCyllin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedCyllin(evt);
            }
        });

        jSliderYPositionCyllin.setMaximum(180);
        jSliderYPositionCyllin.setMinimum(-180);
        jSliderYPositionCyllin.setValue(0);
        jSliderYPositionCyllin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedCyllin(evt);
            }
        });

        javax.swing.GroupLayout jPanelCyllindricalLayout = new javax.swing.GroupLayout(jPanelCyllindrical);
        jPanelCyllindrical.setLayout(jPanelCyllindricalLayout);
        jPanelCyllindricalLayout.setHorizontalGroup(
                jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblFocalCyllin)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                //.addComponent(lblXPosCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblYPosCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(45, 45, 45)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                //.addComponent(txtXPositionCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                )))
                .addGap(5, 5, 5)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                //.addComponent(jSliderXPositionCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addComponent(jSliderYPositionCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)))
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(buttonCyllinGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonCyllinLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonCyllinDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                //.addContainerGap(23, Short.MAX_VALUE)
                ));
        jPanelCyllindricalLayout.setVerticalGroup(
                jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelCyllindricalLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFocalCyllin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
//                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(lblXPosCyllin)
//                .addComponent(txtXPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addComponent(jSliderXPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(15, 15, 15)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblYPosCyllin)
                .addComponent(txtYPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionCyllin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(133, 133, 133)
                .addGroup(jPanelCyllindricalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonCyllinGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonCyllinLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonCyllinDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                ));

        jTabbedControler.addTab("Cyllindrical", jPanelCyllindrical);
        // END Panel Cyllindrical

        // BEGIN Mirror
        lblPhy.setText("Phy");
        lblThetaMirror.setText("Theta");

        buttonMirrorGeneral.setText("Generate");
        buttonMirrorGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMirror(evt);
            }
        });

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorLensOn.setText("1:1 lens ON");
        buttonMirrorLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnMirrorActionPerformed(evt);
                countLenOnMirror++;
                if (countLenOnMirror % 2 == 0) {
                    buttonMirrorLensOn.setText("1:1 lens OFF");
                } else {
                    buttonMirrorLensOn.setText("1:1 lens ON");
                }
            }
        });

        buttonMirrorDisplaySecondOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setText("Second display ON");
        buttonMirrorDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMirror(evt);
                countSecondDisplayMirror++;
                if (countSecondDisplayMirror % 2 == 0) {
                    buttonMirrorDisplaySecondOn.setText("Second display OFF");
                } else {
                    buttonMirrorDisplaySecondOn.setText("Second display ON");
                }
            }
        });

        jSliderPhyMirror = new DoubleJSlider(-28, 28, 10, 10);
        jSliderPhyMirror.setValue(1);
        txtPhyMirror.setText(String.valueOf(jSliderPhyMirror.getValue()));

        jSliderPhyMirror.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtPhyMirror.setText(df.format(jSliderPhyMirror.getScaledValue()));
                sliderGenerateActionPerformedMirror(evt);
            }
        });
        
        txtPhyMirror.addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent ke) {
                keyEventGenerateActionPerformedMirror(ke);
            }
        });
        
        txtThetaMirror.addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent ke) {
                keyEventGenerateActionPerformedMirror(ke);
            }
        });

        jSliderThetaMirror = new DoubleJSlider(-1800, 1800, 100, 10);
        jSliderThetaMirror.setValue(1);
        txtThetaMirror.setText(String.valueOf(jSliderThetaMirror.getValue()));

        jSliderThetaMirror.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtThetaMirror.setText(df.format(jSliderThetaMirror.getScaledValue()));
                sliderGenerateActionPerformedMirror(evt);
            }
        });

        javax.swing.GroupLayout jPanelMirrorlLayout = new javax.swing.GroupLayout(jPanelMirror);
        jPanelMirror.setLayout(jPanelMirrorlLayout);
        jPanelMirrorlLayout.setHorizontalGroup(
                jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblThetaMirror)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addComponent(lblPhy, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtThetaMirror, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtPhyMirror))))
                .addGap(5, 5, 5)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderPhyMirror, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderThetaMirror, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(buttonMirrorGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelMirrorlLayout.setVerticalGroup(
                jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblPhy)
                .addComponent(txtPhyMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderPhyMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblThetaMirror)
                .addComponent(txtThetaMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderThetaMirror, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(139, 139, 139)
                .addGroup(jPanelMirrorlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonMirrorGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                ));

        jTabbedControler.addTab("Mirror", jPanelMirror);

        javax.swing.GroupLayout panelGeneralLayout = new javax.swing.GroupLayout(panelGeneral);
        panelGeneral.setLayout(panelGeneralLayout);
        panelGeneralLayout.setHorizontalGroup(
                panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGeneralLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabelSelectExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(5, 5, 5)
                .addComponent(jTabbedPaneOptics)
                .addGap(5, 5, 5)));
        panelGeneralLayout.setVerticalGroup(
                panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(5, 5, 5)
                .addGroup(panelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelSelectExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jTabbedPaneOptics)
                .addGap(5, 5, 5)
                .addContainerGap()));

        tabbedControl.addTab("General", panelGeneral);

//        javax.swing.GroupLayout panelCalebrationLayout = new javax.swing.GroupLayout(panelCalebration);
//        panelCalebration.setLayout(panelCalebrationLayout);
//        panelCalebrationLayout.setHorizontalGroup(
//                panelCalebrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGap(0, 665, Short.MAX_VALUE));
//        panelCalebrationLayout.setVerticalGroup(
//                panelCalebrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGap(0, 272, Short.MAX_VALUE));
        
        // Calibration
        openFile = new javax.swing.JFileChooser();
        buttonOpenFileCalibration = new javax.swing.JButton();
        buttonCalibrationGeneral = new javax.swing.JButton();
        buttonCalibrationLensOn = new javax.swing.JButton();
        buttonCalibrationDisplaySecondOn = new javax.swing.JButton();
        lblPleaseSelectCalibration = new javax.swing.JLabel();
        
        buttonCalibrationGeneral.setText("Generate");
        buttonCalibrationGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesCalibration != null) {
                    buttonGenerateActionPerformedCalibration(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        buttonCalibrationLensOn.setEnabled(false);
        buttonCalibrationLensOn.setText("1:1 lens ON");
        buttonCalibrationLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesCalibration != null) {
                    button11LensOnCalibrationActionPerformed(evt);
                    countLenOnCalibration++;
                    if (countLenOnCalibration % 2 == 0) {
                        buttonCalibrationLensOn.setText("1:1 lens OFF");
                    } else {
                        buttonCalibrationLensOn.setText("1:1 lens ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        buttonCalibrationDisplaySecondOn.setEnabled(false);
        buttonCalibrationDisplaySecondOn.setText("Second display ON");
        buttonCalibrationDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesCalibration != null) {
                    buttonSecondGenerateActionPerformedCalibration(evt);
                    countSecondDisplayCalibration++;
                    if (countSecondDisplayCalibration % 2 == 0) {
                        buttonCalibrationDisplaySecondOn.setText("Second display OFF");
                    } else {
                        buttonCalibrationDisplaySecondOn.setText("Second display ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        buttonOpenFileCalibration.setText("Browse...");
        buttonOpenFileCalibration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformedCalibration(evt);
            }
        });
        lblPleaseSelectCalibration.setText("Select the file to import.");
        
        javax.swing.GroupLayout fineTuningLayout = new javax.swing.GroupLayout(panelCalebration);
        panelCalebration.setLayout(fineTuningLayout);
        fineTuningLayout.setHorizontalGroup(
            fineTuningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fineTuningLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(fineTuningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonCalibrationGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOpenFileCalibration, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGroup(fineTuningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fineTuningLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblPleaseSelectCalibration, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fineTuningLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(buttonCalibrationLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonCalibrationDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        fineTuningLayout.setVerticalGroup(
            fineTuningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fineTuningLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(fineTuningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOpenFileCalibration, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPleaseSelectCalibration))
                .addGap(214, 214, 214)
                .addGroup(fineTuningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCalibrationGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCalibrationLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCalibrationDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        tabbedControl.addTab("Fine tuning", panelCalebration);
        tabbedControl.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                JTabbedPane sourceTabbedPane = (JTabbedPane) e.getSource();
                int index = sourceTabbedPane.getSelectedIndex();
                if (index == 1) {
                    layoutDiagram.removeAll();
                    diagramLens.removeAll();
                    tabbedDesLog.removeAll();
                    
                    tabbedDesLog.addTab("Description", desCalibration);
                    jTextAreaLog.setColumns(20);
                    jTextAreaLog.setRows(5);
                    jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                    jScrollPane2.setViewportView(jTextAreaLog);
                    tabbedDesLog.addTab("Log", jScrollPane2);

                    lblDiagram.setIcon(null);
                    lblDiagram.setText(null);
                    diagramLens.add(lblDiagram);
                    layoutDiagram.add(diagramLens);
                }
                if (index == 0) {
                    
//                    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"      ------ Select experiment ------", "1.SLM Basic Property Test", "2. Amplitude Modulation (Projection System)", "3. Phase Modulation",
//                        "4. Michelson Interferometer", "5. Diffraction and Interference", "6. Spectrometer",
//                        "7. Signal Processing (4-f system)", "8. Phase Shifting Digital Holography", "9. Talbot Images", "10. Wavefront Modulation"}));
//                    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
//                        public void actionPerformed(java.awt.event.ActionEvent evt) {
//                            JComboBox comboBox = (JComboBox) evt.getSource();
//
//                            Object selected = comboBox.getSelectedItem();
//                            if (selected.equals("      ------ Select experiment ------")) {
//                                jMenuItemNoSelectActionPerformed(evt);
//                            } else if (selected.equals("1.SLM Basic Property Test")) {
//                                jMenuItemTelephotoActionPerformed(evt);
//                            } else if (selected.equals("2. Amplitude Modulation (Projection System)")) {
//                                jMenuItemMicroscopeActionPerformed(evt);
//                            } else if (selected.equals("3. Phase Modulation")) {
//                                jMenuItemAberrationActionPerformed(evt);
//                            } else if (selected.equals("4. Michelson Interferometer")) {
//                                jMenuItemMichelsonActionPerformed(evt);
//                            } else if (selected.equals("5. Diffraction and Interference")) {
//                                jMenuItemDiffractionActionPerformed(evt);
//                            } else if (selected.equals("6. Spectrometer")) {
//                                jMenuItemSpectrometerActionPerformed(evt);
//                            } else if (selected.equals("7. Signal Processing (4-f system)")) {
//                                jMenuItemSignalProcessingActionPerformed(evt);
//                            } else if (selected.equals("8. Phase Shifting Digital Holography")) {
//                                jMenuItemPhaseShiftingActionPerformed(evt);
//                            } else if (selected.equals("9. Talbot Images")) {
//                                jMenuItemTalbotImagesActionPerformed(evt);
//                            } else if (selected.equals("10. Wavefront Modulation")) {
//                                jMenuItemWavefrontActionPerformed(evt);
//                            } else if (selected.equals("11. Wavelength Selective Switch")) {
//                                jMenuItemWavelengthActionPerformed(evt);
//                            }
//                        }
//                    });
                    //jMenuItemNoSelectActionPerformed(null);
                    layoutDiagram.removeAll();
                    diagramLens.removeAll();
                    tabbedDesLog.removeAll();
                    // check selected
                    if (tmpSelected == 0) {
                        jScrollDes.setViewportView(desTelephotoLens);
                        tabbedDesLog.addTab("Description", desNoSelect);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(null);
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 1) {
                        jScrollDes.setViewportView(desTelephotoLens);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp_1_2_3.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 2) {
                        jScrollDes.setViewportView(desMicroscope);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp_1_2_3.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 3) {
                        jScrollDes.setViewportView(desAberration);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp_1_2_3.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 4) {
                        jScrollDes.setViewportView(desMichelson);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp4michelson.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 5) {
                        jScrollDes.setViewportView(desDiffaction);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp5diffraction.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 6) {
                        jScrollDes.setViewportView(desSpectrometer);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp6spectrometer.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 7) {
                        jScrollDes.setViewportView(desSignalProcessing);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp7signalprocessing.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 8) {
                        jScrollDes.setViewportView(desPhaseRetarder);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp8phaseshifting.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 9) {
                        jScrollDes.setViewportView(desTalbotImage);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp9talbot.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    } else if (tmpSelected == 10) {
                        jScrollDes.setViewportView(desWavefront);
                        tabbedDesLog.addTab("Description", jScrollDes);
                        jTextAreaLog.setColumns(20);
                        jTextAreaLog.setRows(5);
                        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                        jScrollPane2.setViewportView(jTextAreaLog);
                        tabbedDesLog.addTab("Log", jScrollPane2);

                        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp10wavefrontmodulation.png")));
                        lblDiagram.setText(null);
                        diagramLens.add(lblDiagram);
                        layoutDiagram.add(diagramLens);
                    }
                    
                }
                if (index == 2) {
                    layoutDiagram.removeAll();
                    diagramLens.removeAll();
                    tabbedDesLog.removeAll();
                    
                    tabbedDesLog.addTab("Description", desImportfile);
                    jTextAreaLog.setColumns(20);
                    jTextAreaLog.setRows(5);
                    jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
                    jScrollPane2.setViewportView(jTextAreaLog);
                    tabbedDesLog.addTab("Log", jScrollPane2);

                    lblDiagram.setIcon(null);
                    lblDiagram.setText(null);
                    diagramLens.add(lblDiagram);
                    layoutDiagram.add(diagramLens);
                }
            }
        });
        // BEGIN Import file
        panelImportfile = new javax.swing.JPanel();
        // Import file
        
        lblHeaderImportFile = new javax.swing.JLabel();
        lblK = new javax.swing.JLabel();
        txtKImportFile = new javax.swing.JTextField();
        lblR = new javax.swing.JLabel();
        txtRImportFile = new javax.swing.JTextField();
        lblE1 = new javax.swing.JLabel();
        txtE1ImportFile = new javax.swing.JTextField();
        lblKR = new javax.swing.JLabel();
        txtK1RImportFile = new javax.swing.JTextField();
        lbltWidthImportFile = new javax.swing.JLabel();
        txtWidthImportFile = new javax.swing.JTextField();
        sliderWidthImportFile = new javax.swing.JSlider();
        lblRotationImportFile = new javax.swing.JLabel();
        txtRotationImportFile = new javax.swing.JTextField();
        sliderRotationImportFile = new javax.swing.JSlider();
        lblPositionImportFile = new javax.swing.JLabel();
        txtPositionImportFile = new javax.swing.JTextField();
        sliderPositionImportFile = new javax.swing.JSlider();
        lblGrayLevelImportFile = new javax.swing.JLabel();
        txtGrayLevelImportFile = new javax.swing.JTextField();
        sliderGrayLevelImportFile = new javax.swing.JSlider();
        btnGenerteImportFile = new javax.swing.JButton();
        btnLensONImportFile = new javax.swing.JButton();
        btnSecondImportFile = new javax.swing.JButton();
        txtFormula = new javax.swing.JTextField();

        //lblHeaderImportFile.setIcon(new ImageIcon(getClass().getResource("/resources/importfile/header.png")));
        lblHeaderImportFile.setText("U1 = ");
        lblK.setText("K = ");

        txtKImportFile.setText("0.5");

        lblR.setText("R = ");

        txtRImportFile.setText("24");

        lblE1.setText("E1 = ");

        txtE1ImportFile.setText("1.42");

        lblKR.setText("K1.R = ");

        txtK1RImportFile.setText("12");

        lbltWidthImportFile.setText("Width");

        txtWidthImportFile.setText("100");

        lblRotationImportFile.setText("Rotation");

        txtRotationImportFile.setText("0");

        lblPositionImportFile.setText("Positions");

        txtPositionImportFile.setText("0");

        lblGrayLevelImportFile.setText("Gray level");

        txtGrayLevelImportFile.setText("255");

        btnGenerteImportFile.setText("Generate");

        btnLensONImportFile.setText("1:1 lens ON");

        btnSecondImportFile.setText("Second display ON");
        
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderWidthImportFile, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtWidthImportFile, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderRotationImportFile, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtRotationImportFile, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderPositionImportFile, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtPositionImportFile, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderGrayLevelImportFile, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtGrayLevelImportFile, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        
        sliderWidthImportFile.setMaximum(180);
        sliderWidthImportFile.setMinimum(-180);
        sliderWidthImportFile.setValue(0);
        sliderWidthImportFile.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedImportFile(evt);
            }
        });
        sliderRotationImportFile.setMaximum(180);
        sliderRotationImportFile.setMinimum(-180);
        sliderRotationImportFile.setValue(0);
        sliderRotationImportFile.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedImportFile(evt);
            }
        });
        sliderPositionImportFile.setMaximum(image1.getBounds().height / 2);
        sliderPositionImportFile.setMinimum(-(image1.getBounds().height / 2));
        sliderPositionImportFile.setValue(0);
        sliderPositionImportFile.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedImportFile(evt);
            }
        });
        sliderGrayLevelImportFile.setMaximum(255);
        sliderGrayLevelImportFile.setMinimum(0);
        sliderGrayLevelImportFile.setValue(255);
        sliderGrayLevelImportFile.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedImportFile(evt);
            }
        });
        
        btnGenerteImportFile.setText("Generate");
        btnGenerteImportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedImportFile(evt);
            }
        });

        btnLensONImportFile.setEnabled(false);
        btnLensONImportFile.setText("1:1 lens ON");
        btnLensONImportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnImportFileActionPerformed(evt);
                countLenOnImportFile++;
                if (countLenOnImportFile % 2 == 0) {
                    btnLensONImportFile.setText("1:1 lens OFF");
                } else {
                    btnLensONImportFile.setText("1:1 lens ON");
                }
            }
        });

        btnSecondImportFile.setEnabled(false);
        btnSecondImportFile.setText("Second display ON");
        btnSecondImportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedImportFile(evt);
                countSecondDisplayImportFile++;
                if (countSecondDisplayImportFile % 2 == 0) {
                    btnSecondImportFile.setText("Second display OFF");
                } else {
                    btnSecondImportFile.setText("Second display ON");
                }
            }
        });
        
//        sliderPositionImportFile = new DoubleJSlider(-1000, 1000, 10, 10);
//        sliderPositionImportFile.setValue(1);
//        txtPositionImportFile.setText(String.valueOf(sliderPositionImportFile.getValue()));
//
//        sliderPositionImportFile.addChangeListener(new javax.swing.event.ChangeListener() {
//            public void stateChanged(javax.swing.event.ChangeEvent evt) {
//                DecimalFormat df = new DecimalFormat("0.####");
//                txtPositionImportFile.setText(df.format(sliderPositionImportFile.getScaledValue()));
//                //sliderGenerateActionPerformedMirrorSpectometer(evt);
//            }
//        });
//        
//        txtPositionImportFile.addKeyListener(new KeyAdapter(){
//            public void keyReleased(KeyEvent ke) {
//                //keyEventGenerateActionPerformedMirrorSpectometer(ke);
//            }
//        });
//        
//        sliderGrayLevelImportFile = new DoubleJSlider(-2550, 2550, 10, 10);
//        sliderGrayLevelImportFile.setValue(255);
//        txtGrayLevelImportFile.setText(String.valueOf(sliderGrayLevelImportFile.getValue()));
//
//        sliderGrayLevelImportFile.addChangeListener(new javax.swing.event.ChangeListener() {
//            public void stateChanged(javax.swing.event.ChangeEvent evt) {
//                DecimalFormat df = new DecimalFormat("0.####");
//                txtGrayLevelImportFile.setText(df.format(sliderGrayLevelImportFile.getScaledValue()));
//                //sliderGenerateActionPerformedMirrorSpectometer(evt);
//            }
//        });
//        
//        txtGrayLevelImportFile.addKeyListener(new KeyAdapter(){
//            public void keyReleased(KeyEvent ke) {
//                //keyEventGenerateActionPerformedMirrorSpectometer(ke);
//            }
//        });

        javax.swing.GroupLayout layoutImportFile = new javax.swing.GroupLayout(panelImportfile);
        panelImportfile.setLayout(layoutImportFile);
        layoutImportFile.setHorizontalGroup(
            layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layoutImportFile.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layoutImportFile.createSequentialGroup()
                        .addComponent(btnGenerteImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLensONImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSecondImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 155, Short.MAX_VALUE))
                    .addGroup(layoutImportFile.createSequentialGroup()
                        .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblKR, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblE1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblR, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblK, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtK1RImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtKImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtE1ImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtRImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25)
                        .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbltWidthImportFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRotationImportFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPositionImportFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblGrayLevelImportFile, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtPositionImportFile, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRotationImportFile, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtWidthImportFile, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(txtGrayLevelImportFile))
                        .addGap(18, 18, 18)
                        .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sliderWidthImportFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sliderGrayLevelImportFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sliderPositionImportFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sliderRotationImportFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(36, 36, 36))
            .addGroup(layoutImportFile.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(lblHeaderImportFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layoutImportFile.setVerticalGroup(
            layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layoutImportFile.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFormula, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHeaderImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtKImportFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblK)
                            .addComponent(lbltWidthImportFile)
                            .addComponent(txtWidthImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(sliderWidthImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblR)
                        .addComponent(txtRImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRotationImportFile)
                        .addComponent(txtRotationImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderRotationImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblE1)
                        .addComponent(txtE1ImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPositionImportFile)
                        .addComponent(txtPositionImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderPositionImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderGrayLevelImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblKR)
                        .addComponent(txtK1RImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblGrayLevelImportFile)
                        .addComponent(txtGrayLevelImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(85, 85, 85)
                .addGroup(layoutImportFile.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerteImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLensONImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSecondImportFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                //.addGap(36, 36, 36)
                )
        );
        tabbedControl.addTab("Import file", panelImportfile);
        // END Import file
        
        /*
         * Slit
         */
        comboBoxSlit = new javax.swing.JComboBox();
        lblWidthSlit = new javax.swing.JLabel();
        lblHeightSlit = new javax.swing.JLabel();
        lblRotationSlit = new javax.swing.JLabel();
        lblPosSlit = new javax.swing.JLabel();
        lblGraySlit = new javax.swing.JLabel();
        text_single_width = new javax.swing.JTextField();
        text_single_height = new javax.swing.JTextField();
        text_single_rotation = new javax.swing.JTextField();
        text_single_position = new javax.swing.JTextField();
        text_single_gray = new javax.swing.JTextField();
        s_single_width = new javax.swing.JSlider();
        s_single_height = new javax.swing.JSlider();
        s_single_rotation = new javax.swing.JSlider();
        s_single_position = new javax.swing.JSlider();
        s_single_gray = new javax.swing.JSlider();
        jLabelSpacingSlit = new javax.swing.JLabel();
        text_single_spacing = new javax.swing.JTextField();
        s_single_spacing = new javax.swing.JSlider();
        buttonGennerateSlit = new javax.swing.JButton();
        buttong11LensOnSlit = new javax.swing.JButton();
        buttonSecondDisplaySlit = new javax.swing.JButton();

        // double slit
        lblWidthDoubleSlit = new javax.swing.JLabel();
        lblHeightDoubleSlit = new javax.swing.JLabel();
        lblRotationDoubleSlit = new javax.swing.JLabel();
        lblPosDoubleSlit = new javax.swing.JLabel();
        lblGrayDoubleSlit = new javax.swing.JLabel();
        text_single_widthDoubleSlit = new javax.swing.JTextField();
        text_single_heightDoubleSlit = new javax.swing.JTextField();
        text_single_rotationDoubleSlit = new javax.swing.JTextField();
        text_single_positionDoubleSlit = new javax.swing.JTextField();
        text_single_grayDoubleSlit = new javax.swing.JTextField();
        s_single_widthDoubleSlit = new javax.swing.JSlider();
        s_single_heightDoubleSlit = new javax.swing.JSlider();
        s_single_rotationDoubleSlit = new javax.swing.JSlider();
        s_single_positionDoubleSlit = new javax.swing.JSlider();
        s_single_grayDoubleSlit = new javax.swing.JSlider();
        jLabelSpacingDoubleSlit = new javax.swing.JLabel();
        text_single_spacingDoubleSlit = new javax.swing.JTextField();
        s_single_spacingDoubleSlit = new javax.swing.JSlider();
        buttonGennerateDoubleSlit = new javax.swing.JButton();
        buttong11LensOnDoubleSlit = new javax.swing.JButton();
        buttonSecondDisplayDoubleSlit = new javax.swing.JButton();


        lblWidthSlit.setText("Width");

        lblHeightSlit.setText("Width");

        lblRotationSlit.setText("Rotation");

        lblPosSlit.setText("Positions");

        lblGraySlit.setText("Gray level ");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_width, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_width, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_height, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_height, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_rotation, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_rotation, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_position, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_position, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_gray, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_gray, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabelSpacingSlit.setText("Spacing");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_spacing, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_spacing, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        // disable when slit = 1
        jLabelSpacingSlit.hide();
        text_single_spacing.hide();
        s_single_spacing.hide();
        // s_single_width.setMaximum(image1.getBounds().width);
        // s_single_width.setValue(image1.getBounds().width);
        s_single_width.setMaximum(3866);
        s_single_width.setValue(3866);
        s_single_width.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_height.setMaximum(image1.getBounds().height);
        s_single_height.setValue(100);
        s_single_height.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_rotation.setMaximum(180);
        s_single_rotation.setMinimum(-180);
        s_single_rotation.setValue(0);
        s_single_rotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_position.setMaximum(image1.getBounds().height / 2);
        s_single_position.setMinimum(-(image1.getBounds().height / 2));
        s_single_position.setValue(0);
        s_single_position.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_gray.setMaximum(255);
        s_single_gray.setValue(255);
        s_single_gray.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_spacing.setMaximum(image1.getBounds().height);
        s_single_spacing.setValue(400);
        s_single_spacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });
        s_single_spacing.setMaximum(image1.getBounds().height);
        s_single_spacing.setValue(400);
        s_single_spacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedSlit(evt);
            }
        });

        buttonGennerateSlit.setText("Generate");
        buttonGennerateSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedSlit(evt);
            }
        });

        buttong11LensOnSlit.setEnabled(false);
        buttong11LensOnSlit.setText("1:1 lens ON");
        buttong11LensOnSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnSlitActionPerformed(evt);
                countLenOnSlit++;
                if (countLenOnSlit % 2 == 0) {
                    buttong11LensOnSlit.setText("1:1 lens OFF");
                } else {
                    buttong11LensOnSlit.setText("1:1 lens ON");
                }
            }
        });

        buttonSecondDisplaySlit.setEnabled(false);
        buttonSecondDisplaySlit.setText("Second display ON");
        buttonSecondDisplaySlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedSlit(evt);
                countSecondDisplaySlit++;
                if (countSecondDisplaySlit % 2 == 0) {
                    buttonSecondDisplaySlit.setText("Second display OFF");
                } else {
                    buttonSecondDisplaySlit.setText("Second display ON");
                }
            }
        });
        comboBoxSlit.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Single Slit", "Double Slit"}));
        comboBoxSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Object selected = comboBoxSlit.getSelectedItem();
                if (selected.equals("Single Slit")) {
                    slit = 1;
                    jLabelSpacingSlit.hide();
                    text_single_spacing.hide();
                    s_single_spacing.hide();

                }
                if (selected.equals("Double Slit")) {
                    slit = 2;
                    jLabelSpacingSlit.show();
                    text_single_spacing.show();
                    s_single_spacing.show();
                }
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
                image.slit(slit);
                EduPatternShowOn.updateLensPatternPattern(image, genLogSlit());
                imageGenerated = true;
            }
        });
//        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(panelSlit);
//        panelSlit.setLayout(jPanel4Layout);
//        jPanel4Layout.setHorizontalGroup(
//                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addContainerGap()
//                //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(15, 15, 15)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addComponent(lblHeightSlit)
//                .addGap(36, 36, 36)
//                .addComponent(text_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(18, 18, 18)
//                .addComponent(s_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                //.addComponent(s_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                )
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addComponent(lblGraySlit)
//                .addGap(5, 5, 5)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                .addComponent(text_single_gray, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
//                .addComponent(text_single_spacing)))
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addComponent(lblRotationSlit)
//                .addGap(17, 17, 17)
//                .addComponent(text_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addComponent(jLabelSpacingSlit)
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addComponent(lblPosSlit)
//                .addGap(12, 12, 12)
//                .addComponent(text_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
//                .addGap(18, 18, 18)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, true)
//                //.addComponent(s_single_rotation, javax.swing.GroupLayout.DEFAULT_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addComponent(s_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addComponent(s_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addComponent(s_single_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addComponent(s_single_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
//                //.addComponent(s_single_position, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                //.addComponent(s_single_gray, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                //.addComponent(s_single_spacing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(5, 5, 5)))
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addGap(0, 0, 0)
//                .addComponent(buttonGennerateSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(18, 18, 18)
//                .addComponent(buttong11LensOnSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                .addComponent(buttonSecondDisplaySlit, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)) //.addComponent(comboBoxSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
//                )
//                //.addContainerGap(28, Short.MAX_VALUE)
//                ));
//        jPanel4Layout.setVerticalGroup(
//                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
//                .addGap(5, 5, 5)
//                //.addComponent(comboBoxSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(3, 3, 3)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addGap(3, 3, 3)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                .addGroup(jPanel4Layout.createSequentialGroup()
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(lblHeightSlit)
//                .addComponent(text_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(3, 3, 3))
//                .addComponent(s_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(10, 10, 10)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(lblRotationSlit)
//                .addComponent(text_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addComponent(s_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(10, 10, 10)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(lblPosSlit)
//                .addComponent(text_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addComponent(s_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(10, 10, 10)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(lblGraySlit)
//                .addComponent(text_single_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
//                .addComponent(s_single_gray, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(10, 10, 10)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(jLabelSpacingSlit)
//                .addComponent(text_single_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addComponent(s_single_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(82, 82, 82)
//                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                .addComponent(buttonGennerateSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addComponent(buttong11LensOnSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addComponent(buttonSecondDisplaySlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))) //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
//                )));
        
        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(panelSlit);
        panelSlit.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(buttonGennerateSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttong11LensOnSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSecondDisplaySlit, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblGraySlit, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                            .addComponent(lblPosSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRotationSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHeightSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(text_single_height, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(text_single_rotation)
                            .addComponent(text_single_position)
                            .addComponent(text_single_gray))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(s_single_height, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(s_single_rotation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(s_single_position, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(s_single_gray, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(s_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblHeightSlit)
                        .addComponent(text_single_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRotationSlit)
                        .addComponent(text_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPosSlit)
                        .addComponent(text_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblGraySlit)
                        .addComponent(text_single_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(97, 97, 97)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGennerateSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttong11LensOnSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSecondDisplaySlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );

        lblWidthDoubleSlit.setText("Width");

        lblHeightDoubleSlit.setText("Width");

        lblRotationDoubleSlit.setText("Rotation");

        lblPosDoubleSlit.setText("Positions");

        lblGrayDoubleSlit.setText("Gray level ");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_widthDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_widthDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_heightDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_heightDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_rotationDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_rotationDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_positionDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_positionDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_grayDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_grayDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabelSpacingDoubleSlit.setText("Spacing");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_single_spacingDoubleSlit, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_single_spacingDoubleSlit, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);


        // s_single_width.setMaximum(image1.getBounds().width);
        // s_single_width.setValue(image1.getBounds().width);
        s_single_widthDoubleSlit.setMaximum(3866);
        s_single_widthDoubleSlit.setValue(3866);
        s_single_widthDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_heightDoubleSlit.setMaximum(image1.getBounds().height);
        s_single_heightDoubleSlit.setValue(100);
        s_single_heightDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_rotationDoubleSlit.setMaximum(180);
        s_single_rotationDoubleSlit.setMinimum(-180);
        s_single_rotationDoubleSlit.setValue(0);
        s_single_rotationDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_positionDoubleSlit.setMaximum(image1.getBounds().height / 2);
        s_single_positionDoubleSlit.setMinimum(-(image1.getBounds().height / 2));
        s_single_positionDoubleSlit.setValue(0);
        s_single_positionDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_grayDoubleSlit.setMaximum(255);
        s_single_grayDoubleSlit.setValue(255);
        s_single_grayDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_spacingDoubleSlit.setMaximum(image1.getBounds().height);
        s_single_spacingDoubleSlit.setValue(400);
        s_single_spacingDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });
        s_single_spacingDoubleSlit.setMaximum(image1.getBounds().height);
        s_single_spacingDoubleSlit.setValue(400);
        s_single_spacingDoubleSlit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedDoubleSlit(evt);
            }
        });

        buttonGennerateDoubleSlit.setText("Generate");
        buttonGennerateDoubleSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedDoubleSlit(evt);
            }
        });
        buttong11LensOnDoubleSlit.setEnabled(false);
        buttong11LensOnDoubleSlit.setText("1:1 lens ON");
        buttong11LensOnDoubleSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnDoubleSlitActionPerformed(evt);
                countLenOnDoubleSlit++;
                if (countLenOnDoubleSlit % 2 == 0) {
                    buttong11LensOnDoubleSlit.setText("1:1 lens OFF");
                } else {
                    buttong11LensOnDoubleSlit.setText("1:1 lens ON");
                }
            }
        });
        buttonSecondDisplayDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setText("Second display ON");
        buttonSecondDisplayDoubleSlit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedDoubleSlit(evt);
                countSecondDisplayDoubleSlit++;
                if (countSecondDisplayDoubleSlit % 2 == 0) {
                    buttonSecondDisplayDoubleSlit.setText("Second display OFF");
                } else {
                    buttonSecondDisplayDoubleSlit.setText("Second display ON");
                }
            }
        });

        // double slit
        javax.swing.GroupLayout panelDoubleSlitLayout = new javax.swing.GroupLayout(panelDoubleSlit);
        panelDoubleSlit.setLayout(panelDoubleSlitLayout);
        panelDoubleSlitLayout.setHorizontalGroup(
            panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                        .addComponent(buttonGennerateDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttong11LensOnDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSecondDisplayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                        .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelSpacingDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblGrayDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                            .addComponent(lblPosDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRotationDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHeightDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(text_single_heightDoubleSlit)
                            .addComponent(text_single_rotationDoubleSlit)
                            .addComponent(text_single_positionDoubleSlit)
                            .addComponent(text_single_grayDoubleSlit)
                            .addComponent(text_single_spacingDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(s_single_heightDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                            .addComponent(s_single_rotationDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(s_single_positionDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(s_single_grayDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(s_single_spacingDoubleSlit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        panelDoubleSlitLayout.setVerticalGroup(
            panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDoubleSlitLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(s_single_heightDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblHeightDoubleSlit)
                        .addComponent(text_single_heightDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRotationDoubleSlit)
                        .addComponent(text_single_rotationDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_rotationDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPosDoubleSlit)
                        .addComponent(text_single_positionDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_positionDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblGrayDoubleSlit)
                        .addComponent(text_single_grayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_grayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelSpacingDoubleSlit)
                        .addComponent(text_single_spacingDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(s_single_spacingDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(panelDoubleSlitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGennerateDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttong11LensOnDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSecondDisplayDoubleSlit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1))
        );

        /*
         * Signal
         */
        lblWidthY = new javax.swing.JLabel();
        lblHeightY = new javax.swing.JLabel();
        lblRotationProcessing = new javax.swing.JLabel();
        lblPosX = new javax.swing.JLabel();
        lblPosY = new javax.swing.JLabel();
        lblSpacingProcessing = new javax.swing.JLabel();
        text_width_processing_y = new javax.swing.JTextField();
        text_height_processing_y = new javax.swing.JTextField();
        text_rotation_processing = new javax.swing.JTextField();
        text_position_processing_x = new javax.swing.JTextField();
        text_position_processing_y = new javax.swing.JTextField();
        text_processing_spacing = new javax.swing.JTextField();
        s_processing_width_y = new javax.swing.JSlider();
        s_processing_height_y = new javax.swing.JSlider();
        s_processing_rotation = new javax.swing.JSlider();
        s_processing_positionx = new javax.swing.JSlider();
        s_processing_pos_y = new javax.swing.JSlider();
        s_processing_spacing = new javax.swing.JSlider();
        jLabelGrayProcessing = new javax.swing.JLabel();
        text_processing_gray = new javax.swing.JTextField();
        s_processing_gray = new javax.swing.JSlider();
        buttonGennerateProcessing = new javax.swing.JButton();
        button11LensOnProcessing = new javax.swing.JButton();
        buttonSecondDisplayProcessing = new javax.swing.JButton();
        lblWidthX = new javax.swing.JLabel();
        text_width_processing_x = new javax.swing.JTextField();
        s_processing_width_x = new javax.swing.JSlider();
        lblHeightX = new javax.swing.JLabel();
        text_height_processing_x = new javax.swing.JTextField();
        s_processing_height_x = new javax.swing.JSlider();
        // lblWidthY.setText("Width Y");
        lblHeightY.setText("Width Y");

        lblRotationProcessing.setText("Rotation");

        lblPosX.setText("Position X");

        lblPosY.setText("Position Y");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_width_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_width_processing_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_width_y.setMaximum(image1.getBounds().width);
        s_processing_width_y.setValue(100);
        s_processing_width_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_height_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_height_processing_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_height_y.setMaximum(9999);
        s_processing_height_y.setValue(9999);
        s_processing_height_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_rotation, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_rotation_processing, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_rotation.setMaximum(180);
        s_processing_rotation.setMinimum(-180);
        s_processing_rotation.setValue(0);
        s_processing_rotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_positionx, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_position_processing_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_positionx.setMaximum(image1.getBounds().height / 2);
        s_processing_positionx.setMinimum(-(image1.getBounds().height / 2));
        s_processing_positionx.setValue(0);
        s_processing_positionx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_pos_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_position_processing_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_pos_y.setMaximum(image1.getBounds().width / 2);
        s_processing_pos_y.setMinimum(-(image1.getBounds().width / 2));
        s_processing_pos_y.setValue(0);
        s_processing_pos_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        jLabelGrayProcessing.setText("Gray level");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_gray, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_processing_gray, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_gray.setMaximum(255);
        s_processing_gray.setValue(255);
        s_processing_gray.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        lblSpacingProcessing.setText("Spacing");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_spacing, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_processing_spacing, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_spacing.setMaximum(image1.getBounds().height);
        s_processing_spacing.setMinimum(-(image1.getBounds().height));
        s_processing_spacing.setValue(0);
        s_processing_spacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });

        bindingGroup.addBinding(binding);



        buttonGennerateProcessing.setText("Generate");
        buttonGennerateProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedProcessing(evt);
            }
        });
        button11LensOnProcessing.setEnabled(false);
        button11LensOnProcessing.setText("1:1 lens ON");
        button11LensOnProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnProcessingActionPerformed(evt);
                //   boolean_checkLen = false;
                countLenOnProcessing++;
                if (countLenOnProcessing % 2 == 0) {
                    button11LensOnProcessing.setText("1:1 lens OFF");
                } else {
                    button11LensOnProcessing.setText("1:1 lens ON");
                }
            }
        });
        buttonSecondDisplayProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setText("Second display ON");
        buttonSecondDisplayProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedProcessing(evt);
                countSecondDisplayProcessing++;
                if (countSecondDisplayProcessing % 2 == 0) {
                    buttonSecondDisplayProcessing.setText("Second display OFF");
                } else {
                    buttonSecondDisplayProcessing.setText("Second display ON");
                }
            }
        });

        // lblWidthX.setText("Width X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_width_x, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_width_processing_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_width_x.setMaximum(3866);
        s_processing_width_x.setValue(3866);
        s_processing_width_x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        lblHeightX.setText("Width X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_processing_height_x, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_height_processing_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_processing_height_x.setMaximum(image1.getBounds().height);
        s_processing_height_x.setValue(100);
        s_processing_height_x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedProcessing(evt);
            }
        });
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanelProcessingLayout = new javax.swing.GroupLayout(panelSignal);
        panelSignal.setLayout(jPanelProcessingLayout);
        jPanelProcessingLayout.setHorizontalGroup(
                jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(15, 15, 15)
                //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblPosX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(text_position_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblPosY)
                .addComponent(jLabelGrayProcessing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_position_processing_y))))
                .addGap(17, 17, 17)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_processing_pos_y, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_positionx, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblHeightY)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblHeightX)
                .addGap(33, 33, 33)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_width_processing_y, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_height_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(s_processing_height_x, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addComponent(s_processing_width_y, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblRotationProcessing)
                .addGap(27, 27, 27)
                .addComponent(text_rotation_processing, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(s_processing_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(lblSpacingProcessing)
                .addGap(32, 32, 32)
                .addComponent(text_processing_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(s_processing_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(buttonGennerateProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(button11LensOnProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(buttonSecondDisplayProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE)));
        jPanelProcessingLayout.setVerticalGroup(
                jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProcessingLayout.createSequentialGroup()
                //.addComponent(jLayeredPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addComponent(s_processing_height_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
                .addGroup(jPanelProcessingLayout.createSequentialGroup()
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_height_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblHeightX))
                .addGap(6, 6, 6)))
                .addGap(2, 2, 2)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_width_processing_y, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblHeightY))
                .addComponent(s_processing_width_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_rotation_processing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblRotationProcessing))
                .addComponent(s_processing_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_processing_positionx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_position_processing_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPosX)))
                .addGap(10, 10, 10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_position_processing_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPosY)
                .addComponent(s_processing_pos_y, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelGrayProcessing))
                .addGap(8, 8, 8)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_processing_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_processing_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblSpacingProcessing))
                .addGap(7, 7, 7)
                .addGroup(jPanelProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGennerateProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondDisplayProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)));
        /*
         * Phase retarder
         */
        openFile = new javax.swing.JFileChooser();
        s_phase_zoom = new javax.swing.JSlider();
        buttonOpenFile = new javax.swing.JButton();
        lblPleaseSelect = new javax.swing.JLabel();
        lblZoom = new javax.swing.JLabel();
        buttonSecondPhase = new javax.swing.JButton();
        button11LensOnPhase = new javax.swing.JButton();
        buttonGeneralPhase = new javax.swing.JButton();
        txtZoom = new javax.swing.JTextField();

        buttonOpenFile.hide();
        lblZoom.setText("Gray level");

        buttonSecondPhase.setEnabled(false);
        buttonSecondPhase.setText("Second display ON");
        buttonSecondPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedPhase(evt);
                countSecondDisplayPhase++;
                if (countSecondDisplayPhase % 2 == 0) {
                    buttonSecondPhase.setText("Second display OFF");
                } else {
                    buttonSecondPhase.setText("Second display ON");
                }
            }
        });

        button11LensOnPhase.setEnabled(false);
        button11LensOnPhase.setText("1:1 lens ON");
        button11LensOnPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnPhaseActionPerformed(evt);
                countLenOnPhase++;
                if (countLenOnPhase % 2 == 0) {
                    button11LensOnPhase.setText("1:1 lens OFF");
                } else {
                    button11LensOnPhase.setText("1:1 lens ON");
                }
            }
        });

        buttonGeneralPhase.setText("Generate");
        buttonGeneralPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedPhase(evt);
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_phase_zoom, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtZoom, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_phase_zoom.setMaximum(255);
        s_phase_zoom.setValue(0);
        s_phase_zoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedPhase(evt);
            }
        });
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(panelPhase);
        panelPhase.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                //.addComponent(jLayeredPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(buttonOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblZoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblPleaseSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(s_phase_zoom, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(buttonGeneralPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button11LensOnPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonSecondPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                //.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                ))));
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 73, Short.MAX_VALUE) //.addComponent(jLayeredPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                )
                .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonOpenFile)
                .addComponent(lblPleaseSelect))
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_phase_zoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblZoom)))
                .addGap(158, 158, 158)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonSecondPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonGeneralPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                ));


        /*
         * Signal Photo
         */
        openFile = new javax.swing.JFileChooser();
        buttonOpenFile = new javax.swing.JButton();
        lblPleaseSelectPhoto = new javax.swing.JLabel();
        buttonSecondPhoto = new javax.swing.JButton();
        button11LensOnPhoto = new javax.swing.JButton();
        buttonGeneralPhoto = new javax.swing.JButton();
        buttonOpenFile.setText("Browse...");
        buttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_openFileActionPerformed(evt);
            }
        });
        lblPleaseSelectPhoto.setText("Select the file to import.");

        buttonSecondPhoto.setEnabled(false);
        buttonSecondPhoto.setText("Second display ON");
        buttonSecondPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    buttonSecondGenerateActionPerformedProcessingPhoto(evt);
                    countSecondDisplayPhoto++;
                    if (countSecondDisplayPhoto % 2 == 0) {
                        buttonSecondPhoto.setText("Second display OFF");
                    } else {
                        buttonSecondPhoto.setText("Second display ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        button11LensOnPhoto.setEnabled(false);
        button11LensOnPhoto.setText("1:1 lens ON");
        button11LensOnPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    button11LensOnProcessingPhotoActionPerformed(evt);
                    countLenOnPhoto++;
                    if (countLenOnPhoto % 2 == 0) {
                        button11LensOnPhoto.setText("1:1 lens OFF");
                    } else {
                        button11LensOnPhoto.setText("1:1 lens ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        buttonGeneralPhoto.setText("Generate");
        buttonGeneralPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    buttonGenerateActionPerformedProcessingPhoto(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        javax.swing.GroupLayout signalPhotoLayout = new javax.swing.GroupLayout(panelSignalPhoto);
        panelSignalPhoto.setLayout(signalPhotoLayout);
        signalPhotoLayout.setHorizontalGroup(
            signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signalPhotoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonGeneralPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOpenFile, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(signalPhotoLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblPleaseSelectPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(signalPhotoLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(button11LensOnPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSecondPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        signalPhotoLayout.setVerticalGroup(
            signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signalPhotoLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPleaseSelectPhoto))
                .addGap(153, 153, 153)
                .addGroup(signalPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonGeneralPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button11LensOnPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSecondPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        
        /*
         * Lens Michelson
         */
        lblFocalLensMichelson.setText("Focal length (cm)");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderFocalLensMichelson, org.jdesktop.beansbinding.ELProperty.create("${value}"), txtFocalLensMichelson, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lblXLensMichelson.setText("X Position (mm)");

        lblYLensMichelson.setText("Y Position (mm)");

        jButtonLensMichelson.setText("Generate");
        jButtonLensMichelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMichelSon(evt);
            }
        });

        jButton11LensOnMichelson.setEnabled(false);
        jButton11LensOnMichelson.setText("1:1 lens ON");
        jButton11LensOnMichelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnMichelsonActionPerformed(evt);
                countLenOnMichelson++;
                if (countLenOnMichelson % 2 == 0) {
                    jButton11LensOnMichelson.setText("1:1 lens OFF");
                } else {
                    jButton11LensOnMichelson.setText("1:1 lens ON");
                }
            }
        });

        jButtonDisplaySecondOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setText("Second display ON");
        jButtonDisplaySecondOnMichelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMichelSon(evt);
                countSecondDisplayMichelson++;
                if (countSecondDisplayMichelson % 2 == 0) {
                    jButtonDisplaySecondOnMichelson.setText("Second display OFF");
                } else {
                    jButtonDisplaySecondOnMichelson.setText("Second display ON");
                }
            }
        });
        
        jSliderXPositionLensMichelson = new DoubleJSlider(-60, 60, 1, 10);
        jSliderXPositionLensMichelson.setValue(0);
        txtXPositionLensMichelson.setText(String.valueOf(jSliderXPositionLensMichelson.getValue()));

        jSliderXPositionLensMichelson.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtXPositionLensMichelson.setText(df.format(jSliderXPositionLensMichelson.getScaledValue()));
                sliderGenerateActionPerformedLensMichelSon(evt);
            }
        });
        
        jSliderYPositionLensMichelson = new DoubleJSlider(-30, 30, 1, 10);
        jSliderYPositionLensMichelson.setValue(0);
        txtYPositionLensMichelson.setText(String.valueOf(jSliderYPositionLensMichelson.getValue()));

        jSliderYPositionLensMichelson.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtYPositionLensMichelson.setText(df.format(jSliderYPositionLensMichelson.getScaledValue()));
                sliderGenerateActionPerformedLensMichelSon(evt);
            }
        });

        jSliderFocalLensMichelson.setMaximum(1000);
        jSliderFocalLensMichelson.setMinimum(-1000);
        jSliderFocalLensMichelson.setValue(522);
        jSliderFocalLensMichelson.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                String tmp = txtFocalLensMichelson.getText();
                int value = Integer.parseInt(tmp);
                if (value >= -30 && value <= 30) {
                    lblFocalLensMichelson.setForeground(Color.red);
                } else {
                    lblFocalLensMichelson.setForeground(Color.BLACK);
                }
                sliderGenerateActionPerformedLensMichelSon(evt);
            }
        });

        javax.swing.GroupLayout jPanelLensMichelsonLayout = new javax.swing.GroupLayout(jPanelLensMichelson);
        jPanelLensMichelson.setLayout(jPanelLensMichelsonLayout);
        jPanelLensMichelsonLayout.setHorizontalGroup(
                jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(15, 15, 15)
                .addComponent(lblYLensMichelson)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(lblXLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtYPositionLensMichelson)
                .addComponent(txtFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtXPositionLensMichelson))))
                .addGap(5, 5, 5)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addComponent(jSliderXPositionLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSliderYPositionLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jButtonLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton11LensOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDisplaySecondOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                //.addContainerGap(23, Short.MAX_VALUE)
                ));
        jPanelLensMichelsonLayout.setVerticalGroup(
                jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFocalLensMichelson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFocalLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblXLensMichelson)
                .addComponent(txtXPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderXPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblYLensMichelson)
                .addComponent(txtYPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderYPositionLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addGroup(jPanelLensMichelsonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(jButtonDisplaySecondOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton11LensOnMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonLensMichelson, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                ));
        // END Michelson

        // BEGIN Spectremeter
        jPanelMirrorSpectometer = new javax.swing.JPanel();
        lblPhySpectometer = new javax.swing.JLabel();
        lblThetaMirrorSpectometer = new javax.swing.JLabel();
        txtPhyMirrorSpectometer = new javax.swing.JTextField();
        txtThetaMirrorSpectometer = new javax.swing.JTextField();
        buttonMirrorSpectometerLensOn = new javax.swing.JButton();
        buttonMirrorSpectometerDisplaySecondOn = new javax.swing.JButton();
        buttonMirrorSpectometerGeneral = new javax.swing.JButton();

        lblPhySpectometer.setText("Phy");

        lblThetaMirrorSpectometer.setText("Theta");

        buttonMirrorSpectometerGeneral.setText("Generate");
        buttonMirrorSpectometerGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedMirrorSpectometer(evt);
            }
        });

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerLensOn.setText("1:1 lens ON");
        buttonMirrorSpectometerLensOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnMirrorSpectometerActionPerformed(evt);
                countLenOnSpectrometer++;
                if (countLenOnSpectrometer % 2 == 0) {
                    buttonMirrorSpectometerLensOn.setText("1:1 lens OFF");
                } else {
                    buttonMirrorSpectometerLensOn.setText("1:1 lens ON");
                }
            }
        });

        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setText("Second display ON");
        buttonMirrorSpectometerDisplaySecondOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedMirrorSpectometer(evt);
                countSecondDisplaySpectrometer++;
                if (countSecondDisplaySpectrometer % 2 == 0) {
                    buttonMirrorSpectometerDisplaySecondOn.setText("Second display OFF");
                } else {
                    buttonMirrorSpectometerDisplaySecondOn.setText("Second display ON");
                }
            }
        });

        jSliderPhyMirrorSpectometer = new DoubleJSlider(-28, 28, 10, 10);
        jSliderPhyMirrorSpectometer.setValue(1);
        txtPhyMirrorSpectometer.setText(String.valueOf(jSliderPhyMirrorSpectometer.getValue()));

        jSliderPhyMirrorSpectometer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtPhyMirrorSpectometer.setText(df.format(jSliderPhyMirrorSpectometer.getScaledValue()));
                sliderGenerateActionPerformedMirrorSpectometer(evt);
            }
        });
        
        txtPhyMirrorSpectometer.addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent ke) {
                keyEventGenerateActionPerformedMirrorSpectometer(ke);
            }
        });
        
        jSliderThetaMirrorSpectometer = new DoubleJSlider(-1800, 1800, 100, 10);
        jSliderThetaMirrorSpectometer.setValue(1);
        txtThetaMirrorSpectometer.setText(String.valueOf(jSliderThetaMirrorSpectometer.getValue()));

        jSliderThetaMirrorSpectometer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DecimalFormat df = new DecimalFormat("0.####");
                txtThetaMirrorSpectometer.setText(df.format(jSliderThetaMirrorSpectometer.getScaledValue()));
                sliderGenerateActionPerformedMirrorSpectometer(evt);
            }
        });
        txtThetaMirrorSpectometer.addKeyListener(new KeyAdapter(){
            public void keyReleased(KeyEvent ke) {
                keyEventGenerateActionPerformedMirrorSpectometer(ke);
            }
        });

        javax.swing.GroupLayout jPanelMirrorSpectometerlLayout = new javax.swing.GroupLayout(jPanelMirrorSpectometer);
        jPanelMirrorSpectometer.setLayout(jPanelMirrorSpectometerlLayout);
        jPanelMirrorSpectometerlLayout.setHorizontalGroup(
                jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(5, 5, 5)
                .addComponent(lblThetaMirrorSpectometer)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(lblPhySpectometer)
                .addGap(28, 28, 28)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(txtThetaMirrorSpectometer, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addComponent(txtPhyMirrorSpectometer))))
                .addGap(5, 5, 5)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jSliderPhyMirrorSpectometer, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addComponent(jSliderThetaMirrorSpectometer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(buttonMirrorSpectometerGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorSpectometerLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonMirrorSpectometerDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE)));
        jPanelMirrorSpectometerlLayout.setVerticalGroup(
                jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblPhySpectometer)
                .addComponent(txtPhyMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderPhyMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblThetaMirrorSpectometer)
                .addComponent(txtThetaMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jSliderThetaMirrorSpectometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(145, 145, 145)
                .addGroup(jPanelMirrorSpectometerlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                .addComponent(buttonMirrorSpectometerGeneral, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorSpectometerLensOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonMirrorSpectometerDisplaySecondOn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                ));
        // END Spectremeter

        // BEGIN Fresnel
        jPanelFresnel = new javax.swing.JPanel();
        label_fresnel_width = new javax.swing.JLabel();
        label_fresnel_height = new javax.swing.JLabel();
        lblPleaseSelectFresnel = new javax.swing.JLabel();
        text_fresnel_width = new javax.swing.JTextField();
        text_fresnel_height = new javax.swing.JTextField();
        s_fresnel_width = new javax.swing.JSlider();
        s_fresnel_height = new javax.swing.JSlider();
        buttonSecondFresnel = new javax.swing.JButton();
        button11LensOnFresnel = new javax.swing.JButton();
        buttonGeneralFresnel = new javax.swing.JButton();
        buttonOpenFileFresnel = new JButton();
        buttonOpenFileFresnel.setText("Browse...");
        buttonOpenFileFresnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_openFileActionPerformedFresnel(evt);
            }
        });
        lblPleaseSelectFresnel.setText("Select the file to import.");

        buttonGeneralPhoto.setText("Generate");
        buttonGeneralPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImages != null) {
                    buttonGenerateActionPerformedProcessingPhoto(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        buttonSecondFresnel.setEnabled(false);
        buttonSecondFresnel.setText("Second display ON");
        buttonSecondFresnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesFresnel != null) {
                    buttonSecondGenerateActionPerformedFresnel(evt);
                    countSecondDisplayFresnel++;
                    if (countSecondDisplayFresnel % 2 == 0) {
                        buttonSecondFresnel.setText("Second display OFF");
                    } else {
                        buttonSecondFresnel.setText("Second display ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        button11LensOnFresnel.setEnabled(false);
        button11LensOnFresnel.setText("1:1 lens ON");
        button11LensOnFresnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesFresnel != null) {
                    button11LensOnActionPerformedFresnel(evt);
                    countLenOnFresnel++;
                    if (countLenOnFresnel % 2 == 0) {
                        button11LensOnFresnel.setText("1:1 lens OFF");
                    } else {
                        button11LensOnFresnel.setText("1:1 lens ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        buttonGeneralFresnel.setText("Generate");
        buttonGeneralFresnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesFresnel != null) {
                    buttonGenerateActionPerformedFresnel(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        label_fresnel_width.setText("X");
        label_fresnel_width.setEnabled(false);
        s_fresnel_width.setMaximum(1920);
        s_fresnel_width.setEnabled(false);
        text_fresnel_width.setPreferredSize(new java.awt.Dimension(45, 20));
        text_fresnel_height.setPreferredSize(new java.awt.Dimension(45, 20));
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_fresnel_width, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_fresnel_width, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        s_fresnel_width.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedFresnel(evt);
            }
        });
        text_fresnel_width.setEnabled(false);
        text_fresnel_height.setText("" + height_fresnel);
        text_fresnel_height.setEnabled(false);
        javax.swing.GroupLayout layoutFresnel = new javax.swing.GroupLayout(jPanelFresnel);
        jPanelFresnel.setLayout(layoutFresnel);

        layoutFresnel.setHorizontalGroup(
                layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutFresnel.createSequentialGroup()
                .addContainerGap()
                .addGap(15, 15, 15)
                .addGroup(layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layoutFresnel.createSequentialGroup()
                .addComponent(buttonGeneralFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button11LensOnFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonSecondFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layoutFresnel.createSequentialGroup()
                .addComponent(buttonOpenFileFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(lblPleaseSelectFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layoutFresnel.createSequentialGroup()
                .addComponent(text_fresnel_width, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_fresnel_width)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_fresnel_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(s_fresnel_width, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(144, Short.MAX_VALUE)));
        layoutFresnel.setVerticalGroup(
                layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layoutFresnel.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutFresnel.createSequentialGroup()
                .addGroup(layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonOpenFileFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPleaseSelectFresnel))
                .addGap(18, 18, 18)
                .addGroup(layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(label_fresnel_width, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_fresnel_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_fresnel_width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(s_fresnel_width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120)
                .addGroup(layoutFresnel.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGeneralFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondFresnel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                ))
                )));
        // END Fresnel

        // BEGIN Talbot
        jPanelTalbot = new javax.swing.JPanel();
        jPanelTalbotPhoto  = new javax.swing.JPanel();
        
        /*
         * Talbot
         */
        lblWidthYTalbot = new javax.swing.JLabel();
        lblHeightYTalbot = new javax.swing.JLabel();
        lblRotationtalbot = new javax.swing.JLabel();
        lblPosXTalbot = new javax.swing.JLabel();
        lblPosYTalbot = new javax.swing.JLabel();
        lblSpacingtalbot = new javax.swing.JLabel();
        text_width_talbot_y = new javax.swing.JTextField();
        text_height_talbot_y = new javax.swing.JTextField();
        text_rotation_talbot = new javax.swing.JTextField();
        text_position_talbot_x = new javax.swing.JTextField();
        text_position_talbot_y = new javax.swing.JTextField();
        text_talbot_spacing = new javax.swing.JTextField();
        s_talbot_width_y = new javax.swing.JSlider();
        s_talbot_height_y = new javax.swing.JSlider();
        s_talbot_rotation = new javax.swing.JSlider();
        s_talbot_positionx = new javax.swing.JSlider();
        s_talbot_pos_y = new javax.swing.JSlider();
        s_talbot_spacing = new javax.swing.JSlider();
        jLabelGraytalbot = new javax.swing.JLabel();
        text_talbot_gray = new javax.swing.JTextField();
        s_talbot_gray = new javax.swing.JSlider();
        buttonGenneratetalbot = new javax.swing.JButton();
        button11LensOntalbot = new javax.swing.JButton();
        buttonSecondDisplaytalbot = new javax.swing.JButton();
        lblWidthXTalbot = new javax.swing.JLabel();
        text_width_talbot_x = new javax.swing.JTextField();
        s_talbot_width_x = new javax.swing.JSlider();
        lblHeightXTalbot = new javax.swing.JLabel();
        text_height_talbot_x = new javax.swing.JTextField();
        s_talbot_height_x = new javax.swing.JSlider();
        lblHeightYTalbot.setText("Width Y");

        lblRotationtalbot.setText("Rotation");

        lblPosXTalbot.setText("Position X");

        lblPosYTalbot.setText("Position Y");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_width_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_width_talbot_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_width_y.setMaximum(image1.getBounds().width);
        s_talbot_width_y.setValue(100);
        s_talbot_width_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_height_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_height_talbot_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_height_y.setMaximum(9999);
        s_talbot_height_y.setValue(9999);
        s_talbot_height_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_rotation, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_rotation_talbot, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_rotation.setMaximum(180);
        s_talbot_rotation.setMinimum(-180);
        s_talbot_rotation.setValue(0);
        s_talbot_rotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_positionx, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_position_talbot_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_positionx.setMaximum(image1.getBounds().height / 2);
        s_talbot_positionx.setMinimum(-(image1.getBounds().height / 2));
        s_talbot_positionx.setValue(0);
        s_talbot_positionx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_pos_y, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_position_talbot_y, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_pos_y.setMaximum(image1.getBounds().width / 2);
        s_talbot_pos_y.setMinimum(-(image1.getBounds().width / 2));
        s_talbot_pos_y.setValue(0);
        s_talbot_pos_y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        jLabelGraytalbot.setText("Gray level");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_gray, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_talbot_gray, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_gray.setMaximum(255);
        s_talbot_gray.setValue(255);
        s_talbot_gray.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        lblSpacingtalbot.setText("Spacing");
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_spacing, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_talbot_spacing, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_spacing.setMaximum(image1.getBounds().height);
         s_talbot_spacing.setMinimum(-(image1.getBounds().height));
        s_talbot_spacing.setValue(0);
        s_talbot_spacing.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });

        bindingGroup.addBinding(binding);



        buttonGenneratetalbot.setText("Generate");
        buttonGenneratetalbot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateActionPerformedTalbot(evt);
            }
        });
        button11LensOntalbot.setEnabled(false);
        button11LensOntalbot.setText("1:1 lens ON");
        button11LensOntalbot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11LensOnTalbotActionPerformed(evt);
                //   boolean_checkLen = false;
                countLenOnTalbot++;
                if (countLenOnTalbot % 2 == 0) {
                    button11LensOntalbot.setText("1:1 lens OFF");
                } else {
                    button11LensOntalbot.setText("1:1 lens ON");
                }
            }
        });
        buttonSecondDisplaytalbot.setEnabled(false);
        buttonSecondDisplaytalbot.setText("Second display ON");
        buttonSecondDisplaytalbot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSecondGenerateActionPerformedTalbot(evt);
                countSecondDisplayTalbot++;
                if (countSecondDisplayTalbot % 2 == 0) {
                    buttonSecondDisplaytalbot.setText("Second display OFF");
                } else {
                    buttonSecondDisplaytalbot.setText("Second display ON");
                }
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_width_x, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_width_talbot_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_width_x.setMaximum(3866);
        s_talbot_width_x.setValue(3866);
        s_talbot_width_x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        lblHeightXTalbot.setText("Width X");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, s_talbot_height_x, org.jdesktop.beansbinding.ELProperty.create("${value}"), text_height_talbot_x, org.jdesktop.beansbinding.BeanProperty.create("text"));
        s_talbot_height_x.setMaximum(image1.getBounds().height);
        s_talbot_height_x.setValue(100);
        s_talbot_height_x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderGenerateActionPerformedTalbot(evt);
            }
        });
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout jPaneltalbotLayout = new javax.swing.GroupLayout(jPanelTalbot);
        jPanelTalbot.setLayout(jPaneltalbotLayout);
        jPaneltalbotLayout.setHorizontalGroup(
                jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(15, 15, 15)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPaneltalbotLayout.createSequentialGroup()
                .addComponent(lblPosXTalbot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(text_position_talbot_x, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblPosYTalbot)
                .addComponent(jLabelGraytalbot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_talbot_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_position_talbot_y))))
                .addGap(17, 17, 17)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_talbot_pos_y, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_talbot_positionx, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_talbot_gray, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblHeightYTalbot)
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addComponent(lblHeightXTalbot)
                .addGap(33, 33, 33)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_width_talbot_y, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(text_height_talbot_x, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                .addComponent(s_talbot_height_x, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addComponent(s_talbot_height_x, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_talbot_width_y, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                //.addComponent(s_talbot_width_y, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addComponent(lblRotationtalbot)
                .addGap(27, 27, 27)
                .addComponent(text_rotation_talbot, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(s_talbot_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addComponent(lblSpacingtalbot)
                .addGap(32, 32, 32)
                .addComponent(text_talbot_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(s_talbot_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(buttonGenneratetalbot, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(button11LensOntalbot, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(buttonSecondDisplaytalbot, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                //.addContainerGap(27, Short.MAX_VALUE)
                ));
        jPaneltalbotLayout.setVerticalGroup(
                jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPaneltalbotLayout.createSequentialGroup()
                .addGap(8, 8, 8))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addComponent(s_talbot_height_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
                .addGroup(jPaneltalbotLayout.createSequentialGroup()
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_height_talbot_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblHeightXTalbot))
                .addGap(6, 6, 6)))
                .addGap(2, 2, 2)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_width_talbot_y, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblHeightYTalbot))
                .addComponent(s_talbot_width_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_rotation_talbot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblRotationtalbot))
                .addComponent(s_talbot_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(s_talbot_positionx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(text_position_talbot_x, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPosXTalbot)))
                .addGap(10, 10, 10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_position_talbot_y, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPosYTalbot)
                .addComponent(s_talbot_pos_y, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_talbot_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_talbot_gray, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelGraytalbot))
                .addGap(8, 8, 8)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(text_talbot_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(s_talbot_spacing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblSpacingtalbot))
                .addGap(7, 7, 7)
                .addGroup(jPaneltalbotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGenneratetalbot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondDisplaytalbot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOntalbot, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)));
        // END Talbot
        
        // Talbot Photo
        openFile = new javax.swing.JFileChooser();
        buttonOpenFileTalbotPhoto = new javax.swing.JButton();
        lblPleaseSelectTalbotPhoto = new javax.swing.JLabel();
        buttonSecondTalbotPhoto = new javax.swing.JButton();
        button11LensOnTalbotPhoto = new javax.swing.JButton();
        buttonGeneralTalbotPhoto = new javax.swing.JButton();
        buttonOpenFileTalbotPhoto.setText("Browse...");
        buttonOpenFileTalbotPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_openFileActionPerformedTalbotPhoto(evt);
            }
        });
        lblPleaseSelectTalbotPhoto.setText("Select the file to import.");

        buttonSecondTalbotPhoto.setEnabled(false);
        buttonSecondTalbotPhoto.setText("Second display ON");
        buttonSecondTalbotPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesTalbotPhoto != null) {
                    buttonSecondGenerateActionPerformedTalbotPhoto(evt);
                    countSecondDisplayTalbotPhoto++;
                    if (countSecondDisplayTalbotPhoto % 2 == 0) {
                        buttonSecondTalbotPhoto.setText("Second display OFF");
                    } else {
                        buttonSecondTalbotPhoto.setText("Second display ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        button11LensOnTalbotPhoto.setEnabled(false);
        button11LensOnTalbotPhoto.setText("1:1 lens ON");
        button11LensOnTalbotPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesTalbotPhoto != null) {
                    button11LensOnTalbotPhotoActionPerformed(evt);
                    countLenOnTalbotPhoto++;
                    if (countLenOnTalbotPhoto % 2 == 0) {
                        button11LensOnTalbotPhoto.setText("1:1 lens OFF");
                    } else {
                        button11LensOnTalbotPhoto.setText("1:1 lens ON");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", " Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        buttonGeneralTalbotPhoto.setText("Generate");
        buttonGeneralTalbotPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (buffImagesTalbotPhoto != null) {
                    buttonGenerateActionPerformedTalbotPhoto(evt);
                } else {
                    JOptionPane.showMessageDialog(null, "Please import an images file!", "Failure", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        javax.swing.GroupLayout signalTalbotPhotoLayout = new javax.swing.GroupLayout(jPanelTalbotPhoto);
        jPanelTalbotPhoto.setLayout(signalTalbotPhotoLayout);
        signalTalbotPhotoLayout.setHorizontalGroup(
                signalTalbotPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(signalTalbotPhotoLayout.createSequentialGroup()
                .addContainerGap()
                .addGap(15, 15, 15)
                .addGroup(signalTalbotPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(signalTalbotPhotoLayout.createSequentialGroup()
                .addComponent(buttonGeneralTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button11LensOnTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonSecondTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(signalTalbotPhotoLayout.createSequentialGroup()
                .addComponent(buttonOpenFileTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(lblPleaseSelectTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(236, 236, 236)))));
        signalTalbotPhotoLayout.setVerticalGroup(
                signalTalbotPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signalTalbotPhotoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(signalTalbotPhotoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(signalTalbotPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonOpenFileTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPleaseSelectTalbotPhoto))
                .addGap(148, 148, 148)
                .addGroup(signalTalbotPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(buttonGeneralTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button11LensOnTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(buttonSecondTalbotPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                )));

        tabbedControl.setBounds(580, 0, 665, 355);
        layoutControl.add(tabbedControl, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanelPatternLayout = new javax.swing.GroupLayout(jPanelPattern);
        jPanelPattern.setLayout(jPanelPatternLayout);
        jPanelPatternLayout.setHorizontalGroup(
                jPanelPatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 560, Short.MAX_VALUE));
        jPanelPatternLayout.setVerticalGroup(
                jPanelPatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 290, Short.MAX_VALUE));
        panelPattern.setBounds(0, 0, 568, 355);
        //  BEGIN show full screen
        layoutControl.add(panelPattern, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layoutControl.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                patternFrame.show();
            }
        });
        //  END show full screen
        
        tabbedDesLog.addTab("Description", null);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);
        
        // BEGIN show full screen for desTelephotoLens
        desTelephotoLens.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desTelephotoLens.getText());
                
                    descriptionFullScreen.setBackground(Color.WHITE);
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desTelephotoLens
        
        // BEGIN show full screen for desMicroscope
        desMicroscope.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desMicroscope.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    
                   descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desMicroscope
        
        // BEGIN show full screen for desAberration
        desAberration.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desAberration.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desAberration
        
        // BEGIN show full screen for desMichelson
        desMichelson.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desMichelson.getText());
                
                    descriptionFullScreen.setBackground(Color.WHITE);
                    descriptionFullScreen.setForeground(Color.WHITE);
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desMichelson
        
        // BEGIN show full screen for desDiffaction
        desDiffaction.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desDiffaction.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desDiffaction
        // BEGIN show full screen for desSpectrometer
        desSpectrometer.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desSpectrometer.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desSpectrometer
        // BEGIN show full screen for desSignalProcessing
        desSignalProcessing.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desSignalProcessing.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desSignalProcessing
        // BEGIN show full screen for desPhaseRetarder
        desPhaseRetarder.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desPhaseRetarder.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desPhaseRetarder
        // BEGIN show full screen for desTalbotImage
        desTalbotImage.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desTalbotImage.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desTalbotImage
        // BEGIN show full screen for desWavefront
        desWavefront.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desWavefront.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desWavefront
        // BEGIN show full screen for desWavelength
        desWavelength.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desWavelength.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desWavelength
        // BEGIN show full screen for desCalibration
        desCalibration.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desCalibration.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desCalibration
        // BEGIN show full screen for desImportfile
        desImportfile.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                desFullScreen = new javax.swing.JLabel();
                descriptionFullScreen = new JFrame("JDC Education Kit - Description full screen");
                
                if(layoutDescriptionFullOpen ==  0){
                    desFullScreen.setText(desImportfile.getText());
                
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    descriptionFullScreen.setIconImage(img);
                    descriptionFullScreen.getContentPane().add(desFullScreen);
                    descriptionFullScreen.pack();
                    layoutDescriptionFullOpen++;

                    descriptionFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    descriptionFullScreen.setVisible(true);
                   
                    descriptionFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    descriptionFullScreen.setAlwaysOnTop(true);
                    descriptionFullScreen.setResizable(true);
                    descriptionFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                    }
                    });
                    descriptionFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDescriptionFullOpen = 0;
                            descriptionFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for desImportfile

        //tabbedDiagram.addTab("Diagram", null);
        layoutDiagram.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tabbedDiagram.setBounds(580, 580, 665, 335);
        layoutDiagram.add(tabbedDiagram, javax.swing.JLayeredPane.DEFAULT_LAYER);
        // BEGIN show full screen for layoutDiagram
        layoutDiagram.addMouseListener(new ClickListener() {
            public void doubleClick(MouseEvent e) {
                diagramFullScreen = new JFrame("JDC Education Kit - Diagram full screen");
                
                if(layoutDiagramFullOpen ==  0){
                    lblDiagramFull.setIcon(lblDiagram.getIcon());
                    lblDiagramFull.setText(lblDiagram.getText());
                    diagramLensFull.add(lblDiagramFull);
                    layoutDiagramFull.add(diagramLensFull);

                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                    Toolkit kit = Toolkit.getDefaultToolkit();
                    Image img = kit.createImage(url);
                    diagramFullScreen.setIconImage(img);
                    diagramFullScreen.getContentPane().add(layoutDiagramFull);
                    diagramFullScreen.pack();
                    layoutDiagramFullOpen++;

                    diagramFullScreen.setBounds(0,0,screenSize.width, screenSize.height);
                    diagramFullScreen.setVisible(true);

                    diagramFullScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    diagramFullScreen.setAlwaysOnTop(true);
                    diagramFullScreen.setResizable(true);
                    diagramFullScreen.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            layoutDiagramFullOpen = 0;
                            diagramFullScreen.dispose();
                    }
                    });
                    diagramFullScreen.addMouseListener(new ClickListener() {
                        public void doubleClick(MouseEvent e) {
                            layoutDiagramFullOpen = 0;
                            diagramFullScreen.dispose();
                        }
                   });
                } else {
                    JOptionPane.showMessageDialog(null, "This window is already open");
                }
            }
        });
        //  END show full screen for layoutDiagram

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(layoutControl, javax.swing.GroupLayout.DEFAULT_SIZE, 1245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tabbedDesLog, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(layoutDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(layoutControl, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(tabbedDesLog, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(layoutDiagram, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))) //.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                //.addGap(8, 8, 8)
                //.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, true)
                //.addComponent(tabbedDesLog, javax.swing.GroupLayout.DEFAULT_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                //.addComponent(layoutDiagram, javax.swing.GroupLayout.DEFAULT_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                //.addGap(5, 5, 5)
                ));

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    public void jMenuItemNoSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNoSelectActionPerformed
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();
        lblDiagram.removeAll();
        
        lblDiagram.setIcon(null);
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);

        tabbedDesLog.addTab("Description", desNoSelect);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

    }//GEN-LAST:event_jMenuItemNoSelectActionPerformed

    public void jMenuItemTelephotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTelephotoActionPerformed
//        changeLabTitle(labTitleTele);
        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        jTabbedPaneOptics.addTab("Gray Level", panelPhase);
        jTabbedPaneOptics.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                if (magFrameLenon != null) {
                    magFrameLenon.dispose();
                }
            }
        });

        //tabbedDesLog.addTab("Description", desTelephotoLens);
        jScrollDes.setViewportView(desTelephotoLens);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp_1_2_3.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
        //setTabPanelEnable(jTabbedPaneOptics, true);

    }//GEN-LAST:event_jMenuItemTelephotoActionPerformed

    public void jMenuItemMicroscopeActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Photo", panelSignalPhoto);

        //tabbedDesLog.addTab("Description", desMicroscope);
        jScrollDes.setViewportView(desMicroscope);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp_1_2_3.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemAberrationActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Beam Steerer", jPanelMirror);

        //tabbedDesLog.addTab("Description", desAberration);
        jScrollDes.setViewportView(desAberration);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp_1_2_3.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemMichelsonActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Lens", jPanelLensMichelson);
        jTabbedPaneOptics.addTab("Cylindrical", jPanelCyllindrical);
        jTabbedPaneOptics.addTab("Mirror", jPanelMirror);
        jTabbedPaneOptics.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                jButton11LensOnMichelson.setEnabled(false);
                jButtonDisplaySecondOnMichelson.setEnabled(false);
                buttonCyllinLensOn.setEnabled(false);
                buttonCyllinDisplaySecondOn.setEnabled(false);
                buttonMirrorLensOn.setEnabled(false);
                buttonMirrorDisplaySecondOn.setEnabled(false);
            }
        });

        //tabbedDesLog.addTab("Description", desMichelson);
        jScrollDes.setViewportView(desMichelson);
        tabbedDesLog.addTab("Description", jScrollDes);
        
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp4michelson.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemDiffractionActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Single Slit", panelSlit);
        jTabbedPaneOptics.addTab("Double Slit", panelDoubleSlit);
        jTabbedPaneOptics.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                buttong11LensOnSlit.setEnabled(false);
                buttonSecondDisplaySlit.setEnabled(false);
                buttong11LensOnDoubleSlit.setEnabled(false);
                buttonSecondDisplayDoubleSlit.setEnabled(false);
            }
        });

        //tabbedDesLog.addTab("Description", desDiffaction);
        jScrollDes.setViewportView(desDiffaction);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp5diffraction.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemSpectrometerActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Mirror", jPanelMirrorSpectometer);

        //tabbedDesLog.addTab("Description", desSpectrometer);
        jScrollDes.setViewportView(desSpectrometer);
        tabbedDesLog.addTab("Description", jScrollDes);
        
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp6spectrometer.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemSignalProcessingActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Signal processing", panelSignal);
        jTabbedPaneOptics.addTab("Photo", panelSignalPhoto);
        jTabbedPaneOptics.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                buttonSecondPhoto.setEnabled(false);
                button11LensOnPhoto.setEnabled(false);
                button11LensOnProcessing.setEnabled(false);
                buttonSecondDisplayProcessing.setEnabled(false);
            }
        });
        jScrollDes.setViewportView(desSignalProcessing);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp7signalprocessing.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemPhaseShiftingActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Phase retarder", panelPhase);

        //tabbedDesLog.addTab("Description", desPhaseRetarder);
        jScrollDes.setViewportView(desPhaseRetarder);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp8phaseshifting.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemTalbotImagesActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Talbot", jPanelTalbot);
        jTabbedPaneOptics.addTab("Talbot photo", jPanelTalbotPhoto);

        //tabbedDesLog.addTab("Description", desTalbotImage);
        jScrollDes.setViewportView(desTalbotImage);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp9talbot.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemWavefrontActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Lens", jPanelCyllindrical1);
        jTabbedPaneOptics.addTab("Cylindrical", jPanelCyllindrical);
        jTabbedPaneOptics.addTab("Mirror", jPanelMirror);
        jTabbedPaneOptics.addTab("Fresnel Transform", jPanelFresnel);
        jTabbedPaneOptics.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                jButton11LensOn.setEnabled(false);
                jButtonDisplaySecondOn.setEnabled(false);
                buttonSecondFresnel.setEnabled(false);
                button11LensOnFresnel.setEnabled(false);
                buttonCyllinLensOn.setEnabled(false);
                buttonCyllinDisplaySecondOn.setEnabled(false);
                buttonMirrorLensOn.setEnabled(false);
                buttonMirrorDisplaySecondOn.setEnabled(false);
            }
        });

        //tabbedDesLog.addTab("Description", desWavefront);
        jScrollDes.setViewportView(desWavefront);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(new ImageIcon(getClass().getResource("/resources/diagram/exp10wavefrontmodulation.png")));
        lblDiagram.setText(null);
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }

    public void jMenuItemWavelengthActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPaneOptics.removeAll();
        layoutDiagram.removeAll();
        diagramLens.removeAll();
        tabbedDesLog.removeAll();

        buttonMicroscopeLensOn.setEnabled(false);
        buttonMicroscopeDisplaySecondOn.setEnabled(false);

        buttonCyllinLensOn.setEnabled(false);
        buttonCyllinDisplaySecondOn.setEnabled(false);

        buttonMirrorLensOn.setEnabled(false);
        buttonMirrorDisplaySecondOn.setEnabled(false);

        buttong11LensOnSlit.setEnabled(false);
        buttonSecondDisplaySlit.setEnabled(false);

        buttong11LensOnDoubleSlit.setEnabled(false);
        buttonSecondDisplayDoubleSlit.setEnabled(false);

        button11LensOnProcessing.setEnabled(false);
        buttonSecondDisplayProcessing.setEnabled(false);

        buttonSecondPhase.setEnabled(false);
        button11LensOnPhase.setEnabled(false);

        buttonSecondPhoto.setEnabled(false);
        button11LensOnPhoto.setEnabled(false);

        jButton11LensOnMichelson.setEnabled(false);
        jButtonDisplaySecondOnMichelson.setEnabled(false);

        buttonMirrorSpectometerLensOn.setEnabled(false);
        buttonMirrorSpectometerDisplaySecondOn.setEnabled(false);

        buttonSecondFresnel.setEnabled(false);
        button11LensOnFresnel.setEnabled(false);
        jButton11LensOn.setEnabled(false);
        jButtonDisplaySecondOn.setEnabled(false);

        jTabbedPaneOptics.addTab("Lens", null);

        //tabbedDesLog.addTab("Description", desWavelength);
        jScrollDes.setViewportView(desWavelength);
        tabbedDesLog.addTab("Description", jScrollDes);
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jTextAreaLog.setFont(new Font("Courier New", Font.PLAIN, 12));
        jScrollPane2.setViewportView(jTextAreaLog);
        tabbedDesLog.addTab("Log", jScrollPane2);

        lblDiagram.setIcon(null);
        lblDiagram.setText("No Diagram available");
        diagramLens.add(lblDiagram);
        layoutDiagram.add(diagramLens);
    }
    // Optical arguments, which will be parsed before reassigning the values
    private double xoffMicroscope = 0.0, yoffMicroscope = 0.0, focalMicroscope = 1.0;
    private double xoff = 0.0, yoff = 0.0, focal = 522;
    private double xoffMichelson = 0.0, yoffMichelson = 0.0, focalMichelson = 522;
    private double xoffCyllin = 0, yoffCyllin = 0, focalCyllin = 1;
    // Mirror
    private double phy = 1, theta = 1;
    // Spectrometer
    private double phySpectrometer = 522, thetaSpectrometer = 522;
    private double d_widthX = Double.valueOf(image1.getBounds().width), d_heightX = 100, d_rotation = 0, d_postionX = 0, d_grayLevel = 255, d_spacing = 400;
    // double slit
    private double d_widthX_double = Double.valueOf(image1.getBounds().width), d_heightX_double = 100, d_rotation_double = 0, d_postionX_double = 0, d_grayLevel_double = 255, d_spacing_double = 400;
    //Processing
    private double processing_widthX = Double.valueOf(image1.getBounds().width), processing_widthY = 100, processing_heightX = 100, processing_heightY = Double.valueOf(image1.getBounds().height), processing_rotation = 0, processing_positionX = 0, processing_positionY = 0, processing_grayLevel = 255, processing_spacing = 400;
    private double zoom = 100.0, grayLevel = 255;
    //Fresnel
    private double width_fresnel = 1920, height_fresnel = 1080;
    // Calibration
    private double xoffCalibration = 0, yoffCalibration = 50, focalCalibration = 522;
    //Talbot
    private double talbot_widthX = Double.valueOf(image1.getBounds().width), talbot_widthY = 100, talbot_heightX = 100, talbot_heightY = Double.valueOf(image1.getBounds().height), talbot_rotation = 0, talbot_positionX = 0, talbot_positionY = 0, talbot_grayLevel = 255, talbot_spacing = 400;
     // Import file
    private double k = 0, r = 0, e = 0, kr = 0, width_importFile = 0, rotation_importFile = 0, position_importFile = 0, grayLevel_importFile = 0;
    private String formula = "";
    private boolean parseArguments() {
        boolean ret = false;
        try {
//	    	double xoff = Double.valueOf(textXpos.getText());
//	    	double yoff = Double.valueOf(textYpos.getText());
//	    	double focal = Double.valueOf(sliderFocal.getValue());

            //lens
            double xoff = Double.valueOf(txtXPositionLens.getText());
            double yoff = Double.valueOf(txtYPositionLens.getText());
            double focal = Double.valueOf(txtFocalLens.getText());
            // Michelson
            double xoffMi = Double.valueOf(txtXPositionLensMichelson.getText());
            double yoffMi = Double.valueOf(txtYPositionLensMichelson.getText());
            double focalMi = Double.valueOf(txtFocalLensMichelson.getText());
            //Cyllin
            double xoffCyllin = Double.valueOf(txtXPositionCyllin.getText());
            double yoffCyllin = Double.valueOf(txtYPositionCyllin.getText());
            double focalCyllin = Double.valueOf(txtFocalCyllin.getText());
            //mirro
            double phyoff = Double.valueOf(txtPhyMirror.getText());
            double thetaoff = Double.valueOf(txtThetaMirror.getText());
            //microsope
            double xoffMicroscope = Double.valueOf(txtXPositionMicroscope.getText());
            double yoffMicroscope = Double.valueOf(txtYPositionMicroscope.getText());
            double focalMicroscope = Double.valueOf(txtFocalMicroscope.getText());
            //slit
            double widthSlit = Double.valueOf(s_single_width.getValue());
            double heightSlit = Double.valueOf(s_single_height.getValue());
            double postionSlit = Double.valueOf(s_single_position.getValue());
            double rotationSlit = Double.valueOf(s_single_rotation.getValue());
            double grayLevelSlit = Double.valueOf(s_single_gray.getValue());
            double spacingSlit = Double.valueOf(s_single_spacing.getValue());
            // double
            double widthDoubleSlit = Double.valueOf(s_single_widthDoubleSlit.getValue());
            double heightDoubleSlit = Double.valueOf(s_single_heightDoubleSlit.getValue());
            double postionDoubleSlit = Double.valueOf(s_single_positionDoubleSlit.getValue());
            double rotationDoubleSlit = Double.valueOf(s_single_rotationDoubleSlit.getValue());
            double grayLevelDoubleSlit = Double.valueOf(s_single_grayDoubleSlit.getValue());
            double spacingDoubleSlit = Double.valueOf(s_single_spacingDoubleSlit.getValue());
            // Spectrometer
            double phySpec = Double.valueOf(txtPhyMirrorSpectometer.getText());
            double thetaSpec = Double.valueOf(txtThetaMirrorSpectometer.getText());
            // Calibration
//            double xoffCali = Double.valueOf(txtXPositionCalibration.getText());
//            double yoffCali = Double.valueOf(txtYPositionCalibration.getText());
//            double focalCali= Double.valueOf(txtFocalCalibration.getText());

            //Processing
            processing_widthX = Double.valueOf(s_processing_width_x.getValue());
            processing_widthY = Double.valueOf(s_processing_width_y.getValue());
            processing_heightX = Double.valueOf(s_processing_height_x.getValue());
            processing_heightY = Double.valueOf(s_processing_height_y.getValue());
            processing_rotation = Double.valueOf(s_processing_rotation.getValue());
            processing_positionX = Double.valueOf(s_processing_positionx.getValue());
            processing_positionY = Double.valueOf(s_processing_pos_y.getValue());
            processing_grayLevel = Double.valueOf(s_processing_gray.getValue());
            processing_spacing = Double.valueOf(s_processing_spacing.getValue());
            
            //Talbot
            talbot_widthX = Double.valueOf(s_talbot_width_x.getValue());
            talbot_widthY = Double.valueOf(s_talbot_width_y.getValue());
            talbot_heightX = Double.valueOf(s_talbot_height_x.getValue());
            talbot_heightY = Double.valueOf(s_talbot_height_y.getValue());
            talbot_rotation = Double.valueOf(s_talbot_rotation.getValue());
            talbot_positionX = Double.valueOf(s_talbot_positionx.getValue());
            talbot_positionY = Double.valueOf(s_talbot_pos_y.getValue());
            talbot_grayLevel = Double.valueOf(s_talbot_gray.getValue());
            talbot_spacing = Double.valueOf(s_talbot_spacing.getValue());

            width_fresnel = Double.valueOf(text_fresnel_width.getText());
            height_fresnel = Double.valueOf(text_fresnel_height.getText());
            
            // Import file
            String uImportFile = txtFormula.getText();
            double kImportFile = Double.valueOf(txtKImportFile.getText());
            double rImportFile= Double.valueOf(txtRImportFile.getText());
            double eImportFile = Double.valueOf(txtE1ImportFile.getText());
            double krImportFile= Double.valueOf(txtK1RImportFile.getText());
            double widthImportFile = Double.valueOf(txtWidthImportFile.getText());
            double positionImportFile = Double.valueOf(txtPositionImportFile.getText());
            double rotationImportFile= Double.valueOf(txtRotationImportFile.getText());
            double grayImportFile = Double.valueOf(txtGrayLevelImportFile.getText());

            //phase
            zoom = Double.valueOf(s_phase_zoom.getValue());
            ret = true;
            this.xoff = xoff;
            this.yoff = yoff;
            this.focal = focal;

            this.xoffMichelson = xoffMi;
            this.yoffMichelson = yoffMi;
            this.focalMichelson = focalMi;

            this.xoffMicroscope = xoffMicroscope;
            this.yoffMicroscope = yoffMicroscope;
            this.focalMicroscope = focalMicroscope;

            this.xoffCyllin = xoffCyllin;
            this.yoffCyllin = yoffCyllin;
            this.focalCyllin = focalCyllin/10;

            this.d_widthX = widthSlit;
            this.d_heightX = heightSlit;
            this.d_postionX = postionSlit;
            this.d_rotation = rotationSlit;
            this.d_grayLevel = grayLevelSlit;
            this.d_spacing = spacingSlit;

            this.d_widthX_double = widthDoubleSlit;
            this.d_heightX_double = heightDoubleSlit;
            this.d_postionX_double = postionDoubleSlit;
            this.d_rotation_double = rotationDoubleSlit;
            this.d_grayLevel_double = grayLevelDoubleSlit;
            this.d_spacing_double = spacingDoubleSlit;

            this.phy = phyoff;
            this.theta = thetaoff;

            this.thetaSpectrometer = thetaSpec;
            this.phySpectrometer = phySpec;
            
//            this.xoffCalibration = xoffCali;
//            this.yoffCalibration = yoffCali;
//            this.focalCalibration = focalCali;
            
            // Import file
            this.formula = uImportFile;
            this.k = kImportFile;
            this.r = rImportFile;
            this.e = eImportFile;
            this.kr = krImportFile;
            this.width_importFile = widthImportFile;
            this.position_importFile = positionImportFile;
            this.rotation_importFile = rotationImportFile;
            this.position_importFile = grayImportFile;
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, warnings);
            textXpos.setText(String.valueOf(this.yoff));
            textYpos.setText(String.valueOf(this.yoff));
            textFocal.setText(String.valueOf(this.focal));
        }
        return ret;
    }
    private static BufferedImage buffImages = null;
    private static BufferedImage buffImagesFresnel = null;
    private static BufferedImage buffImagesTalbotPhoto = null;
    private static BufferedImage buffImagesImportfile = null;
    private static BufferedImage buffImagesCalibration = null;

    private File browseForFile(String current) {
    	// file filter
    	class TXTFilter extends FileFilter {
    	    public boolean accept(File filename) {
    	        return filename.isDirectory() || filename.getName().toLowerCase().endsWith(".jpg");
    	    }

    	    public String getDescription() {
    	        return "TXT";
    	    }
    	}

            JFileChooser fileopen = new JFileChooser(new File(current));
            fileopen.setFileFilter(new TXTFilter());
            int ret = fileopen.showDialog(null, "Select");
            File file = null;
            if(ret == 0) {
                    file = fileopen.getSelectedFile();
            }
            return file;
    }
    private void b_openFileActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnVal = openFile.showOpenDialog(this);
        if (returnVal == openFile.APPROVE_OPTION) {
            File file = openFile.getSelectedFile();
            String ext = "";
            String extension = file.getName();
            extension = extension.toLowerCase();
            if (extension.contains("jpg")) {
                ext = ".jpg";
            }
            if (extension.contains("png")) {
                ext = ".png";
            }
            if (extension.contains("gif")) {
                ext = ".gif";
            }
            if (extension.contains("wbmp")) {
                ext = ".wbmp";
            }
            if (extension.contains("jpeg")) {
                ext = ".jpeg";
            }
            if (extension.contains("bmp")) {
                ext = ".bmp";
            }
            if (ext.equals("")) {
                JOptionPane.showMessageDialog(null, "Formats incorrect!", "Failure", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    buffImages = ImageIO.read(new File(file.getAbsolutePath()));
                    //String ext = File.probeContentType(file.getAbsolutePath());
                    PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                    //  image.updatePhaseRetarderParameter(zoom, grayLevel);
                    image.signalPhoto(buffImages);
                    EduPatternShowOn.updateLensPatternPattern(image, genLogPhase());
                    imageGenerated = true;
                } catch (IOException ex) {
                    ex.printStackTrace();
                    //System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }

    }
    
    private void openFileActionPerformedCalibration(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnVal = openFile.showOpenDialog(this);
        if (returnVal == openFile.APPROVE_OPTION) {
            File file = openFile.getSelectedFile();
            String ext = "";
            String extension = file.getName();
            extension = extension.toLowerCase();
            if (extension.contains("jpg")) {
                ext = ".jpg";
            }
            if (extension.contains("png")) {
                ext = ".png";
            }
            if (extension.contains("gif")) {
                ext = ".gif";
            }
            if (extension.contains("wbmp")) {
                ext = ".wbmp";
            }
            if (extension.contains("jpeg")) {
                ext = ".jpeg";
            }
            if (extension.contains("bmp")) {
                ext = ".bmp";
            }
            if (ext.equals("")) {
                JOptionPane.showMessageDialog(null, "Formats incorrect!", "Failure", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    buffImagesCalibration = ImageIO.read(new File(file.getAbsolutePath()));
                    //String ext = File.probeContentType(file.getAbsolutePath());
                    PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                    image.paintFineTuning(buffImagesCalibration);
                    EduPatternShowOn.updateLensPatternPattern(image, "");
                    imageGenerated = true;
                } catch (IOException ex) {
                    ex.printStackTrace();
                    //System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }

    }

    private void b_openFileActionPerformedFresnel(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnVal = openFile.showOpenDialog(this);
        if (returnVal == openFile.APPROVE_OPTION) {
            File file = openFile.getSelectedFile();
            String ext = "";
            String extension = file.getName();
            extension = extension.toLowerCase();
            //System.out.println("Extenten : " + extension);
            if (extension.contains("jpg")) {
                ext = ".jpg";
            }
            if (extension.contains("png")) {
                ext = ".png";
            }
            if (extension.contains("gif")) {
                ext = ".gif";
            }
            if (extension.contains("wbmp")) {
                ext = ".wbmp";
            }
            if (extension.contains("jpeg")) {
                ext = ".jpeg";
            }
            if (extension.contains("bmp")) {
                ext = ".bmp";
            }
            if (ext.equals("")) {
                JOptionPane.showMessageDialog(null, "Formats incorrect!", "Failure", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    buffImagesFresnel = ImageIO.read(new File(file.getAbsolutePath()));
                    //String ext = File.probeContentType(file.getAbsolutePath());
                    PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                    image.updateFresnelParameter(buffImagesFresnel.getWidth(), buffImagesFresnel.getHeight());
                    image.fresnel(buffImagesFresnel);
                    EduPatternShowOn.updateLensPatternPattern(image, genLogPhase());
                    text_fresnel_width.setText("" + buffImagesFresnel.getWidth());
                    text_fresnel_width.setEnabled(true);
                    text_fresnel_height.setText("" + buffImagesFresnel.getHeight());
                    text_fresnel_height.setEnabled(true);
                    label_fresnel_width.setEnabled(true);
                    s_fresnel_width.setEnabled(true);
                    imageGenerated = true;
                } catch (IOException ex) {
                    ex.printStackTrace();
                    //System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }

    }
    
    private void b_openFileActionPerformedTalbotPhoto(java.awt.event.ActionEvent evt) {
        int returnVal = openFile.showOpenDialog(this);
        if (returnVal == openFile.APPROVE_OPTION) {
            File file = openFile.getSelectedFile();
            String ext = "";
            String extension = file.getName();
            extension = extension.toLowerCase();
            if (extension.contains("jpg")) {
                ext = ".jpg";
            }
            if (extension.contains("png")) {
                ext = ".png";
            }
            if (extension.contains("gif")) {
                ext = ".gif";
            }
            if (extension.contains("wbmp")) {
                ext = ".wbmp";
            }
            if (extension.contains("jpeg")) {
                ext = ".jpeg";
            }
            if (extension.contains("bmp")) {
                ext = ".bmp";
            }
            if (ext.equals("")) {
                JOptionPane.showMessageDialog(null, "Formats incorrect!", "Failure", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    buffImagesTalbotPhoto = ImageIO.read(new File(file.getAbsolutePath()));
                    //String ext = File.probeContentType(file.getAbsolutePath());
                    PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                    //  image.updatePhaseRetarderParameter(zoom, grayLevel);
                    image.paintTalbotPhoto(buffImagesTalbotPhoto);
                    EduPatternShowOn.updateLensPatternPattern(image, genLogPhase());
                    imageGenerated = true;
                } catch (IOException ex) {
                    ex.printStackTrace();
                    //System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }
    
//    public void logString(String msg) {
//        jTextAreaLog.append(msg + System.getProperty("line.separator"));
//        jTextAreaLog.setCaretPosition(jTextAreaLog.getText().length() - 1);
//
//        // start logging if user chose to
//        if (EduPatternShowOn.logging == 1) {
//            try {
//                BufferedWriter logFileOut = new BufferedWriter(new FileWriter("JDCedukit_ui.log"));
//                jTextAreaLog.write(logFileOut);
//                logFileOut.flush();
//            } catch (Exception e) {
//            }
//        }
//    }
    public void setLog(String msg) {
        jTextAreaLog.append(msg + System.getProperty("line.separator"));
    }

    private String genLogLen() {
        return String.format(logmessageLen, Double.toString(focal), Double.toString(xoff), Double.toString(yoff));
    }

    private String genLogLensMichelson() {
        return String.format(logmessageLensMichelson, Double.toString(focalMichelson), Double.toString(xoffMichelson), Double.toString(yoffMichelson));
    }

    private String genLogMicroscope() {
        return String.format(logmessageMicroscope, Double.toString(focalMicroscope), Double.toString(xoffMicroscope), Double.toString(yoffMicroscope));
    }

    private String genLogCyllin() {
        return String.format(logmessageCyllin, Double.toString(focalCyllin), Double.toString(xoffCyllin), Double.toString(yoffCyllin));
    }

    private String genLogMirror() {
        return String.format(logmessageMirror, Double.toString(phy), Double.toString(theta));
    }

    private String genLogSlit() {
        return String.format(logmessageSlit, Double.toString(d_heightX), Double.toString(d_rotation), Double.toString(d_postionX), Double.toString(d_grayLevel));
    }

    private String genLogDoubleSlit() {
        return String.format(logmessageDoubleSlit, Double.toString(d_heightX_double), Double.toString(d_rotation_double), Double.toString(d_postionX_double), Double.toString(d_grayLevel_double), Double.toString(d_spacing_double));
    }

    private String genLogProcessing() {
        return String.format(logmessageProcessing, Double.toString(processing_heightX), Double.toString(processing_widthY), Double.toString(processing_rotation), Double.toString(processing_positionX), Double.toString(processing_positionY), Double.toString(processing_grayLevel), Double.toString(processing_spacing));
    }
    
    private String genLogTalbot() {
        return String.format(logmessageTalbot, Double.toString(talbot_heightX), Double.toString(talbot_widthY), Double.toString(talbot_rotation), Double.toString(talbot_positionX), Double.toString(talbot_positionY), Double.toString(talbot_grayLevel), Double.toString(talbot_spacing));
    }

    private String genLogPhase() {
        return String.format(logmessagePhase, Double.toString(zoom));
    }

    private String genLogMirrorSpectrometer() {
        return String.format(logmessageMirrorSpectrometer, Double.toString(phySpectrometer), Double.toString(thetaSpectrometer));
    }
    private String genLogCalibration() {
        return String.format(logmessageCalibration, Double.toString(focalCalibration), Double.toString(xoffCalibration), Double.toString(yoffCalibration));
    }

    // Lens
    private void buttonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            jButton11LensOn.setEnabled(true);
            jButtonDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            EduPatternShowOn.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformed

    private void button11LensOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            EduPatternShowOn.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
//             LabelGlassPane glass = new LabelGlassPane();
//            //glass.setCursor(cursor);
//            patternFrame.setGlassPane(glass);
//            glass.setVisible(true);

            if (countLenOnTelephoto % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.setResizable(false);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnTelephoto--;
                            jButton11LensOn.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }
        }

    }//GEN-LAST:event_button11LensOnActionPerformed

    private void buttonSecondGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayTelephoto++;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateLensParameter(xoff, yoff, focal);
                image.paintLens();
                EduPatternShowOn.updateLensPattern(image, genLogLen());
                setLog(genLogLen());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayTelephoto % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformed

    private void sliderGenerateActionPerformed(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformed
        actionTag = "Len";
        if (parseArguments()) {
            jButton11LensOn.setEnabled(true);
            jButtonDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            EduPatternShowOn.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformed
    // END Lens
  /*
     * Fresnel
     */

    private void buttonGenerateActionPerformedFresnel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformed
        actionTag = "Fresnel";
        if (parseArguments()) {
            button11LensOnFresnel.setEnabled(true);
            buttonSecondFresnel.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateFresnelParameter(width_fresnel, height_fresnel);
            image.fresnel(buffImagesFresnel);
            EduPatternShowOn.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformed

    private void button11LensOnActionPerformedFresnel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnActionPerformed
        actionTag = "Fresnel";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateFresnelParameter(width_fresnel, height_fresnel);
            image.fresnel(buffImagesFresnel);
            EduPatternShowOn.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;

            if (countLenOnFresnel % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.setResizable(false);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnFresnel--;
                            button11LensOnFresnel.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }
        }

    }//GEN-LAST:event_button11LensOnActionPerformed

    private void buttonSecondGenerateActionPerformedFresnel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformed
        actionTag = "Fresnel";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayFresnel--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateFresnelParameter(width_fresnel, height_fresnel);
                image.fresnel(buffImagesFresnel);
                EduPatternShowOn.updateLensPattern(image, genLogLen());
                setLog(genLogLen());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayFresnel % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformed

    private void sliderGenerateActionPerformedFresnel(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformed
        actionTag = "Fresnel";
        if (parseArguments()) {
            button11LensOnFresnel.setEnabled(true);
            buttonSecondFresnel.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            float IMG_HEIGHT = 0;
            try {
                IMG_HEIGHT = (float) buffImagesFresnel.getHeight() / ((float) buffImagesFresnel.getWidth() / (float) width_fresnel);
                text_fresnel_height.setText("" + (int) IMG_HEIGHT);
            } catch (Exception e) {
            }
            image.updateFresnelParameter(width_fresnel, IMG_HEIGHT);
            image.fresnel(buffImagesFresnel);
            EduPatternShowOn.updateLensPatternPattern(image, genLogLen());
            setLog(genLogLen());
            imageGenerated = true;
        }
    }
    // Lens Michelson

    private void buttonGenerateActionPerformedMichelSon(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMichelSon
        actionTag = "LensMichelson";
        if (parseArguments()) {
            jButton11LensOnMichelson.setEnabled(true);
            jButtonDisplaySecondOnMichelson.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
            image.paintLensMichelson();
            EduPatternShowOn.updateLensPatternPattern(image, genLogLensMichelson());
            setLog(genLogLensMichelson());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMichelSon

    private void button11LensOnMichelsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnMichelsonActionPerformed
        actionTag = "LensMichelson";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
            image.paintLensMichelson();
            EduPatternShowOn.updateLensPatternPattern(image, genLogLensMichelson());
            setLog(genLogLensMichelson());
            imageGenerated = true;

            if (countLenOnMichelson % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.setResizable(false);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnMichelson--;
                            jButton11LensOnMichelson.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnMichelsonActionPerformed

    private void buttonSecondGenerateActionPerformedMichelSon(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedMichelSon
        actionTag = "LensMichelson";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayMichelson--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
                image.paintLensMichelson();
                EduPatternShowOn.updateLensPattern(image, genLogLensMichelson());
                setLog(genLogLensMichelson());
                imageGenerated = true;
                if (countSecondDisplayMichelson % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedMichelSon

    private void sliderGenerateActionPerformedLensMichelSon(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedLensMichelSon
        actionTag = "LensMichelson";
        if (parseArguments()) {
            jButton11LensOnMichelson.setEnabled(true);
            jButtonDisplaySecondOnMichelson.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensMichelsonParameter(xoffMichelson, yoffMichelson, focalMichelson);
            image.paintLensMichelson();
            EduPatternShowOn.updateLensPatternPattern(image, genLogLensMichelson());
            setLog(genLogLensMichelson());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedLensMichelSon

    // Microscope
    private void buttonGenerateActionPerformedMicroscope(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMicroscope
        actionTag = "Microscope";
        if (parseArguments()) {
            buttonMicroscopeLensOn.setEnabled(true);
            buttonMicroscopeDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
            image.paintMicroscope();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMicroscope());
            setLog(genLogMicroscope());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMicroscope

    private void button11LensOnMicroscopeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnMicroscopeActionPerformed
        actionTag = "Microscope";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
            image.paintMicroscope();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMicroscope());
            setLog(genLogMicroscope());
            imageGenerated = true;

            if (countLenOnMicroscope % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnMicroscope--;
                            buttonMicroscopeLensOn.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnMicroscopeActionPerformed

    private void buttonSecondGenerateActionPerformedMicroscope(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedMicroscope
        actionTag = "Microscope";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayMicroscope--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
                image.paintMicroscope();
                EduPatternShowOn.updateLensPattern(image, genLogMicroscope());
                setLog(genLogMicroscope());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayMicroscope % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedMicroscope

    private void sliderGenerateActionPerformedMicroscope(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedMicroscope
        actionTag = "Microscope";
        if (parseArguments()) {
            buttonMicroscopeLensOn.setEnabled(true);
            buttonMicroscopeDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMicoscopeParameter(xoffMicroscope, yoffMicroscope, focalMicroscope);
            image.paintMicroscope();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMicroscope());
            setLog(genLogMicroscope());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedMicroscope

    // Cyllin
    private void buttonGenerateActionPerformedCyllin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Cyllin";
        if (parseArguments()) {
            buttonCyllinLensOn.setEnabled(true);
            buttonCyllinDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
            image.paintCylindircal();
            EduPatternShowOn.updateLensPatternPattern(image, genLogCyllin());
            setLog(genLogCyllin());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void button11LensOnCyllinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnCyllinActionPerformed
        actionTag = "Cyllin";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
            image.paintCylindircal();
            EduPatternShowOn.updateLensPatternPattern(image, genLogCyllin());
            setLog(genLogCyllin());
            imageGenerated = true;

            if (countLenOnCyllin % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnCyllin--;
                            buttonCyllinLensOn.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnCyllinActionPerformed

    private void buttonSecondGenerateActionPerformedCyllin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Cyllin";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayCyllin--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
                image.paintCylindircal();
                EduPatternShowOn.updateLensPattern(image, genLogCyllin());
                setLog(genLogCyllin());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayCyllin % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedCyllin(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Cyllin";
        if (parseArguments()) {
            buttonCyllinLensOn.setEnabled(true);
            buttonCyllinDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCyllindricalParameter(xoffCyllin, yoffCyllin, focalCyllin);
            image.paintCylindircal();
            EduPatternShowOn.updateLensPatternPattern(image, genLogCyllin());
            setLog(genLogCyllin());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin

    // Mirror
    private void buttonGenerateActionPerformedMirror(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMirror
        actionTag = "Mirror";
        if (parseArguments()) {
            buttonMirrorLensOn.setEnabled(true);
            buttonMirrorDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirror());
            setLog(genLogMirror());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMirror

    private void button11LensOnMirrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnMirrorActionPerformed
        actionTag = "Cyllin";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirror());
            setLog(genLogMirror());
            imageGenerated = true;

            if (countLenOnMirror % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnMirror--;
                            buttonMirrorLensOn.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnMirrorActionPerformed

    private void buttonSecondGenerateActionPerformedMirror(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Mirror";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayMirror--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateMirrorParameter(phy, theta);
                image.paintMirror();
                EduPatternShowOn.updateLensPattern(image, genLogMirror());
                setLog(genLogMirror());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayMirror % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedMirror(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Mirror";
        if (parseArguments()) {
            buttonMirrorLensOn.setEnabled(true);
            buttonMirrorDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirror());
            setLog(genLogMirror());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin
    private void keyEventGenerateActionPerformedMirror(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Mirror";
        if (parseArguments()) {
            buttonMirrorLensOn.setEnabled(true);
            buttonMirrorDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorParameter(phy, theta);
            image.paintMirror();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirror());
            setLog(genLogMirror());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin

    // Slit
    private void buttonGenerateActionPerformedSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Slit";
        if (parseArguments()) {
            buttong11LensOnSlit.setEnabled(true);
            buttonSecondDisplaySlit.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(1, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
            image.slit(slit);
            EduPatternShowOn.updateLensPatternPattern(image, genLogSlit());
            setLog(genLogSlit());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void button11LensOnSlitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnSlitActionPerformed
        actionTag = "Slit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(1, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
            image.slit(slit);
            EduPatternShowOn.updateLensPatternPattern(image, genLogSlit());
            setLog(genLogSlit());
            imageGenerated = true;

            if (countLenOnSlit % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });

            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnSlit--;
                            buttong11LensOnSlit.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnSlitActionPerformed

    private void buttonSecondGenerateActionPerformedSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Slit";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplaySlit--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
                image.slit(slit);
                EduPatternShowOn.updateLensPattern(image, genLogSlit());
                setLog(genLogSlit());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplaySlit % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedSlit(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Slit";
        if (parseArguments()) {
            buttong11LensOnSlit.setEnabled(true);
            buttonSecondDisplaySlit.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(slit, d_widthX, d_heightX, d_postionX, d_rotation, d_grayLevel, d_spacing);
            image.slit(slit);
            EduPatternShowOn.updateLensPatternPattern(image, genLogSlit());
            setLog(genLogSlit());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin

    // doubel slit 
    private void buttonGenerateActionPerformedDoubleSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedDoubleSlit
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            buttong11LensOnDoubleSlit.setEnabled(true);
            buttonSecondDisplayDoubleSlit.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
            image.slit(2);
            EduPatternShowOn.updateLensPatternPattern(image, genLogDoubleSlit());
            setLog(genLogDoubleSlit());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedDoubleSlit

    private void button11LensOnDoubleSlitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnDoubleSlitActionPerformed
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
            image.slit(2);
            EduPatternShowOn.updateLensPatternPattern(image, genLogDoubleSlit());
            setLog(genLogDoubleSlit());
            imageGenerated = true;

            if (countLenOnDoubleSlit % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnDoubleSlit--;
                            buttong11LensOnDoubleSlit.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnDoubleSlitActionPerformed

    private void buttonSecondGenerateActionPerformedDoubleSlit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedDoubleSlit
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayDoubleSlit--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
                image.slit(2);
                EduPatternShowOn.updateLensPattern(image, genLogDoubleSlit());
                setLog(genLogDoubleSlit());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayDoubleSlit % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedDoubleSlit

    private void sliderGenerateActionPerformedDoubleSlit(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedDoubleSlit
        actionTag = "DoubleSlit";
        if (parseArguments()) {
            buttong11LensOnDoubleSlit.setEnabled(true);
            buttonSecondDisplayDoubleSlit.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateLensParameterDrawSlit(2, d_widthX_double, d_heightX_double, d_postionX_double, d_rotation_double, d_grayLevel_double, d_spacing_double);
            image.slit(2);
            EduPatternShowOn.updateLensPatternPattern(image, genLogDoubleSlit());
            setLog(genLogDoubleSlit());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedDoubleSlit

//Processing
    private void buttonGenerateActionPerformedProcessing(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Processing";
        if (parseArguments()) {
            button11LensOnProcessing.setEnabled(true);
            buttonSecondDisplayProcessing.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel, processing_spacing);
            image.signalProcessing();
            EduPatternShowOn.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void button11LensOnProcessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnProcessingActionPerformed
        actionTag = "Processing";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel, processing_spacing);
            image.signalProcessing();
            EduPatternShowOn.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
            if (countLenOnProcessing % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnProcessing--;
                            button11LensOnProcessing.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }
        }
    }//GEN-LAST:event_button11LensOnProcessingActionPerformed

    private void buttonSecondGenerateActionPerformedProcessing(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Processing";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayProcessing--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel, processing_spacing);
                image.signalProcessing();
                EduPatternShowOn.updateLensPattern(image, genLogProcessing());
                setLog(genLogProcessing());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayProcessing % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedProcessing(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Processing";
        if (parseArguments()) {
            button11LensOnProcessing.setEnabled(true);
            buttonSecondDisplayProcessing.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel, processing_spacing);
            image.signalProcessing();
            EduPatternShowOn.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }
    }
    
    //Talbot
    private void buttonGenerateActionPerformedTalbot(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedTalbot
        actionTag = "Talbot";
        if (parseArguments()) {
            button11LensOntalbot.setEnabled(true);
            buttonSecondDisplaytalbot.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawTalbot(talbot_widthX, talbot_widthY, talbot_heightX, talbot_heightY, talbot_positionX, talbot_positionY, talbot_rotation, talbot_grayLevel, talbot_spacing);
            image.paintTalbot();
            EduPatternShowOn.updateLensPatternPattern(image, genLogTalbot());
            setLog(genLogTalbot());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedTalbot

    private void button11LensOnTalbotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnTalbotActionPerformed
        actionTag = "Talbot";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawTalbot(talbot_widthX, talbot_widthY, talbot_heightX, talbot_heightY, talbot_positionX, talbot_positionY, talbot_rotation, talbot_grayLevel, talbot_spacing);
            image.paintTalbot();
            EduPatternShowOn.updateLensPatternPattern(image, genLogTalbot());
            setLog(genLogTalbot());
            imageGenerated = true;
            if (countLenOnTalbot % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnTalbot--;
                            button11LensOntalbot.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }
        }
    }//GEN-LAST:event_button11LensOnTalbotActionPerformed

    private void buttonSecondGenerateActionPerformedTalbot(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedTalbot
        actionTag = "Talbot";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayTalbot--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateParameterDrawTalbot(talbot_widthX, talbot_widthY, talbot_heightX, talbot_heightY, talbot_positionX, talbot_positionY, talbot_rotation, talbot_grayLevel, talbot_spacing);
                image.paintTalbot();
                EduPatternShowOn.updateLensPatternPattern(image, genLogTalbot());
                setLog(genLogTalbot());
                imageGenerated = true;
                if (countSecondDisplayTalbot % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedTalbot

    private void sliderGenerateActionPerformedTalbot(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedTalbot
        actionTag = "Talbot";
        if (parseArguments()) {
            button11LensOntalbot.setEnabled(true);
            buttonSecondDisplaytalbot.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterDrawTalbot(talbot_widthX, talbot_widthY, talbot_heightX, talbot_heightY, talbot_positionX, talbot_positionY, talbot_rotation, talbot_grayLevel, talbot_spacing);
            image.paintTalbot();
            EduPatternShowOn.updateLensPatternPattern(image, genLogTalbot());
            setLog(genLogTalbot());
            imageGenerated = true;
        }
    }
    /*
     * Signal Photo
     */

    private void buttonGenerateActionPerformedProcessingPhoto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            buttonSecondPhoto.setEnabled(true);
            button11LensOnPhoto.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            //   image.updateParameterDrawSignalPhoto(buffImages.get);
            image.signalPhoto(buffImages);
            EduPatternShowOn.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }

    }

    private void button11LensOnProcessingPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnProcessingPhotoActionPerformed
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.signalPhoto(buffImages);
            EduPatternShowOn.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;

            if (countLenOnPhoto % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });

            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnPhoto--;
                            button11LensOnPhoto.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnProcessingPhotoActionPerformed

    private void buttonSecondGenerateActionPerformedProcessingPhoto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayPhoto--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                // image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
                image.signalPhoto(buffImages);
                EduPatternShowOn.updateLensPattern(image, genLogProcessing());
                setLog(genLogProcessing());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayPhoto % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }

    private void sliderGenerateActionPerformedProcessingPhoto(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "ProcessingPhoto";
        if (parseArguments()) {
            buttonSecondPhoto.setEnabled(true);
            button11LensOnPhoto.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            //  image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
            image.signalPhoto(buffImages);
            EduPatternShowOn.updateLensPatternPattern(image, genLogProcessing());
            setLog(genLogProcessing());
            imageGenerated = true;
        }
    }
    /*
     * Phase
     */

    private void buttonGenerateActionPerformedPhase(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCyllin
        actionTag = "Phase";
        if (parseArguments()) {
            buttonSecondPhase.setEnabled(true);
            button11LensOnPhase.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updatePhaseRetarderParameter(zoom, grayLevel);
            image.phaseRetarder();
            EduPatternShowOn.updateLensPatternPattern(image, genLogPhase());
            setLog(genLogPhase());
            imageGenerated = true;
        }
    }//GEN-LAST:event_buttonGenerateActionPerformedCyllin

    private void button11LensOnPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnPhaseActionPerformed
        actionTag = "Phase";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updatePhaseRetarderParameter(zoom, grayLevel);
            image.phaseRetarder();
            EduPatternShowOn.updateLensPatternPattern(image, genLogPhase());
            setLog(genLogPhase());
            imageGenerated = true;

            if (countLenOnPhase % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnPhase--;
                            button11LensOnPhase.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }
        }

    }//GEN-LAST:event_button11LensOnPhaseActionPerformed

    private void buttonSecondGenerateActionPerformedPhase(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
        actionTag = "Phase";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayPhase--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updatePhaseRetarderParameter(zoom, grayLevel);
                image.phaseRetarder();
                EduPatternShowOn.updateLensPattern(image, genLogPhase());
                setLog(genLogPhase());
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayPhase % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedPhase(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Phase";
        if (parseArguments()) {
            buttonSecondPhase.setEnabled(true);
            button11LensOnPhase.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updatePhaseRetarderParameter(zoom, grayLevel);
            image.phaseRetarder();
            EduPatternShowOn.updateLensPatternPattern(image, genLogPhase());
            setLog(genLogPhase());
            imageGenerated = true;
        }
    }

    // Mirror Spectometer
    private void buttonGenerateActionPerformedMirrorSpectometer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            buttonMirrorSpectometerLensOn.setEnabled(true);
            buttonMirrorSpectometerDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;
        }

    }//GEN-LAST:event_buttonGenerateActionPerformedMirrorSpectometer

    private void button11LensOnMirrorSpectometerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnMirrorSpectometerActionPerformed
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;

            if (countLenOnSpectrometer % 2 == 0) {
                magFrameLenon.dispose();
            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnSpectrometer--;
                            buttonMirrorSpectometerLensOn.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnMirrorSpectometerActionPerformed

    private void buttonSecondGenerateActionPerformedMirrorSpectometer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplaySpectrometer--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
                image.paintMirrorSpectrometer();
                EduPatternShowOn.updateLensPattern(image, genLogMirrorSpectrometer());
                setLog(genLogMirrorSpectrometer());
                imageGenerated = true;
                if (countSecondDisplaySpectrometer % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedMirrorSpectometer
    
    private void keyEventGenerateActionPerformedMirrorSpectometer(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyEventGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            buttonMirrorSpectometerLensOn.setEnabled(true);
            buttonMirrorSpectometerDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;
        }
    }

    private void sliderGenerateActionPerformedMirrorSpectometer(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedMirrorSpectometer
        actionTag = "MirrorSpectometer";
        if (parseArguments()) {
            buttonMirrorSpectometerLensOn.setEnabled(true);
            buttonMirrorSpectometerDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateMirrorSpectometerParameter(phySpectrometer, thetaSpectrometer);
            image.paintMirrorSpectrometer();
            EduPatternShowOn.updateLensPatternPattern(image, genLogMirrorSpectrometer());
            setLog(genLogMirrorSpectrometer());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedMirrorSpectometer
    
    
    // Calibration
    private void buttonGenerateActionPerformedCalibration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedCalibration
        actionTag = "Calibration";
        buttonCalibrationLensOn.setEnabled(true);
        buttonCalibrationDisplaySecondOn.setEnabled(true);

        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
//            image.updateCalibrationParameter(xoffCalibration, yoffCalibration, focalCalibration);
//            image.paintCalibration();
        image.paintFineTuning(buffImagesCalibration);
        EduPatternShowOn.updateLensPatternPattern(image, "");
        setLog("");
        imageGenerated = true;
    }//GEN-LAST:event_buttonGenerateActionPerformedCalibration

    private void button11LensOnCalibrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnCalibrationActionPerformed
        actionTag = "Calibration";
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        image.paintFineTuning(buffImagesCalibration);
        EduPatternShowOn.updateLensPatternPattern(image, "");
        setLog("");

        setLog("");
        imageGenerated = true;

        if (countLenOnCalibration % 2 == 0) {
            magFrameLenon.dispose();
            panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    patternFrame.show();
                }
            });
        } else {
            magFrameLenon = new JFrame("1:1 Lens On");
            URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
            Toolkit kit = Toolkit.getDefaultToolkit();
            Image img = kit.createImage(url);
            magFrameLenon.setIconImage(img);
            magFrameLenon.setResizable(false);

            EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
            magFrameLenon.getContentPane().add(mag);
            magFrameLenon.pack();
            magFrameLenon.setLocation(new Point(500, 420));
            magFrameLenon.setVisible(true);
            magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent e) {
                        countLenOnCalibration--;
                        buttonCalibrationLensOn.setText("1:1 lens ON");
                        magFrameLenon.dispose();
                }
            });
        }

    }//GEN-LAST:event_button11LensOnCalibrationActionPerformed
	
	private void buttonSecondGenerateActionPerformedCalibration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedCyllin
            actionTag = "Calibration";
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayCalibration--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
    //                image.updateCalibrationParameter(xoffCalibration, yoffCalibration, focalCalibration);
    //                image.paintCalibration();
                image.paintFineTuning(buffImagesCalibration);
                EduPatternShowOn.updateLensPattern(image, "");
                setLog("");
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayCalibration % 2 == 0) {
                    patternFrame.dispose();
                }
            }
    }//GEN-LAST:event_buttonSecondGenerateActionPerformedCyllin

    private void sliderGenerateActionPerformedCalibration(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedCyllin
        actionTag = "Calibration";
        if (parseArguments()) {
            buttonCalibrationLensOn.setEnabled(true);
            buttonCalibrationDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCalibrationParameter(xoffCalibration, yoffCalibration, focalCalibration);
            image.paintCalibration();
            EduPatternShowOn.updateLensPatternPattern(image, genLogCalibration());
            setLog(genLogCalibration());
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedCyllin
    
    private void keyEventGenerateActionPerformedCalibration(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyEventGenerateActionPerformedCalibration
        actionTag = "Calibration";
        if (parseArguments()) {
            buttonMirrorLensOn.setEnabled(true);
            buttonMirrorDisplaySecondOn.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateCalibrationParameter(xoffCalibration, yoffCalibration, focalCalibration);
            image.paintCalibration();
            EduPatternShowOn.updateLensPatternPattern(image, genLogCalibration());
            setLog(genLogCalibration());
            imageGenerated = true;
        }
    }//GEN-LAST:event_keyEventGenerateActionPerformedCalibration
    
    /*
     * Talbot Photo
     */

    private void buttonGenerateActionPerformedTalbotPhoto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedTalbotPhoto
        actionTag = "TalbotPhoto";
        if (parseArguments()) {
             button11LensOnTalbotPhoto.setEnabled(true);
            buttonSecondTalbotPhoto.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.paintTalbotPhoto(buffImagesTalbotPhoto);
            EduPatternShowOn.updateLensPatternPattern(image, "");
            setLog("");
            imageGenerated = true;
        }

    }

    private void button11LensOnTalbotPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnTalbotPhotoActionPerformed
        actionTag = "TalbotPhoto";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.paintTalbotPhoto(buffImagesTalbotPhoto);
            EduPatternShowOn.updateLensPatternPattern(image, "");
            setLog("");
            imageGenerated = true;

            if (countLenOnTalbotPhoto % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });

            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnTalbotPhoto--;
                            button11LensOnTalbotPhoto.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnTalbotPhotoActionPerformed

    private void buttonSecondGenerateActionPerformedTalbotPhoto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedTalbotPhoto
        actionTag = "TalbotPhoto";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayTalbotPhoto--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                // image.updateParameterDrawSignalProcessing(processing_widthX, processing_widthY, processing_heightX, processing_heightY, processing_positionX, processing_positionY, processing_rotation, processing_grayLevel);
                image.paintTalbotPhoto(buffImagesTalbotPhoto);
                EduPatternShowOn.updateLensPatternPattern(image, "");
                setLog("");
                //EduPatternTest.updateLensPatternPattern(image, genLog());
                imageGenerated = true;
                if (countSecondDisplayTalbotPhoto% 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }
    
    /*
     * Import File
     */

    private void buttonGenerateActionPerformedImportFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformedImportFile
        actionTag = "ImportFile";
        if (parseArguments()) {
            btnLensONImportFile.setEnabled(true);
            btnSecondImportFile.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterImportFile(k, r, e, kr, width_importFile, position_importFile, rotation_importFile, grayLevel_importFile, formula);
            image.paintImportFile();
            EduPatternShowOn.updateLensPatternPattern(image, "");
            setLog("");
            imageGenerated = true;
        }

    }

    private void button11LensOnImportFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11LensOnImportFileActionPerformed
        actionTag = "ImportFile";
        if (parseArguments()) {
            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterImportFile(k, r, e, kr, width_importFile, position_importFile, rotation_importFile, grayLevel_importFile, formula);
            image.paintImportFile();
            EduPatternShowOn.updateLensPatternPattern(image, "");
            setLog("");
            imageGenerated = true;

            if (countLenOnImportFile % 2 == 0) {
                magFrameLenon.dispose();
                panelPattern.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        patternFrame.show();
                    }
                });

            } else {
                magFrameLenon = new JFrame("1:1 Lens On");
                URL url = ClassLoader.getSystemResource("resources/jdclogo_48x48.png");
                Toolkit kit = Toolkit.getDefaultToolkit();
                Image img = kit.createImage(url);
                magFrameLenon.setIconImage(img);
                magFrameLenon.setResizable(false);
                
                EduLensOn11 mag = new EduLensOn11(panelPattern, new Dimension(120, 120), 2.0);
                magFrameLenon.getContentPane().add(mag);
                magFrameLenon.pack();
                magFrameLenon.setLocation(new Point(500, 420));
                magFrameLenon.setVisible(true);
                magFrameLenon.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                magFrameLenon.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                            countLenOnImportFile--;
                            btnLensONImportFile.setText("1:1 lens ON");
                            magFrameLenon.dispose();
                    }
                });
            }

        }

    }//GEN-LAST:event_button11LensOnImportFileActionPerformed

    private void buttonSecondGenerateActionPerformedImportFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSecondGenerateActionPerformedImportFile
        actionTag = "ImportFile";
        if (parseArguments()) {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            GraphicsDevice[] devices = env.getScreenDevices();
            if (devices.length == 1) {
                countSecondDisplayImportFile--;
                JOptionPane.showMessageDialog(null, "No second display is found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
                image.updateParameterImportFile(k, r, e, kr, width_importFile, position_importFile, rotation_importFile, grayLevel_importFile, formula);
                image.paintImportFile();
                EduPatternShowOn.updateLensPatternPattern(image, "");
                setLog("");
                imageGenerated = true;
                if (countSecondDisplayImportFile % 2 == 0) {
                    patternFrame.dispose();
                }
            }
        }
    }
    
    private void sliderGenerateActionPerformedImportFile(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderGenerateActionPerformedImportFile
        actionTag = "ImportFile";
        if (parseArguments()) {
            btnLensONImportFile.setEnabled(true);
            btnSecondImportFile.setEnabled(true);

            PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
            image.updateParameterImportFile(k, r, e, kr, width_importFile, position_importFile, rotation_importFile, grayLevel_importFile, formula);
            image.paintImportFile();
            EduPatternShowOn.updateLensPatternPattern(image, "");
            setLog("");
            imageGenerated = true;
        }
    }//GEN-LAST:event_sliderGenerateActionPerformedImportFile
    
    //End
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel panelPattern;
    // Lens
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel2;
    private DoubleJSlider jSliderFocalLens;
    private DoubleJSlider jSliderXPositionLens;
    private DoubleJSlider jSliderYPositionLens;
    private javax.swing.JTextField txtFocalLens;
    private javax.swing.JTextField txtXPositionLens;
    private javax.swing.JTextField txtYPositionLens;
    private javax.swing.JButton jButton11LensOn;
    private javax.swing.JButton jButtonDisplaySecondOn;
    private javax.swing.JButton jButtonLens;
    // Lens Michelson
    private javax.swing.JLabel lblFocalLensMichelson;
    private javax.swing.JLabel lblXLensMichelson;
    private javax.swing.JLabel lblYLensMichelson;
    private javax.swing.JSlider jSliderFocalLensMichelson;
    private DoubleJSlider jSliderXPositionLensMichelson;
    private DoubleJSlider jSliderYPositionLensMichelson;
    private javax.swing.JTextField txtFocalLensMichelson;
    private javax.swing.JTextField txtXPositionLensMichelson;
    private javax.swing.JTextField txtYPositionLensMichelson;
    private javax.swing.JButton jButton11LensOnMichelson;
    private javax.swing.JButton jButtonDisplaySecondOnMichelson;
    private javax.swing.JButton jButtonLensMichelson;
    private RangeSlider rangeSlider;
    public javax.swing.JSlider sliderXpos;
    private javax.swing.JSlider sliderYPos;
    private javax.swing.JSlider sliderFocal;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JButton ok;
    private javax.swing.JButton btnLensON;
    private javax.swing.JButton btnSecond;
    private javax.swing.JTextField textXpos;
    private javax.swing.JTextField textYpos;
    private javax.swing.JTextField textFocal;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // Microscope
    public javax.swing.JLabel lblFocalMicroscope;
    private javax.swing.JLabel lblXPosMicroscope;
    private javax.swing.JLabel lblYPosMicroscope;
    private javax.swing.JSlider jSliderFocalMicroscope;
    private javax.swing.JSlider jSliderXPositionMicroscope;
    private javax.swing.JSlider jSliderYPositionMicroscope;
    private javax.swing.JTextField txtFocalMicroscope;
    private javax.swing.JTextField txtXPositionMicroscope;
    private javax.swing.JTextField txtYPositionMicroscope;
    private javax.swing.JButton buttonMicroscopeLensOn;
    private javax.swing.JButton buttonMicroscopeDisplaySecondOn;
    private javax.swing.JButton buttonMicroscopeGeneral;
    // Cyllin
    public javax.swing.JLabel lblFocalCyllin;
    private javax.swing.JLabel lblXPosCyllin;
    private javax.swing.JLabel lblYPosCyllin;
    private javax.swing.JSlider jSliderFocalCyllin;
    private javax.swing.JSlider jSliderXPositionCyllin;
    private javax.swing.JSlider jSliderYPositionCyllin;
    private javax.swing.JTextField txtFocalCyllin;
    private javax.swing.JTextField txtXPositionCyllin;
    private javax.swing.JTextField txtYPositionCyllin;
    private javax.swing.JButton buttonCyllinLensOn;
    private javax.swing.JButton buttonCyllinDisplaySecondOn;
    private javax.swing.JButton buttonCyllinGeneral;
    // Mirror
    private javax.swing.JLabel lblPhy;
    private javax.swing.JLabel lblThetaMirror;
    private DoubleJSlider jSliderPhyMirror;
    private DoubleJSlider jSliderThetaMirror;
    private javax.swing.JTextField txtPhyMirror;
    private javax.swing.JTextField txtThetaMirror;
    private javax.swing.JButton buttonMirrorLensOn;
    private javax.swing.JButton buttonMirrorDisplaySecondOn;
    private javax.swing.JButton buttonMirrorGeneral;
    private javax.swing.JPanel jPanelMirror;
    // END Mirror
    private javax.swing.JPanel jPanelNoSelect;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanelCyllindrical;
    private javax.swing.JPanel jPanelCyllindrical1;
    private javax.swing.JPanel jPanelMicroscope;
    private javax.swing.JPanel jPanelLensMichelson;
    private javax.swing.JPanel jPanelLens;
    private javax.swing.JTabbedPane jTabbedControler;
    private javax.swing.JLayeredPane layoutControl;
    private javax.swing.JPanel panelCalebration;
    private javax.swing.JPanel panelGeneral;
    private javax.swing.JPanel panelPhase;
    private javax.swing.JPanel panelSignal;
    private javax.swing.JPanel panelSignalPhoto;
    private javax.swing.JPanel panelSlit;
    private javax.swing.JPanel panelDoubleSlit;
    private javax.swing.JTabbedPane tabbedControl;
    private javax.swing.JPanel jPanelPattern;
    private javax.swing.JLabel jLabelSelectExperiment;
    private javax.swing.JTabbedPane jTabbedPaneOptics;
    private javax.swing.JPanel layoutDiagram;
    private javax.swing.JPanel layoutDiagramFull;
    private byte layoutDiagramFullOpen = 0;
    private byte layoutDescriptionFullOpen = 0;
    private byte frameLensOnOpen = 0;
    // Spectometer
    private javax.swing.JLabel lblPhySpectometer;
    private javax.swing.JLabel lblThetaMirrorSpectometer;
    private DoubleJSlider jSliderPhyMirrorSpectometer;
    private DoubleJSlider jSliderThetaMirrorSpectometer;
    private javax.swing.JTextField txtPhyMirrorSpectometer;
    private javax.swing.JTextField txtThetaMirrorSpectometer;
    private javax.swing.JButton buttonMirrorSpectometerLensOn;
    private javax.swing.JButton buttonMirrorSpectometerDisplaySecondOn;
    private javax.swing.JButton buttonMirrorSpectometerGeneral;
    private javax.swing.JPanel jPanelMirrorSpectometer;
    // Fresnel
    private javax.swing.JButton buttonOpenFileFresnel;
    private javax.swing.JPanel jPanelFresnel;
    private javax.swing.JButton button11LensOnFresnel;
    private javax.swing.JButton buttonSecondFresnel;
    private javax.swing.JButton buttonGeneralFresnel;
    private javax.swing.JLabel label_fresnel_height;
    private javax.swing.JLabel label_fresnel_width;
    private javax.swing.JSlider s_fresnel_height;
    private javax.swing.JSlider s_fresnel_width;
    private javax.swing.JTextField text_fresnel_height;
    private javax.swing.JTextField text_fresnel_width;
    private javax.swing.JLabel lblPleaseSelectFresnel;
    // Talbot
    private javax.swing.JPanel jPanelTalbot;
     private javax.swing.JPanel jPanelTalbotPhoto;
    /*
     *@Param Slit
     */
    private javax.swing.JButton buttonGennerateSlit;
    private javax.swing.JButton buttonSecondDisplaySlit;
    private javax.swing.JButton buttong11LensOnSlit;
    private javax.swing.JComboBox comboBoxSlit;
    private javax.swing.JLabel jLabelSpacingSlit;
    private javax.swing.JLabel lblGraySlit;
    private javax.swing.JLabel lblHeightSlit;
    private javax.swing.JLabel lblPosSlit;
    private javax.swing.JLabel lblRotationSlit;
    private javax.swing.JLabel lblWidthSlit;
    private javax.swing.JSlider s_single_gray;
    private javax.swing.JSlider s_single_height;
    private javax.swing.JSlider s_single_position;
    private javax.swing.JSlider s_single_rotation;
    private javax.swing.JSlider s_single_spacing;
    private javax.swing.JSlider s_single_width;
    private javax.swing.JTextField text_single_gray;
    private javax.swing.JTextField text_single_height;
    private javax.swing.JTextField text_single_position;
    private javax.swing.JTextField text_single_rotation;
    private javax.swing.JTextField text_single_spacing;
    private javax.swing.JTextField text_single_width;
    private int slit = 1;
    // double slit
    private javax.swing.JButton buttonGennerateDoubleSlit;
    private javax.swing.JButton buttonSecondDisplayDoubleSlit;
    private javax.swing.JButton buttong11LensOnDoubleSlit;
    private javax.swing.JLabel jLabelSpacingDoubleSlit;
    private javax.swing.JLabel lblGrayDoubleSlit;
    private javax.swing.JLabel lblHeightDoubleSlit;
    private javax.swing.JLabel lblPosDoubleSlit;
    private javax.swing.JLabel lblRotationDoubleSlit;
    private javax.swing.JLabel lblWidthDoubleSlit;
    private javax.swing.JSlider s_single_grayDoubleSlit;
    private javax.swing.JSlider s_single_heightDoubleSlit;
    private javax.swing.JSlider s_single_positionDoubleSlit;
    private javax.swing.JSlider s_single_rotationDoubleSlit;
    private javax.swing.JSlider s_single_spacingDoubleSlit;
    private javax.swing.JSlider s_single_widthDoubleSlit;
    private javax.swing.JTextField text_single_grayDoubleSlit;
    private javax.swing.JTextField text_single_heightDoubleSlit;
    private javax.swing.JTextField text_single_positionDoubleSlit;
    private javax.swing.JTextField text_single_rotationDoubleSlit;
    private javax.swing.JTextField text_single_spacingDoubleSlit;
    private javax.swing.JTextField text_single_widthDoubleSlit;
    /*
     *@Param SignalProcessing 
     */
    private javax.swing.JButton button11LensOnProcessing;
    private javax.swing.JButton buttonGennerateProcessing;
    private javax.swing.JButton buttonSecondDisplayProcessing;
    private javax.swing.JLabel jLabelGrayProcessing;
    private javax.swing.JLabel lblHeightY;
    private javax.swing.JLabel lblHeightX;
    private javax.swing.JLabel lblPosX;
    private javax.swing.JLabel lblPosY;
    private javax.swing.JLabel lblRotationProcessing;
    private javax.swing.JLabel lblSpacingProcessing;
    private javax.swing.JLabel lblWidthY;
    private javax.swing.JLabel lblWidthX;
    private javax.swing.JSlider s_processing_gray;
    private javax.swing.JSlider s_processing_height_x;
    private javax.swing.JSlider s_processing_height_y;
    private javax.swing.JSlider s_processing_pos_y;
    private javax.swing.JSlider s_processing_positionx;
    private javax.swing.JSlider s_processing_rotation;
    private javax.swing.JSlider s_processing_width_x;
    private javax.swing.JSlider s_processing_width_y;
    private javax.swing.JSlider s_processing_spacing;
    private javax.swing.JTextField text_height_processing_x;
    private javax.swing.JTextField text_height_processing_y;
    private javax.swing.JTextField text_position_processing_x;
    private javax.swing.JTextField text_position_processing_y;
    private javax.swing.JTextField text_processing_gray;
    private javax.swing.JTextField text_rotation_processing;
    private javax.swing.JTextField text_width_processing_x;
    private javax.swing.JTextField text_width_processing_y;
    private javax.swing.JTextField text_processing_spacing;
    /*
     *@Param Talbot
     */
    private javax.swing.JButton button11LensOntalbot;
    private javax.swing.JButton buttonGenneratetalbot;
    private javax.swing.JButton buttonSecondDisplaytalbot;
    private javax.swing.JLabel jLabelGraytalbot;
    private javax.swing.JLabel lblHeightYTalbot;
    private javax.swing.JLabel lblHeightXTalbot;
    private javax.swing.JLabel lblPosXTalbot;
    private javax.swing.JLabel lblPosYTalbot;
    private javax.swing.JLabel lblRotationtalbot;
    private javax.swing.JLabel lblSpacingtalbot;
    private javax.swing.JLabel lblWidthYTalbot;
    private javax.swing.JLabel lblWidthXTalbot;
    private javax.swing.JSlider s_talbot_gray;
    private javax.swing.JSlider s_talbot_height_x;
    private javax.swing.JSlider s_talbot_height_y;
    private javax.swing.JSlider s_talbot_pos_y;
    private javax.swing.JSlider s_talbot_positionx;
    private javax.swing.JSlider s_talbot_rotation;
    private javax.swing.JSlider s_talbot_width_x;
    private javax.swing.JSlider s_talbot_width_y;
    private javax.swing.JSlider s_talbot_spacing;
    private javax.swing.JTextField text_height_talbot_x;
    private javax.swing.JTextField text_height_talbot_y;
    private javax.swing.JTextField text_position_talbot_x;
    private javax.swing.JTextField text_position_talbot_y;
    private javax.swing.JTextField text_talbot_gray;
    private javax.swing.JTextField text_rotation_talbot;
    private javax.swing.JTextField text_width_talbot_x;
    private javax.swing.JTextField text_width_talbot_y;
    private javax.swing.JTextField text_talbot_spacing;
    private javax.swing.JButton buttonOpenFileTalbotPhoto;
    private javax.swing.JLabel lblPleaseSelectTalbotPhoto;
    private javax.swing.JButton buttonSecondTalbotPhoto;
    private javax.swing.JButton button11LensOnTalbotPhoto;
    private javax.swing.JButton buttonGeneralTalbotPhoto;
    // Import file
    private javax.swing.JPanel panelImportfile;
    private javax.swing.JButton buttonOpenFileImportFile;
    private javax.swing.JLabel lblPleaseSelectImportFile;
    private javax.swing.JButton buttonSecondImportFile;
    private javax.swing.JButton button11LensOnImportFile;
    private javax.swing.JButton buttonGeneralImportFile;
    private javax.swing.JComboBox jComboBoxImportFile;
    private javax.swing.JLabel lblSelectExper_Importfile;
    private javax.swing.JLabel lblSelectFile_Importfile;
    private javax.swing.JCheckBox checkboxUseImage;
    
    private javax.swing.JButton buttonGennerateImportFile;
    private javax.swing.JButton buttonSecondDisplayImportFile;
    private javax.swing.JButton buttong11LensOnImportFile;
    private javax.swing.JLabel jLabelSpacingImportFile;
    private javax.swing.JLabel lblGrayImportFile;
    private javax.swing.JLabel lblHeightImportFile;
    private javax.swing.JLabel lblPosImportFile;
    //private javax.swing.JLabel lblRotationImportFile;
    private javax.swing.JLabel lblWidthImportFile;
    private javax.swing.JSlider s_single_grayImportFile;
    private javax.swing.JSlider s_single_heightImportFile;
    private javax.swing.JSlider s_single_positionImportFile;
    private javax.swing.JSlider s_single_rotationImportFile;
    private javax.swing.JSlider s_single_spacingImportFile;
    private javax.swing.JSlider s_single_widthImportFile;
    private javax.swing.JTextField text_single_grayImportFile;
    private javax.swing.JTextField text_single_heightImportFile;
    private javax.swing.JTextField text_single_positionImportFile;
    private javax.swing.JTextField text_single_rotationImportFile;
    private javax.swing.JTextField text_single_spacingImportFile;
    private javax.swing.JTextField text_single_widthImportFile;
    
    private javax.swing.JButton btnGenerteImportFile;
    private javax.swing.JButton btnLensONImportFile;
    private javax.swing.JButton btnSecondImportFile;
    private javax.swing.JLabel lblE1;
    private javax.swing.JLabel lblGrayLevelImportFile;
    private javax.swing.JLabel lblHeaderImportFile;
    private javax.swing.JLabel lblK;
    private javax.swing.JLabel lblKR;
    private javax.swing.JLabel lblPositionImportFile;
    private javax.swing.JLabel lblR;
    private javax.swing.JLabel lblRotationImportFile;
    private javax.swing.JLabel lbltWidthImportFile;
//    private DoubleJSlider sliderGrayLevelImportFile;
//    private DoubleJSlider sliderPositionImportFile;
    private javax.swing.JSlider sliderGrayLevelImportFile;
    private javax.swing.JSlider sliderPositionImportFile;
    private javax.swing.JSlider sliderRotationImportFile;
    private javax.swing.JSlider sliderWidthImportFile;
    private javax.swing.JTextField txtE1ImportFile;
    private javax.swing.JTextField txtGrayLevelImportFile;
    private javax.swing.JTextField txtK1RImportFile;
    private javax.swing.JTextField txtKImportFile;
    private javax.swing.JTextField txtPositionImportFile;
    private javax.swing.JTextField txtRImportFile;
    private javax.swing.JTextField txtRotationImportFile;
    private javax.swing.JTextField txtWidthImportFile;
    private javax.swing.JTextField txtFormula;
    // Lens On 11 function
    private int countLenOnProcessing = 1;
    private int countLenOnTelephoto = 1;
    private int countLenOnMirror = 1;
    private int countLenOnCyllin = 1;
    private int countLenOnMicroscope = 1;
    private int countLenOnMichelson = 1;
    private int countLenOnDiffaction = 1;
    private int countLenOnSpectrometer = 1;
    private int countLenOnTalbot = 1;
    private int countLenOnTalbotPhoto = 1;
    private int countLenOnPhase = 1;
    private int countLenOnWavefront = 1;
    private int countLenOnWavelength = 1;
    private int countLenOnPhoto = 1;
    private int countLenOnSlit = 1;
    private int countLenOnDoubleSlit = 1;
    private int countLenOnFresnel = 1;
    private int countLenOnCalibration = 1;
    private int countLenOnImportFile = 1;
    // Second display
    private int countSecondDisplayTelephoto = 1;
    private int countSecondDisplayProcessing = 1;
    private int countSecondDisplayMirror = 1;
    private int countSecondDisplayCyllin = 1;
    private int countSecondDisplayMicroscope = 1;
    private int countSecondDisplayMichelson = 1;
    private int countSecondDisplayDiffaction = 1;
    private int countSecondDisplaySpectrometer = 1;
    private int countSecondDisplayTalbot = 1;
    private int countSecondDisplayTalbotPhoto = 1;
    private int countSecondDisplayPhase = 1;
    private int countSecondDisplayWavefront = 1;
    private int countSecondDisplayWavelength = 1;
    private int countSecondDisplayPhoto = 1;
    private int countSecondDisplaySlit = 1;
    private int countSecondDisplayDoubleSlit = 1;
    private int countSecondDisplayFresnel = 1;
    private int countSecondDisplayCalibration = 1;
    private int countSecondDisplayImportFile = 1;
    // Check disable lens ON
//    private int countDisableTelephoto = 0;
//    private int countDisableProcessing = 0;
//    private int countDisableMirror = 0;
//    private int countDisableCyllin = 0;
//    private int countDisableMicroscope = 0;
//    private int countDisableMichelson = 0;
//    private int countDisableDiffaction = 0;
//    private int countDisableSpectrometer = 0;
//    private int countDisableTalbot = 0;
//    private int countDisablePhase = 0;
//    private int countDisableWavefront = 0;
//    private int countDisableWavelength = 0;
//    private int countDisablePhoto = 0;
//    private int countDisableSlit = 0;
//    private int countDisableDoubleSlit = 0;
//    private int countDisableFresnel = 0;
    DoubleJSlider slider;
    /*
     * Photo
     */
    private javax.swing.JButton button11LensOnPhoto;
    private javax.swing.JButton buttonGeneralPhoto;
    private javax.swing.JButton buttonSecondPhoto;
    private javax.swing.JLabel lblPleaseSelectPhoto;
    /*
     *@Param Phase retarder
     */
    private javax.swing.JButton button11LensOnPhase;
    private javax.swing.JButton buttonGeneralPhase;
    private javax.swing.JButton buttonOpenFile;
    private javax.swing.JButton buttonSecondPhase;
    private javax.swing.JLabel lblPleaseSelect;
    private javax.swing.JLabel lblZoom;
    private javax.swing.JSlider s_phase_zoom;
    private javax.swing.JTextField txtZoom;
    private javax.swing.JFileChooser openFile;
    //
    private javax.swing.JTabbedPane tabbedDesLog;
    private javax.swing.JPanel tabbedDiagram;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextArea jTextAreaDesc;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollDes;
    private javax.swing.JPanel diagramLens;
    private javax.swing.JPanel diagramLensFull;
    private javax.swing.JLabel lblDiagram;
    private javax.swing.JLabel lblDiagramFull;
    private String actionTag = "Len";
    private JFrame magFrameLenon;
    private JFrame magFrameLensOnSpectrometer;
    private JFrame diagramFullScreen;
    private JFrame descriptionFullScreen;
    
    // Calibration
    public javax.swing.JLabel lblFocalCalibration;
    private javax.swing.JLabel lblXPosCalibration;
    private javax.swing.JLabel lblYPosCalibration;
    private DoubleJSlider jSliderFocalCalibration;
    private DoubleJSlider jSliderXPositionCalibration;
    private DoubleJSlider jSliderYPositionCalibration;
    private javax.swing.JTextField txtFocalCalibration;
    private javax.swing.JTextField txtXPositionCalibration;
    private javax.swing.JTextField txtYPositionCalibration;
    private javax.swing.JButton buttonCalibrationLensOn;
    private javax.swing.JButton buttonCalibrationDisplaySecondOn;
    private javax.swing.JButton buttonCalibrationGeneral;
    // Description
    private javax.swing.JLabel desFullScreen;
    private javax.swing.JLabel desNoSelect = new JLabel("");
    private javax.swing.JLabel desTelephotoLens = EduDescription.desTelephotoLens;
    private javax.swing.JLabel desMicroscope = EduDescription.desMicroscope;
    private javax.swing.JLabel desAberration = EduDescription.desAberration;
    private javax.swing.JLabel desMichelson = EduDescription.desMichelson;
    private javax.swing.JLabel desDiffaction = EduDescription.desDiffaction;
    private javax.swing.JLabel desSpectrometer = EduDescription.desSpectrometer;
    private javax.swing.JLabel desSignalProcessing = EduDescription.desSignalProcessing;
    private javax.swing.JLabel desPhaseRetarder = EduDescription.desPhaseRetarder;
    private javax.swing.JLabel desTalbotImage = EduDescription.desTalbotImage;
    private javax.swing.JLabel desWavefront = EduDescription.desWavefront;
    private javax.swing.JLabel desWavelength = EduDescription.desWavelength;
    private javax.swing.JLabel desCalibration = EduDescription.desCalibration;
    private javax.swing.JLabel  desImportfile = EduDescription.desImportfile;
    // Fine tuning
    private javax.swing.JButton buttonOpenFileCalibration;
    private javax.swing.JLabel lblPleaseSelectCalibration;
    
    // Temp
    private byte tmpSelected = 0;

    //End 
    @Override
    void updatePatternScreen() {
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        if (!imageGenerated) {
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
            imageGenerated = true;
        }
        EduPatternShowOn.updatePatternScreen(image, "");
    }
    // paint boot screen, lens only

    void bootScreen() {
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        double xoff = 0.0;
        double yoff = 0.0;
        double focal = 522;
        image.updateLensParameter(xoff, yoff, focal);
        image.paintLens();
    }

    void updateRegenerate() {
        PatternImage image = ((EduPatternJPanel) panelPattern).pimage;
        if (imageGenerated) {
            image.updateLensParameter(xoff, yoff, focal);
            image.paintLens();
        }
    }
    static String logmessageLen = "Telephoto lens: Focal length=%s X Position=%s Y Position=%s";
    static String logmessageLensMichelson = "Michelson lens: Focal length=%s X Position=%s Y Position=%s";
    static String logmessageMicroscope = "Microscope : Focal length=%s X Position=%s Y Position=%s";
    static String logmessageCyllin = "Cyllin : Focal length=%s X Position=%s Y Position=%s";
    static String logmessageMirror = "Mirror : Phy=%s Theta=%s";
    static String logmessageSlit = "Slit: w=%s r=%s p=%s g=%s";
    static String logmessageDoubleSlit = "Double Slit: w=%s r=%s p=%s g=%s s=%s";
    static String logmessageProcessing = "Signal processing: w_x=%s w_y=%s r=%s p_x=%s p_y=%s g=%s spac=%s";
    static String logmessageTalbot = "Talbot images: w_x=%s w_y=%s r=%s p_x=%s p_y=%s g=%s spac=%s";
    static String logmessagePhase = "Phase retarder: gray=%s";
    static String logmessageMirrorSpectrometer = "Mirror Spectrometer : Phy=%s Theta=%s";
    static String logmessageCalibration = "Calibration : Focal length=%s X Position=%s Y Position=%s";
}